{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"MultiMolecule","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to MultiMolecule (\u200b\u6d66\u539f\u200b), a foundational library designed to accelerate Scientific Research with Machine Learning. MultiMolecule aims to provide a comprehensive yet flexible set of tools for researchers who wish to leverage AI in their work.</p> <p>We understand that AI4Science is a broad field, with researchers from different disciplines employing various practices. Therefore, MultiMolecule is designed with low coupling in mind, meaning that while it offers a full suite of functionalities, each module can be used independently. This allows you to integrate only the components you need into your existing workflows without adding unnecessary complexity. The key functionalities that MultiMolecule provides include:</p> <ul> <li><code>data</code>: Efficient data handling and preprocessing capabilities to streamline the ingestion and transformation of scientific datasets.</li> <li><code>module</code>: Modular components designed to provide flexibility and reusability across various machine learning tasks.</li> <li><code>models</code>: State-of-the-art model architectures optimized for scientific research applications, ensuring high performance and accuracy.</li> <li><code>tokenisers</code>: Advanced tokenization methods to effectively handle complex scientific text and data representations.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install the most recent stable version on PyPI:</p> Bash<pre><code>pip install multimolecule\n</code></pre> <p>Install the latest version from the source:</p> Bash<pre><code>pip install git+https://github.com/DLS5-Omics/MultiMolecule\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use MultiMolecule in your research, please cite us as follows:</p> BibTeX<pre><code>@software{chen_2024_12638419,\n  author    = {Chen, Zhiyuan and Zhu, Sophia Y.},\n  title     = {MultiMolecule},\n  doi       = {10.5281/zenodo.12638419},\n  publisher = {Zenodo},\n  url       = {https://doi.org/10.5281/zenodo.12638419},\n  year      = 2024,\n  month     = may,\n  day       = 4\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>We believe openness is the Foundation of Research.</p> <p>MultiMolecule is licensed under the GNU Affero General Public License.</p> <p>Please join us in building an open research community.</p> <p><code>SPDX-License-Identifier: AGPL-3.0-or-later</code></p>"},{"location":"about/","title":"About","text":"<p>Developed by DanLing on Earth</p> <p>We are a community of developers, designers, and others from around the world who are working together to make deep learning more accessible.</p> <p>We are a community of individuals who seek to push the boundaries of what is possible with deep learning.</p> <p>We are passionate about Deep Learning and the people who use it.</p> <p>We are DanLing.</p>"},{"location":"about/license/","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"about/license/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"about/license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"about/license/#0-definitions","title":"0. Definitions.","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"about/license/#1-source-code","title":"1. Source Code.","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"about/license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"about/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.</p>"},{"location":"about/license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"about/license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified   it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is   released under this License and any conditions added under   section 7. This requirement modifies the requirement in section 4   to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this   License to anyone who comes into possession of a copy. This   License will therefore apply, along with any applicable section 7   additional terms, to the whole of the work, and all its parts,   regardless of how they are packaged. This License gives no   permission to license the work in any other way, but it does not   invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display   Appropriate Legal Notices; however, if the Program has interactive   interfaces that do not display Appropriate Legal Notices, your   work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"about/license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by the   Corresponding Source fixed on a durable physical medium   customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by a   written offer, valid for at least three years and valid for as   long as you offer spare parts or customer support for that product   model, to give anyone who possesses the object code either (1) a   copy of the Corresponding Source for all the software in the   product that is covered by this License, on a durable physical   medium customarily used for software interchange, for a price no   more than your reasonable cost of physically performing this   conveying of source, or (2) access to copy the Corresponding   Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the   written offer to provide the Corresponding Source. This   alternative is allowed only occasionally and noncommercially, and   only if you received the object code with such an offer, in accord   with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated   place (gratis or for a charge), and offer equivalent access to the   Corresponding Source in the same way through the same place at no   further charge. You need not require recipients to copy the   Corresponding Source along with the object code. If the place to   copy the object code is a network server, the Corresponding Source   may be on a different server (operated by you or a third party)   that supports equivalent copying facilities, provided you maintain   clear directions next to the object code saying where to find the   Corresponding Source. Regardless of what server hosts the   Corresponding Source, you remain obligated to ensure that it is   available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,   provided you inform other peers where the object code and   Corresponding Source of the work are being offered to the general   public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"about/license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the   terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or   author attributions in that material or in the Appropriate Legal   Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,   or requiring that modified versions of such material be marked in   reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors   or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some   trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that   material by anyone who conveys the material (or modified versions   of it) with contractual assumptions of liability to the recipient,   for any liability that these contractual assumptions directly   impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"about/license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"about/license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"about/license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"about/license/#11-patents","title":"11. Patents.","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d.</p> <p>A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"about/license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others\u2019 Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"about/license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"about/license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"about/license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"about/license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"about/license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"about/license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> Text Only<pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"about/privacy/","title":"Privacy Notice","text":"<p>Last Revised Date</p> <p>This notice was last updated on May 04, 2024.</p>"},{"location":"about/privacy/#privacy-notice","title":"Privacy Notice","text":"<p>This privacy notice for DanLing Team (also known as DanLing) (\u2018we\u2019, \u2018us\u2019, or \u2018our\u2019), describes how and why we might collect, store, use, and/or share (\u2018process\u2019) your information when you use our services (\u2018Services\u2019), such as when you:</p> <ul> <li>Visit our website at multimolecule.danling.org, or any website of ours that links to this privacy notice</li> </ul> <p>You can change your privacy settings at any time by clicking the button below:</p> <p>Privacy Control</p> <p>Questions or concerns? Reading this privacy notice will help you understand your privacy rights and choices. If you do not agree with our policies and practices, please do not use our Services. If you still have any questions or concerns, please contact us at privacy@danling.org.</p>"},{"location":"about/privacy/#0-summary-of-key-points","title":"0. Summary of Key Points","text":"<p>This summary provides key points from our privacy notice, but you can find out more details about any of these topics by clicking the link following each key point or by using our table of contents below to find the section you are looking for.</p> <p>What personal information do we process?</p> <p>When you visit, use, or navigate our Services, we may process personal information depending on how you interact with us and the Services, the choices you make, and the products and features you use.</p> <p> What information do we collect?</p> <p>How do we process your information?</p> <p>We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent. We process your information only when we have a valid legal reason to do so.</p> <p> How do we process your information?</p> <p>Do we process any sensitive personal information?</p> <p>We do not process any sensitive personal information.</p> <p>Do we collect any information from third parties?</p> <p>We do not collect any information from third parties.</p> <p>In what situations and with which parties do we share personal information?</p> <p>We may share information in specific situations and with specific third parties.</p> <p> When and with whom we share your personal information?</p> <p>How do we keep your information safe?</p> <p>We have organisational and technical processes and procedures in place to protect your personal information.</p> <p> How do we keep your information safe?</p> <p>What are your rights?</p> <p>Depending on where you are located geographically, the applicable privacy law may mean you have certain rights regarding your personal information.</p> <p> What are your privacy rights?</p> <p>How do you exercise your rights?</p> <p>The easiest way to exercise your rights is by contacting the relevant data protection authority in your jurisdiction.</p> <p> How to exercise your rights</p>"},{"location":"about/privacy/#1-what-information-do-we-collect","title":"1. What information do we collect?","text":""},{"location":"about/privacy/#personal-information-you-disclose-to-us","title":"Personal information you disclose to us","text":"<p>In Short</p> <p>We collect personal information that you provide to us.</p> <p>We collect personal information that you voluntarily provide to us when you express an interest in obtaining information about us or our products and Services, when you participate in activities on the Services, or otherwise when you contact us.</p> <p>Sensitive Personal Information</p> <p>We do not collect any sensitive personal information from you.</p>"},{"location":"about/privacy/#information-automatically-collected","title":"Information automatically collected","text":"<p>In Short</p> <p>Some information \u2014 such as IP address and/or browser and device characteristics \u2014 is collected automatically when you visit our Services.</p> <p>We automatically collect certain information when you visit, use, or navigate our Services. This information does not reveal your specific identity (like your name or contact information) but may include device and usage information, such as your IP address, browser and device characteristics, operating system, language preferences, referring URLs, device name, country, location, information about how and when you use our Services, and other technical information. This information is primarily needed to maintain the security and operation of our Services, and for our internal analytics and reporting purposes.</p> <p>Like many businesses, we also collect information through cookies and similar technologies.</p> <p>The information we collect includes:</p> <ul> <li>Identifiers.     Identifier is a device and browser-specific unique random string that we generate when you use our Service.     This identifier is stored in a cookie on your device, allowing us to identify you across multiple sessions and when you return to our Service.     Note that this identifier does not contain any personal information about you, and is device and browser-specific, meaning that it cannot be used to track you across multiple devices or browsers.     You can delete this cookie at any time by clearing your browser\u2019s cache.</li> <li>Log and Usage Data.     Log and usage data is service-related, diagnostic, usage, and performance information our servers automatically collect when you access or use our Services and which we record in log files.     Depending on how you interact with us, this log data may include your IP address, device information, browser type, and settings, and information about your activity in the Services (such as the date/time stamps associated with your usage, pages and files viewed, searches and other actions you take such as which features you use), device event information (such as system activity, error reports (sometimes called \u2018crash dumps\u2019) and hardware settings).</li> <li>Device Data.     We collect device data such as information about your computer, phone, tablet, or other devices you use to access the Services.     Depending on the device used, this device data may include information such as your IP address (or proxy server), device and application identification numbers, location, browser type, hardware model, Internet Service Provider and/or mobile carrier, operating system, and system configuration information.</li> <li>Location Data.     We collect location data such as information about your device\u2019s location, which can be either precise or imprecise.     How much information we collect depends on the type and settings of the device you use to access the Services.     For example, we may use GPS and other technologies to collect geolocation data that tells us your current location (based on your IP address).     You can opt out of allowing us to collect this information either by refusing access to the information or by disabling your location settings on your device.</li> </ul>"},{"location":"about/privacy/#categories-of-personal-information-we-collect","title":"Categories of Personal Information We Collect","text":"<p>We have collected the following categories of personal information in the past twelve (12) months:</p> Category Examples Collected A. Identifiers Contact details, such as real name, alias, postal address, telephone or mobile contact number, unique personal identifier, online identifier, Internet Protocol address, email address, and account name YES B. Personal information as defined in the California Customer Records statute Name, contact information, education, employment, employment history, and financial information NO C. Protected classification characteristics under state or federal law Gender, age, date of birth, race and ethnicity, national origin, marital status, and other demographic data NO D. Commercial information Transaction information, purchase history, financial details, and payment information NO E. Biometric information Fingerprints and voiceprints NO F. Internet or other similar network activity Browsing history, search history, online behaviour, interest data, and interactions with our and other websites, applications, systems, and advertisements YES G. Geolocation data Device location YES H. Audio, electronic, sensory, or similar information Images and audio, video or call recordings created in connection with our business activities NO I. Professional or employment-related information Business contact details in order to provide you our Services at a business level or job title, work history, and professional qualifications if you apply for a job with us NO J. Education Information Student records and directory information NO K. Inferences drawn from collected personal information Inferences drawn from any of the collected personal information listed above to create a profile or summary about, for example, an individual\u2019s preferences and characteristics YES L. Sensitive personal Information NO <p>We may also collect other personal information outside of these categories through instances where you interact with us in person, online, or by phone or mail in the context of:</p> <ul> <li>Receiving help through our customer support channels;</li> <li>Participation in customer surveys or contests; and</li> <li>Facilitation in the delivery of our Services and to respond to your inquiries.</li> </ul> <p>We will use and retain the collected personal information as needed to provide you with our Services and as necessary to comply with our legal obligations, resolve disputes, and enforce our agreement for the following period:</p> <ul> <li>Category A: 24 months</li> <li>Category F: 24 months</li> <li>Category G: 24 months</li> <li>Category K: 24 months</li> </ul>"},{"location":"about/privacy/#2-how-do-we-process-your-information","title":"2. How do we process your information?","text":"<p>In Short</p> <p>We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent.</p> <p>We process your personal information for a variety of reasons, depending on how you interact with our Services, including:</p> <ul> <li>To protect our Services.     We may process your information as part of our efforts to keep our Services safe and secure, including fraud monitoring and prevention.</li> <li>To identify user trends.     We may process information about how you use our Services to better understand how they are being used so we can improve them.</li> <li>To save or protect an individual\u2019s vital interest.     We may process your information when necessary to save or protect an individual\u2019s vital interest, such as to prevent harm.</li> </ul>"},{"location":"about/privacy/#3-what-legal-basis-do-we-have-for-processing-your-information","title":"3. What legal basis do we have for processing your information?","text":"<p>In Short</p> <p>We only process your personal information when we believe it is necessary and we have a valid legal reason (i.e. legal basis) to do so under applicable law, like with your consent, to comply with laws, to provide you with services to enter into or fulfil our contractual obligations, to protect your rights, or to fulfil our legitimate business interests.</p> <p>The General Data Protection Regulation (GDPR) and UK GDPR require us to explain the valid legal bases we rely on in order to process your personal information. As such, we may rely on the following legal bases to process your personal information:</p> <ul> <li>Consent.     We may process your personal information if you have given us specific consent to use your personal information for a specific purpose.     You have the right to withdraw your consent at any time.     Learn more about withdrawing your consents.</li> <li>Legitimate Interests.     We may process your information when we believe it is reasonably necessary to achieve our legitimate business interests and those interests do not outweigh your interests and fundamental rights and freedoms.     For example, we may process your personal information for some of the purposes described in order to:<ul> <li>Analyse how our Services are used so we can improve them to engage and retain users</li> <li>Diagnose problems and/or prevent fraudulent activities</li> </ul> </li> <li>Legal Obligations.     We may process your information where we believe it is necessary for compliance with our legal obligations, such as to cooperate with a law enforcement body or regulatory agency, exercise or defend our legal rights, or disclose your information as evidence in litigation in which we are involved.</li> <li>Vital Interests.     We may process your information where we believe it is necessary to protect your vital interests or the vital interests of a third party, such as situations involving potential threats to the safety of any person.</li> </ul> <p>Consent to Processing in Canada</p> <p>If you are located in Canada, we may be legally permitted under applicable law to process your information without your consent in some exceptional cases, including, for example:</p> <ul> <li>If collection is clearly in the interests of an individual and consent cannot be obtained in a timely way</li> <li>For investigations and fraud detection and prevention</li> <li>For business transactions provided certain conditions are met</li> <li>If it is contained in a witness statement and the collection is necessary to assess, process, or settle an insurance claim</li> <li>For identifying injured, ill, or deceased persons and communicating with next of kin</li> <li>If we have reasonable grounds to believe an individual has been, is, or may be victim of financial abuse</li> <li>If it is reasonable to expect collection and use with consent would compromise the availability or the accuracy of the information and the collection is reasonable for purposes related to investigating a breach of an agreement or a contravention of the laws of Canada or a province</li> <li>If disclosure is required to comply with a subpoena, warrant, court order, or rules of the court relating to the production of records</li> <li>If it was produced by an individual in the course of their employment, business, or profession and the collection is consistent with the purposes for which the information was produced</li> <li>If the collection is solely for journalistic, artistic, or literary purposes</li> <li>If the information is publicly available and is specified by the regulations</li> </ul>"},{"location":"about/privacy/#4-when-and-with-whom-do-we-share-your-personal-information","title":"4. When and with whom do we share your personal information?","text":"<p>In Short</p> <p>We may share information in specific situations described in this section and/or with the following third parties.</p> <p>We may use your personal information for our business purposes, such as for undertaking internal research for technological development and demonstration. This is not considered to be \u2018selling\u2019 of your personal information.</p> <p>Vendors, Consultants, and Other Third-Party Service Providers. We may share your data with third-party vendors, service providers, contractors, or agents (\u2018third parties\u2019) who perform services for us or on our behalf and require access to such information to do that work. We have contracts in place with our third parties, which are designed to help safeguard your personal information. This means that they cannot do anything with your personal information unless we have instructed them to do it. They will also not share your personal information with any organisation apart from us. They also commit to protect the data they hold on our behalf and to retain it for the period we instruct.</p> <p>The third parties we may share personal information with are as follows:</p> <ul> <li>Advertising, Direct Marketing, and Lead Generation<ul> <li>Google AdSense</li> </ul> </li> <li>Cloud Computing Services<ul> <li>Microsoft Azure</li> <li>Amazon Web Services (AWS)</li> <li>Google Cloud Platform (GCP)</li> </ul> </li> <li>Communications and Content Delivery Network (CDN) Services<ul> <li>Cloudflare</li> </ul> </li> <li>Content Optimisation<ul> <li>Google Site Search</li> <li>Google Fonts</li> </ul> </li> <li>Functionality and Infrastructure Optimisation<ul> <li>GitHub Pages</li> </ul> </li> <li>User Commenting and Forums<ul> <li>Disqus</li> <li>GitHub Issues</li> <li>GitHub Discussions</li> </ul> </li> <li>Web and Mobile Analytics<ul> <li>Google Analytics</li> </ul> </li> </ul> <p>We also may need to share your personal information in the following situations:</p> <ul> <li>Business Transfers.     We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.</li> </ul> <p>We have disclosed the following categories of personal information for a business purpose in the past twelve (12) months:</p> <p>Nill</p> <p>The categories of third parties to whom we sold personal information in the past twelve (12) months:</p> <p>Nill</p> <p>The categories of third parties to whom we shared personal information with in the past twelve (12) months:</p> <ul> <li>Web and Mobile Analytics<ul> <li>Google Analytics</li> </ul> </li> </ul>"},{"location":"about/privacy/#5-do-we-use-cookies-and-other-tracking-technologies","title":"5. Do we use cookies and other tracking technologies?","text":"<p>In Short</p> <p>We may use cookies and other tracking technologies to collect and store your information.</p> <p>We also permit third parties and service providers to use online tracking technologies on our Services for analytics and advertising, including to help manage and display advertisements, to tailor advertisements to your interests, or to send abandoned shopping cart reminders (depending on your communication preferences). The third parties and service providers use their technology to provide advertising about products and services tailored to your interests which may appear either on our Services or on other websites.</p> <p>To the extent these online tracking technologies are deemed to be a \u2018sale\u2019/\u2019sharing\u2019 (which includes targeted advertising, as defined under the applicable laws) under applicable US state laws, you can opt out of these online tracking technologies by clicking the button on the top of this page or the button below:</p> <p>Privacy Control</p>"},{"location":"about/privacy/#google-analytics","title":"Google Analytics","text":"<p>We may share your information with Google Analytics to track and analyse the use of the Services. The Google Analytics Advertising Features that we may use include:</p> <ul> <li>Remarketing with Google Analytics</li> <li>Google Display Network Impressions Reporting</li> <li>Google Analytics Demographics and Interests Reporting</li> </ul> <p>To opt out of being tracked by Google Analytics across the Services, visit https://tools.google.com/dlpage/gaoptout. You can opt out of Google Analytics Advertising Features through Ads Settings and Ad Settings for mobile apps.</p> <p>Other opt out means include http://optout.networkadvertising.org/ and http://www.networkadvertising.org/mobile-choice.</p> <p>For more information on the privacy practices of Google, please visit the Google Privacy &amp; Terms.</p>"},{"location":"about/privacy/#6-how-long-do-we-keep-your-information","title":"6. How long do we keep your information?","text":"<p>In Short</p> <p>We keep your information for as long as necessary to fulfil the purposes outlined in this privacy notice unless otherwise required by law.</p> <p>We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements).</p> <p>When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymise it, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.</p>"},{"location":"about/privacy/#7-how-do-we-keep-your-information-safe","title":"7. How do we keep your information safe?","text":"<p>In Short</p> <p>We aim to protect your personal information through a system of organisational and technical security measures.</p> <p>We have implemented appropriate technical and organisational security measures designed to protect the security of any personal information we process. However, despite our safeguards and efforts to secure your information, no electronic transmission over the internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorised third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Although we will do our best to protect your personal information, the transmission of personal information to and from our Services is at your own risk. You should only access the Services within a secure environment.</p>"},{"location":"about/privacy/#8-what-are-your-privacy-rights","title":"8. What are your privacy rights?","text":"<p>In Short</p> <p>We strive to protect your privacy rights and choices to the best possible extent under the law.</p> <p>You have rights under certain data protection laws. However, these rights are not absolute, and in certain cases, we may decline your request as permitted by law. These rights include:</p> <ul> <li>Right to know     whether or not we are processing your personal data</li> <li>Right to access     your personal data</li> <li>Right to correct     inaccuracies in your personal data</li> <li>Right to request     the deletion of your personal data</li> <li>Right to obtain a copy     of the personal data you previously shared with us</li> <li>Right to non-discrimination     against you for exercising your rights</li> <li>Right to opt-out<ul> <li>of the processing of your personal data if it is used for targeted advertising (or sharing as defined under applicable laws), the sale of personal data, or profiling in furtherance of decisions that produce legal or similarly significant effects (\u2018profiling\u2019) concerning you</li> <li>of the collection of sensitive data and personal data collected through the operation of a voice or facial recognition feature</li> </ul> </li> <li>Right to obtain<ul> <li>a list of the categories of third parties to which we have disclosed personal data</li> <li>a list of specific third parties to which we have disclosed personal data</li> </ul> </li> <li>Right to limit     use and disclosure of sensitive personal data</li> </ul>"},{"location":"about/privacy/#how-to-exercise-your-rights","title":"How to exercise your rights","text":"<p>It is very unlikely that you will be able to exercise the above rights as we do not collect any identifiable personal data from you.</p> <p>We are unable to reply to and act on data subject access request as we do not save any identifiable information about you, and we will not be able to verify your identity.</p> <p>If you believe we are unlawfully processing your personal information, you can contact the relevant data protection regulator, state attorney general, or other competent authority in your jurisdiction.</p> Residency Authority European Economic Area Member State\u2019s data protection supervisory authority United Kingdom Information Commissioner\u2019s Office Australia Office of the Australian Information Commissioner New Zealand Office of New Zealand Privacy Commissioner Canada Office of the Privacy Commissioner of Canada California of the United States California Privacy Protection Agency Switzerland Federal Data Protection and Information Commissioner South Africa Information Regulator"},{"location":"about/privacy/#withdraw-your-consent","title":"Withdraw your consent","text":"<p>If we are relying on your consent to process your personal information, which may be express and/or implied consent depending on the applicable law, you have the right to withdraw your consent at any time. You can withdraw your consent at any time by clicking the button on the top of this page or the button below:</p> <p>Privacy Control</p> <p>However, please note that this will not affect the lawfulness of the processing before its withdrawal nor, when applicable law allows, will it affect the processing of your personal information conducted in reliance on lawful processing grounds other than consent.</p>"},{"location":"about/privacy/#cookies-and-similar-technologies","title":"Cookies and similar technologies","text":"<p>Most web browsers are set to accept cookies by default. If you prefer, you can usually choose to set your browser to remove or reject browser cookies. Please note that if you choose to remove or reject cookies, this will NOT affect the availability and functionality of our Services.</p>"},{"location":"about/privacy/#9-controls-for-do-not-track-features","title":"9. Controls for Do-Not-Track features","text":"<p>Most web browsers and some mobile operating systems and mobile applications include a Do-Not-Track (\u2018DNT\u2019) feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. At this stage, no uniform technology standard for recognising and implementing DNT signals has been finalised. Although we cannot promise to honour every DNT signal, we strive to honour all such requests where technically feasible.</p> <p>California law requires us to let you know how we respond to web browser DNT signals. Because we cannot guarantee to recognise and houour all DNT signals, we do not respond to them at this time.</p>"},{"location":"about/privacy/#10-do-residents-in-certain-jurisdiction-have-specific-privacy-rights","title":"10. Do residents in certain jurisdiction have specific privacy rights?","text":"<p>NO.</p> <p>All men and women are created equal.</p> <p>We provide the same privacy rights to all individuals, regardless of their location.</p> <p>Be assured that we will treat you with the same respect and dignity as we would want to be treated.</p>"},{"location":"about/privacy/#11-how-can-you-review-update-or-delete-the-data-we-collect-from-you","title":"11. How can you review, update, or delete the data we collect from you?","text":"<p>It is very unlikely that you will be able to review, update, or delete the data we collect from you as we do not collect any identifiable personal data from you, and we will not be able to identify which data belongs to you.</p>"},{"location":"about/privacy/#12-do-we-make-updates-to-this-notice","title":"12. Do we make updates to this notice?","text":"<p>In Short</p> <p>Yes, we will update this notice as necessary to stay compliant with relevant laws.</p> <p>We may update this privacy notice from time to time. The updated version will be indicated by an updated \u2018Last Revised Date\u2019 at the top of this privacy notice. If we make any material changes, we will notify you by posting the new privacy notice on this page. We are unable to notify you directly as we do not collect any contact information from you. We encourage you to review this privacy notice frequently to stay informed of how we are protecting your information.</p>"},{"location":"models/","title":"models","text":"<p><code>models</code> provide a collection of pre-trained models.</p>"},{"location":"models/#model-class","title":"Model Class","text":"<p>In the  <code>transformers</code> library, the names of model classes can sometimes be misleading. While these classes support both regression and classification tasks, their names often include <code>xxxForSequenceClassification</code>, which may imply they are only for classification.</p> <p>To avoid this ambiguity, MultiMolecule provides a set of model classes with clear, intuitive names that reflect their intended use:</p> <ul> <li><code>multimolecule.AutoModelForContactPrediction</code>: Contact Prediction</li> <li><code>multimolecule.AutoModelForNucleotidePrediction</code>: Nucleotide Prediction</li> <li><code>multimolecule.AutoModelForSequencePrediction</code>: Sequence Prediction</li> <li><code>multimolecule.AutoModelForTokenPrediction</code>: Token Prediction</li> </ul> <p>Each of these models supports both regression and classification tasks, offering flexibility and precision for a wide range of applications.</p>"},{"location":"models/#contact-prediction","title":"Contact Prediction","text":"<p>Contact prediction assign a label to each pair of token in a sentence. One of the most common contact prediction tasks is protein distance map prediction. Protein distance map prediction attempts to find the distance between all possible amino acid residue pairs of a three-dimensional protein structure</p>"},{"location":"models/#nucleotide-prediction","title":"Nucleotide Prediction","text":"<p>Similar to Token Classification, but removes the <code>&lt;bos&gt;</code> token and the <code>&lt;eos&gt;</code> token if they are defined in the model config.</p> <p><code>&lt;bos&gt;</code> and <code>&lt;eos&gt;</code> tokens</p> <p>In tokenizers provided by MultiMolecule, <code>&lt;bos&gt;</code> token is pointed to <code>&lt;cls&gt;</code> token, and <code>&lt;sep&gt;</code> token is pointed to <code>&lt;eos&gt;</code> token.</p>"},{"location":"models/#usage","title":"Usage","text":""},{"location":"models/#build-with-multimoleculeautomodels","title":"Build with <code>multimolecule.AutoModel</code>s","text":"Python<pre><code>from transformers import AutoTokenizer\n\nfrom multimolecule import AutoModelForSequencePrediction\n\nmodel = AutoModelForSequencePrediction.from_pretrained(\"multimolecule/rnafm\")\ntokenizer = AutoTokenizer.from_pretrained(\"multimolecule/rnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"models/#direct-access","title":"Direct Access","text":"<p>All models can be directly loaded with the <code>from_pretrained</code> method.</p> Python<pre><code>from multimolecule.models import RnaFmForNucleotidePrediction, RnaTokenizer\n\nmodel = RnaFmForNucleotidePrediction.from_pretrained(\"multimolecule/rnafm\")\ntokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"models/#build-with-transformersautomodels","title":"Build with <code>transformers.AutoModel</code>s","text":"<p>While we use a different naming convention for model classes, the models are still registered to corresponding <code>transformers.AutoModel</code>s.</p> Python<pre><code>from transformers import AutoModelForSequenceClassification, AutoTokenizer\n\nimport multimolecule  # noqa: F401\n\nmodel = AutoModelForSequenceClassification.from_pretrained(\"multimolecule/mrnafm\")\ntokenizer = AutoTokenizer.from_pretrained(\"multimolecule/mrnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre> <p><code>import multimolecule</code> before use</p> <p>Note that you must <code>import multimolecule</code> before building the model using <code>transformers.AutoModel</code>. The registration of models is done in the <code>multimolecule</code> package, and the models are not available in the <code>transformers</code> package.</p> <p>The following error will be raised if you do not <code>import multimolecule</code> before using <code>transformers.AutoModel</code>:</p> Python<pre><code>ValueError: The checkpoint you are trying to load has model type `rnafm` but Transformers does not recognize this architecture. This could be because of an issue with the checkpoint, or because your version of Transformers is out of date.\n</code></pre>"},{"location":"models/#initialize-a-vanilla-model","title":"Initialize a vanilla model","text":"<p>You can also initialize a vanilla model using the model class.</p> Python<pre><code>from multimolecule.models import RnaFmConfig, RnaFmForNucleotidePrediction, RnaTokenizer\n\nconfig = RnaFmConfig()\nmodel = RnaFmForNucleotidePrediction(config)\ntokenizer = RnaTokenizer()\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"models/#available-models","title":"Available Models","text":""},{"location":"models/#deoxyribonucleic-acid-dna","title":"DeoxyriboNucleic Acid (DNA)","text":"<ul> <li>CaLM</li> </ul>"},{"location":"models/#ribonucleic-acid-rna","title":"RiboNucleic Acid (RNA)","text":"<ul> <li>ERNIE-RNA</li> <li>RiNALMo</li> <li>RNABERT</li> <li>RNAErnie</li> <li>RNA-FM</li> <li>RNA-MSM</li> <li>SpliceBERT</li> <li>3UTRBERT</li> <li>UTR-LM</li> </ul>"},{"location":"models/calm/","title":"CaLM","text":"<p>Pre-trained model on protein-coding DNA (cDNA) using a masked language modeling (MLM) objective.</p>"},{"location":"models/calm/#statement","title":"Statement","text":"<p>Codon language embeddings provide strong signals for use in protein engineering is published in Nature Machine Intelligence, which is a Closed Access / Author-Fee journal.</p> <p>Machine learning has been at the forefront of the movement for free and open access to research.</p> <p>We see no role for closed access or author-fee publication in the future of machine learning research and believe the adoption of these journals as an outlet of record for the machine learning community would be a retrograde step.</p> <p>The MultiMolecule team is committed to the principles of open access and open science.</p> <p>We do NOT endorse the publication of manuscripts in Closed Access / Author-Fee journals and encourage the community to support Open Access journals and conferences.</p> <p>Please consider signing the Statement on Nature Machine Intelligence.</p>"},{"location":"models/calm/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Codon language embeddings provide strong signals for use in protein engineering by Carlos Outeiral and Charlotte M. Deane.</p> <p>The OFFICIAL repository of CaLM is at oxpig/CaLM.</p> <p>Warning</p> <p>The MultiMolecule team is unable to confirm that the provided model and checkpoints are producing the same intermediate representations as the original implementation. This is because</p> <p>The proposed method is published in a Closed Access / Author-Fee journal.</p> <p>The team releasing CaLM did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/calm/#model-details","title":"Model Details","text":"<p>CaLM is a bert-style model pre-trained on a large corpus of protein-coding DNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of DNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/calm/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 12 768 12 3072 85.75 22.36 11.17 1024"},{"location":"models/calm/#links","title":"Links","text":"<ul> <li>Code: multimolecule.calm</li> <li>Weights: multimolecule/calm</li> <li>Data: European Nucleotide Archive</li> <li>Paper: Codon language embeddings provide strong signals for use in protein engineering</li> <li>Developed by: Carlos Outeiral, Charlotte M. Deane</li> <li>Model type: BERT - ESM</li> <li>Original Repository: https://github.com/oxpig/CaLM</li> </ul>"},{"location":"models/calm/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/calm/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/calm')\n&gt;&gt;&gt; unmasker(\"ctg&lt;mask&gt;aagcggcccacgcggactgacgggcggggg\")\n\n[{'score': 0.010724939405918121,\n  'token': 73,\n  'token_str': 'GUG',\n  'sequence': 'CUG GUG AAG CGG CCC ACG CGG ACU GAC GGG CGG GGG'},\n {'score': 0.010476444847881794,\n  'token': 77,\n  'token_str': 'GNC',\n  'sequence': 'CUG GNC AAG CGG CCC ACG CGG ACU GAC GGG CGG GGG'},\n {'score': 0.010415051132440567,\n  'token': 22,\n  'token_str': 'AUC',\n  'sequence': 'CUG AUC AAG CGG CCC ACG CGG ACU GAC GGG CGG GGG'},\n {'score': 0.010389575734734535,\n  'token': 68,\n  'token_str': 'GGG',\n  'sequence': 'CUG GGG AAG CGG CCC ACG CGG ACU GAC GGG CGG GGG'},\n {'score': 0.01017767284065485,\n  'token': 9,\n  'token_str': 'AAU',\n  'sequence': 'CUG AAU AAG CGG CCC ACG CGG ACU GAC GGG CGG GGG'}]\n</code></pre>"},{"location":"models/calm/#downstream-use","title":"Downstream Use","text":""},{"location":"models/calm/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, CaLmModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/calm')\nmodel = CaLmModel.from_pretrained('multimolecule/calm')\n\ntext = \"GCCAGTCGCTGACAGCCGCGG\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/calm/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, CaLmForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/calm')\nmodel = CaLmForSequencePrediction.from_pretrained('multimolecule/calm')\n\ntext = \"GCCAGTCGCTGACAGCCGCGG\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/calm/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, CaLmForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/calm')\nmodel = CaLmForNucleotidePrediction.from_pretrained('multimolecule/calm')\n\ntext = \"GCCAGTCGCTGACAGCCGCGG\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/calm/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, CaLmForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/calm')\nmodel = CaLmForContactPrediction.from_pretrained('multimolecule/calm')\n\ntext = \"GCCAGTCGCTGACAGCCGCGG\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/calm/#training-details","title":"Training Details","text":"<p>CaLM used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 25% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/calm/#training-data","title":"Training Data","text":"<p>The CaLM model was pre-trained coding sequences of all organisms available on the European Nucleotide Archive (ENA). European Nucleotide Archive provides a comprehensive record of the world\u2019s nucleotide sequencing information, covering raw sequencing data, sequence assembly information and functional annotation.</p> <p>CaLM collected coding sequences of all organisms from ENA on April 2022, including 114,214,475 sequences. Only high level assembly information (dataclass CON) were used. Sequences matching the following criteria were filtered out:</p> <ul> <li>with unknown nucleotides (<code>N</code>, <code>Y</code>, <code>R</code>)</li> <li>start codon is not <code>ATG</code></li> <li>contains interstitial stop codons</li> <li>number of nucleotides is not a multiple of three</li> </ul> <p>To reduce redundancy, CaLM grouped the entries by organism, and apply CD-HIT (CD-HIT-EST) with a cut-off at 40% sequence identity to the translated protein sequences.</p> <p>The final dataset contains 9,858,385 cDNA sequences.</p> <p>Note that the alphabet in the original implementation is RNA instead of DNA, therefore, we use <code>RnaTokenizer</code> to tokenize the sequences. <code>RnaTokenizer</code> of <code>multimolecule</code> will convert \u201cU\u201ds to \u201cT\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/calm/#training-procedure","title":"Training Procedure","text":""},{"location":"models/calm/#preprocessing","title":"Preprocessing","text":"<p>CaLM used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>25% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/calm/#pretraining","title":"PreTraining","text":"<p>The model was trained on 4 NVIDIA Quadro RTX4000 GPUs with 8GiB memories.</p> <ul> <li>Learning rate: 1e-4</li> <li>Optimizer: AdamW</li> <li>Learning rate scheduler: cosine</li> <li>Learning rate warm-up: 1,000 steps</li> <li>Epochs: 14</li> <li>Batch Size: 1,000</li> </ul>"},{"location":"models/calm/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article {outeiral2022coodn,\n    author = {Outeiral, Carlos and Deane, Charlotte M.},\n    title = {Codon language embeddings provide strong signals for protein engineering},\n    elocation-id = {2022.12.15.519894},\n    year = {2022},\n    doi = {10.1101/2022.12.15.519894},\n    publisher = {Cold Spring Harbor Laboratory},\n    abstract = {Protein representations from deep language models have yielded state-of-the-art performance across many tasks in computational protein engineering. In recent years, progress has primarily focused on parameter count, with recent models{\\textquoteright} capacities surpassing the size of the very datasets they were trained on. Here, we propose an alternative direction. We show that large language models trained on codons, instead of amino acid sequences, provide high-quality representations that outperform comparable state-of-the-art models across a variety of tasks. In some tasks, like species recognition, prediction of protein and transcript abundance, or melting point estimation, we show that a language model trained on codons outperforms every other published protein language model, including some that contain over 50 times more parameters. These results suggest that, in addition to commonly studied scale and model complexity, the information content of biological data provides an orthogonal direction to improve the power of machine learning in biology.Competing Interest StatementThe authors have declared no competing interest.},\n    URL = {https://www.biorxiv.org/content/early/2022/12/19/2022.12.15.519894},\n    eprint = {https://www.biorxiv.org/content/early/2022/12/19/2022.12.15.519894.full.pdf},\n    journal = {bioRxiv}\n}\n</code></pre>"},{"location":"models/calm/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the CaLM paper for questions or comments on the paper/model.</p>"},{"location":"models/calm/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm","title":"multimolecule.models.calm","text":""},{"location":"models/calm/#multimolecule.models.calm.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmConfig","title":"CaLmConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>CaLmModel</code>. It is used to instantiate a CaLM model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the CaLM oxpig/CaLM architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the CaLM model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>CaLmModel</code>].</p> <code>131</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>768</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>12</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>3072</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1026</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>position_embedding_type</code> <code>str</code> <p>Type of position embedding. Choose one of <code>\"absolute\"</code>, <code>\"relative_key\"</code>, <code>\"relative_key_query\", \"rotary\"</code>. For positional embeddings use <code>\"absolute\"</code>. For more information on <code>\"relative_key\"</code>, please refer to Self-Attention with Relative Position Representations (Shaw et al.). For more information on <code>\"relative_key_query\"</code>, please refer to Method 4 in Improve Transformer Models with Better Relative Position Embeddings (Huang et al.).</p> <code>'rotary'</code> <code>is_decoder</code> <code>bool</code> <p>Whether the model is used as a decoder or not. If <code>False</code>, the model is used as an encoder.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if <code>config.is_decoder=True</code>.</p> <code>True</code> <code>emb_layer_norm_before</code> <code>bool</code> <p>Whether to apply layer normalization after embeddings but before the main stem of the network.</p> <code>False</code> <code>token_dropout</code> <code>bool</code> <p>When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.</p> <code>False</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmModel, CaLmConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a CaLM multimolecule/calm style configuration\n&gt;&gt;&gt; configuration = CaLmConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/calm style configuration\n&gt;&gt;&gt; model = CaLmModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/calm/configuration_calm.py</code> Python<pre><code>class CaLmConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`CaLmModel`][multimolecule.models.CaLmModel]. It\n    is used to instantiate a CaLM model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the CaLM\n    [oxpig/CaLM](https://github.com/oxpig/CaLM) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the CaLM model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`CaLmModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        position_embedding_type:\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\", \"rotary\"`.\n            For positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        is_decoder:\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache:\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        emb_layer_norm_before:\n            Whether to apply layer normalization after embeddings but before the main stem of the network.\n        token_dropout:\n            When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmModel, CaLmConfig\n\n        &gt;&gt;&gt; # Initializing a CaLM multimolecule/calm style configuration\n        &gt;&gt;&gt; configuration = CaLmConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/calm style configuration\n        &gt;&gt;&gt; model = CaLmModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"calm\"\n\n    def __init__(\n        self,\n        vocab_size: int = 131,\n        codon: bool = True,\n        hidden_size: int = 768,\n        num_hidden_layers: int = 12,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 3072,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1026,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"rotary\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        emb_layer_norm_before: bool = False,\n        token_dropout: bool = False,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.codon = codon\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.emb_layer_norm_before = emb_layer_norm_before\n        self.token_dropout = token_dropout\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmForContactPrediction","title":"CaLmForContactPrediction","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmForContactPrediction(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: CaLmConfig):\n        super().__init__(config)\n        self.calm = CaLmModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.calm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmForMaskedLM","title":"CaLmForMaskedLM","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 131])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmForMaskedLM(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 131])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: CaLmConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `CaLmForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.calm = CaLmModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config, self.calm.embeddings.word_embeddings.weight)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.calm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmForNucleotidePrediction","title":"CaLmForNucleotidePrediction","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmForNucleotidePrediction(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: CaLmConfig):\n        super().__init__(config)\n        self.calm = CaLmModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.calm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmForSequencePrediction","title":"CaLmForSequencePrediction","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmForSequencePrediction(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: CaLmConfig):\n        super().__init__(config)\n        self.calm = CaLmModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.calm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmForTokenPrediction","title":"CaLmForTokenPrediction","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmForTokenPrediction(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: CaLmConfig):\n        super().__init__(config)\n        self.calm = CaLmModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.calm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmModel","title":"CaLmModel","text":"<p>               Bases: <code>CaLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmModel, RnaTokenizer\n&gt;&gt;&gt; config = CaLmConfig()\n&gt;&gt;&gt; model = CaLmModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 768])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 768])\n</code></pre> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmModel(CaLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import CaLmConfig, CaLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = CaLmConfig()\n        &gt;&gt;&gt; model = CaLmModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 768])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 768])\n    \"\"\"\n\n    def __init__(self, config: CaLmConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = CaLmEmbeddings(config)\n        self.encoder = CaLmEncoder(config)\n        self.pooler = CaLmPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        attention_mask=attention_mask,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/calm/#multimolecule.models.calm.CaLmPreTrainedModel","title":"CaLmPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/calm/modeling_calm.py</code> Python<pre><code>class CaLmPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = CaLmConfig\n    base_model_prefix = \"calm\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"CaLmLayer\", \"CaLmEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/configuration_utils/","title":"configuration_utils","text":""},{"location":"models/configuration_utils/#multimolecule.models.configuration_utils","title":"multimolecule.models.configuration_utils","text":""},{"location":"models/configuration_utils/#multimolecule.models.configuration_utils.HeadConfig","title":"HeadConfig  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHeadConfig</code></p> <p>Configuration class for a prediction head.</p> <p>Parameters:</p> Name Type Description Default <code>num_labels</code> <code>int</code> <p>Number of labels to use in the last layer added to the model, typically for a classification task.</p> <p>Head should look for <code>Config.num_labels</code> if is <code>None</code>.</p> <code>None</code> <code>problem_type</code> <code>str</code> <p>Problem type for <code>XxxForYyyPrediction</code> models. Can be one of <code>\"regression\"</code>, <code>\"single_label_classification\"</code> or <code>\"multi_label_classification\"</code>.</p> <p>Head should look for <code>Config.problem_type</code> if is <code>None</code>.</p> <code>None</code> <code>hidden_size</code> <code>int | None</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <p>Head should look for <code>Config.hidden_size</code> if is <code>None</code>.</p> <code>None</code> <code>dropout</code> <code>float</code> <p>The dropout ratio for the hidden states.</p> <code>0.0</code> <code>transform</code> <code>str | None</code> <p>The transform operation applied to hidden states.</p> <code>None</code> <code>transform_act</code> <code>str | None</code> <p>The activation function of transform applied to hidden states.</p> <code>'gelu'</code> <code>bias</code> <code>bool</code> <p>Whether to apply bias to the final prediction layer.</p> <code>True</code> <code>act</code> <code>str | None</code> <p>The activation function of the final prediction output.</p> <code>None</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>output_name</code> <code>`str`, *optional*</code> <p>The name of the tensor required in model outputs.</p> <p>If is <code>None</code>, will use the default output name of the corresponding head.</p> <code>None</code> Source code in <code>multimolecule/module/heads/config.py</code> Python<pre><code>@dataclass\nclass HeadConfig(BaseHeadConfig):\n    r\"\"\"\n    Configuration class for a prediction head.\n\n    Args:\n        num_labels:\n            Number of labels to use in the last layer added to the model, typically for a classification task.\n\n            Head should look for [`Config.num_labels`][multimolecule.PreTrainedConfig] if is `None`.\n        problem_type:\n            Problem type for `XxxForYyyPrediction` models. Can be one of `\"regression\"`,\n            `\"single_label_classification\"` or `\"multi_label_classification\"`.\n\n            Head should look for [`Config.problem_type`][multimolecule.PreTrainedConfig] if is `None`.\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n\n            Head should look for [`Config.hidden_size`][multimolecule.PreTrainedConfig] if is `None`.\n        dropout:\n            The dropout ratio for the hidden states.\n        transform:\n            The transform operation applied to hidden states.\n        transform_act:\n            The activation function of transform applied to hidden states.\n        bias:\n            Whether to apply bias to the final prediction layer.\n        act:\n            The activation function of the final prediction output.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        output_name (`str`, *optional*):\n            The name of the tensor required in model outputs.\n\n            If is `None`, will use the default output name of the corresponding head.\n    \"\"\"\n\n    num_labels: int = None  # type: ignore[assignment]\n    problem_type: str = None  # type: ignore[assignment]\n    hidden_size: int | None = None\n    dropout: float = 0.0\n    transform: str | None = None\n    transform_act: str | None = \"gelu\"\n    bias: bool = True\n    act: str | None = None\n    layer_norm_eps: float = 1e-12\n    output_name: str | None = None\n</code></pre>"},{"location":"models/configuration_utils/#multimolecule.models.configuration_utils.MaskedLMHeadConfig","title":"MaskedLMHeadConfig  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHeadConfig</code></p> <p>Configuration class for a Masked Language Modeling head.</p> <p>Parameters:</p> Name Type Description Default <code>hidden_size</code> <code>int | None</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <p>Head should look for <code>Config.hidden_size</code> if is <code>None</code>.</p> <code>None</code> <code>dropout</code> <code>float</code> <p>The dropout ratio for the hidden states.</p> <code>0.0</code> <code>transform</code> <code>str | None</code> <p>The transform operation applied to hidden states.</p> <code>'nonlinear'</code> <code>transform_act</code> <code>str | None</code> <p>The activation function of transform applied to hidden states.</p> <code>'gelu'</code> <code>bias</code> <code>bool</code> <p>Whether to apply bias to the final prediction layer.</p> <code>True</code> <code>act</code> <code>str | None</code> <p>The activation function of the final prediction output.</p> <code>None</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>output_name</code> <code>`str`, *optional*</code> <p>The name of the tensor required in model outputs.</p> <p>If is <code>None</code>, will use the default output name of the corresponding head.</p> <code>None</code> Source code in <code>multimolecule/module/heads/config.py</code> Python<pre><code>@dataclass\nclass MaskedLMHeadConfig(BaseHeadConfig):\n    r\"\"\"\n    Configuration class for a Masked Language Modeling head.\n\n    Args:\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n\n            Head should look for [`Config.hidden_size`][multimolecule.PreTrainedConfig] if is `None`.\n        dropout:\n            The dropout ratio for the hidden states.\n        transform:\n            The transform operation applied to hidden states.\n        transform_act:\n            The activation function of transform applied to hidden states.\n        bias:\n            Whether to apply bias to the final prediction layer.\n        act:\n            The activation function of the final prediction output.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        output_name (`str`, *optional*):\n            The name of the tensor required in model outputs.\n\n            If is `None`, will use the default output name of the corresponding head.\n    \"\"\"\n\n    hidden_size: int | None = None\n    dropout: float = 0.0\n    transform: str | None = \"nonlinear\"\n    transform_act: str | None = \"gelu\"\n    bias: bool = True\n    act: str | None = None\n    layer_norm_eps: float = 1e-12\n    output_name: str | None = None\n</code></pre>"},{"location":"models/configuration_utils/#multimolecule.models.configuration_utils.PreTrainedConfig","title":"PreTrainedConfig","text":"<p>               Bases: <code>PretrainedConfig</code></p> <p>Base class for all model configuration classes.</p> Source code in <code>multimolecule/models/configuration_utils.py</code> Python<pre><code>class PreTrainedConfig(PretrainedConfig):\n    r\"\"\"\n    Base class for all model configuration classes.\n    \"\"\"\n\n    head: HeadConfig\n\n    hidden_size: int\n\n    pad_token_id: int = 0\n    bos_token_id: int = 1\n    eos_token_id: int = 2\n    unk_token_id: int = 3\n    mask_token_id: int = 4\n    null_token_id: int = 5\n\n    def __init__(\n        self, pad_token_id=0, bos_token_id=1, eos_token_id=2, unk_token_id=3, mask_token_id=4, null_token_id=5, **kwargs\n    ):\n        super().__init__(\n            pad_token_id=pad_token_id,\n            bos_token_id=bos_token_id,\n            eos_token_id=eos_token_id,\n            unk_token_id=unk_token_id,\n            mask_token_id=mask_token_id,\n            null_token_id=null_token_id,\n            **kwargs,\n        )\n\n    def to_dict(self):\n        output = super().to_dict()\n        for k, v in output.items():\n            if hasattr(v, \"to_dict\"):\n                output[k] = v.to_dict()\n            if is_dataclass(v):\n                output[k] = asdict(v)\n        return output\n</code></pre>"},{"location":"models/ernierna/","title":"ERNIE-RNA","text":"<p>Pre-trained model on non-coding RNA (ncRNA) using a masked language modeling (MLM) objective.</p>"},{"location":"models/ernierna/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the ERNIE-RNA: An RNA Language Model with Structure-enhanced Representations by Weijie Yin, Zhaoyu Zhang, Liang He, et al.</p> <p>The OFFICIAL repository of ERNIE-RNA is at Bruce-ywj/ERNIE-RNA.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing ERNIE-RNA did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/ernierna/#model-details","title":"Model Details","text":"<p>ERNIE-RNA is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/ernierna/#variations","title":"Variations","text":"<ul> <li><code>multimolecule/ernierna</code>: The ERNIE-RNA model pre-trained on non-coding RNA sequences.</li> <li><code>multimolecule/ernierna.ss</code>: The ERNIE-RNA model fine-tuned on RNA secondary structure prediction.</li> </ul>"},{"location":"models/ernierna/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 12 768 12 3072 85.67 22.36 11.17 1024"},{"location":"models/ernierna/#links","title":"Links","text":"<ul> <li>Code: multimolecule.ernierna</li> <li>Data: RNAcentral</li> <li>Paper: ERNIE-RNA: An RNA Language Model with Structure-enhanced Representations</li> <li>Developed by: Weijie Yin, Zhaoyu Zhang, Liang He, Rui Jiang, Shuo Zhang, Gan Liu, Xuegong Zhang, Tao Qin, Zhen Xie</li> <li>Model type: BERT - ERNIE</li> <li>Original Repository: https://github.com/Bruce-ywj/ERNIE-RNA</li> </ul>"},{"location":"models/ernierna/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/ernierna/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/ernierna')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.2190508395433426,\n  'token': 9,\n  'token_str': 'U',\n  'sequence': 'U A G C U U A U C A G A C U G A U G U U G A'},\n {'score': 0.20297053456306458,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.18235529959201813,\n  'token': 7,\n  'token_str': 'C',\n  'sequence': 'U A G C C U A U C A G A C U G A U G U U G A'},\n {'score': 0.1304803192615509,\n  'token': 25,\n  'token_str': '-',\n  'sequence': 'U A G C - U A U C A G A C U G A U G U U G A'},\n {'score': 0.107626773416996,\n  'token': 8,\n  'token_str': 'G',\n  'sequence': 'U A G C G U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/ernierna/#downstream-use","title":"Downstream Use","text":""},{"location":"models/ernierna/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, ErnieRnaModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/ernierna')\nmodel = ErnieRnaModel.from_pretrained('multimolecule/ernierna')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/ernierna/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, ErnieRnaForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/ernierna')\nmodel = ErnieRnaForSequencePrediction.from_pretrained('multimolecule/ernierna')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/ernierna/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, ErnieRnaForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/ernierna')\nmodel = ErnieRnaForNucleotidePrediction.from_pretrained('multimolecule/ernierna')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/ernierna/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, ErnieRnaForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/ernierna')\nmodel = ErnieRnaForContactPrediction.from_pretrained('multimolecule/ernierna')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/ernierna/#training-details","title":"Training Details","text":"<p>ERNIE-RNA used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/ernierna/#training-data","title":"Training Data","text":"<p>The ERNIE-RNA model was pre-trained on RNAcentral. RNAcentral is a comprehensive database of non-coding RNA sequences from a wide range of species. It combines 47 different databases, adding up to around 34 million RNA sequences in total.</p> <p>ERNIE-RNA applied CD-HIT (CD-HIT-EST) with a cut-off at 100% sequence identity to remove redundancy from the RNAcentral, resulting 25 million unique sequences. Sequences longer than 1024 nucleotides were subsequently excluded. The final dataset contains 20.4 million non-redundant RNA sequences. ERNIE-RNA preprocessed all tokens by replacing \u201cT\u201ds with \u201cS\u201ds.</p> <p>Note that <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/ernierna/#training-procedure","title":"Training Procedure","text":""},{"location":"models/ernierna/#preprocessing","title":"Preprocessing","text":"<p>ERNIE-RNA used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/ernierna/#pretraining","title":"PreTraining","text":"<p>The model was trained on 24 NVIDIA V100 GPUs with 32GiB memories.</p> <ul> <li>Learning rate: 1e-4</li> <li>Weight decay: 0.01</li> <li>Learning rate warm-up: 20,000 steps</li> </ul>"},{"location":"models/ernierna/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article {Yin2024.03.17.585376,\n    author = {Yin, Weijie and Zhang, Zhaoyu and He, Liang and Jiang, Rui and Zhang, Shuo and Liu, Gan and Zhang, Xuegong and Qin, Tao and Xie, Zhen},\n    title = {ERNIE-RNA: An RNA Language Model with Structure-enhanced Representations},\n    elocation-id = {2024.03.17.585376},\n    year = {2024},\n    doi = {10.1101/2024.03.17.585376},\n    publisher = {Cold Spring Harbor Laboratory},\n    abstract = {With large amounts of unlabeled RNA sequences data produced by high-throughput sequencing technologies, pre-trained RNA language models have been developed to estimate semantic space of RNA molecules, which facilities the understanding of grammar of RNA language. However, existing RNA language models overlook the impact of structure when modeling the RNA semantic space, resulting in incomplete feature extraction and suboptimal performance across various downstream tasks. In this study, we developed a RNA pre-trained language model named ERNIE-RNA (Enhanced Representations with base-pairing restriction for RNA modeling) based on a modified BERT (Bidirectional Encoder Representations from Transformers) by incorporating base-pairing restriction with no MSA (Multiple Sequence Alignment) information. We found that the attention maps from ERNIE-RNA with no fine-tuning are able to capture RNA structure in the zero-shot experiment more precisely than conventional methods such as fine-tuned RNAfold and RNAstructure, suggesting that the ERNIE-RNA can provide comprehensive RNA structural representations. Furthermore, ERNIE-RNA achieved SOTA (state-of-the-art) performance after fine-tuning for various downstream tasks, including RNA structural and functional predictions. In summary, our ERNIE-RNA model provides general features which can be widely and effectively applied in various subsequent research tasks. Our results indicate that introducing key knowledge-based prior information in the BERT framework may be a useful strategy to enhance the performance of other language models.Competing Interest StatementOne patent based on the study was submitted by Z.X. and W.Y., which is entitled as \"A Pre-training Approach for RNA Sequences and Its Applications\"(application number, no 202410262527.5). The remaining authors declare no competing interests.},\n    URL = {https://www.biorxiv.org/content/early/2024/03/17/2024.03.17.585376},\n    eprint = {https://www.biorxiv.org/content/early/2024/03/17/2024.03.17.585376.full.pdf},\n    journal = {bioRxiv}\n}\n</code></pre>"},{"location":"models/ernierna/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the ERNIE-RNA paper for questions or comments on the paper/model.</p>"},{"location":"models/ernierna/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna","title":"multimolecule.models.ernierna","text":""},{"location":"models/ernierna/#multimolecule.models.ernierna.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaConfig","title":"ErnieRnaConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>ErnieRnaModel</code>. It is used to instantiate a ErnieRna model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the ErnieRna Bruce-ywj/ERNIE-RNA architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the ErnieRna model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>ErnieRnaModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>768</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>12</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>3072</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1026</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaModel, ErnieRnaConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a ERNIE-RNA multimolecule/ernierna style configuration\n&gt;&gt;&gt; configuration = ErnieRnaConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/ernierna style configuration\n&gt;&gt;&gt; model = ErnieRnaModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/ernierna/configuration_ernierna.py</code> Python<pre><code>class ErnieRnaConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a\n    [`ErnieRnaModel`][multimolecule.models.ErnieRnaModel]. It is used to instantiate a ErnieRna model according to the\n    specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a\n    similar configuration to that of the ErnieRna [Bruce-ywj/ERNIE-RNA](https://github.com/Bruce-ywj/ERNIE-RNA)\n    architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the ErnieRna model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`ErnieRnaModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaModel, ErnieRnaConfig\n\n        &gt;&gt;&gt; # Initializing a ERNIE-RNA multimolecule/ernierna style configuration\n        &gt;&gt;&gt; configuration = ErnieRnaConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/ernierna style configuration\n        &gt;&gt;&gt; model = ErnieRnaModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"ernierna\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 768,\n        num_hidden_layers: int = 12,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 3072,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1026,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"sinusoidal\",\n        pairwise_alpha: float = 0.8,\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.type_vocab_size = 2\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.pairwise_alpha = pairwise_alpha\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForContactClassification","title":"ErnieRnaForContactClassification","text":"<p>               Bases: <code>ErnieRnaForPreTraining</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule.models import ErnieRnaConfig, ErnieRnaForContactClassification, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForContactClassification(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForContactClassification(ErnieRnaForPreTraining):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule.models import ErnieRnaConfig, ErnieRnaForContactClassification, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForContactClassification(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n    \"\"\"\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        self.ss_head = ErnieRnaContactClassificationHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(  # type: ignore[override]  # pylint: disable=W0221\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels_lm: Tensor | None = None,\n        labels_ss: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaForContactClassificationOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output_lm = self.lm_head(outputs, labels_lm)\n        output_ss = self.ss_head(outputs[-1][-1], attention_mask, input_ids, labels_ss)\n        logits_lm, loss_lm = output_lm.logits, output_lm.loss\n        logits_ss, loss_ss = output_ss.logits, output_ss.loss\n\n        loss = None\n        if loss_lm is not None and loss_ss is not None:\n            loss = loss_lm + loss_ss\n        elif loss_lm is not None:\n            loss = loss_lm\n        elif loss_ss is not None:\n            loss = loss_ss\n\n        if not return_dict:\n            output = outputs[2:]\n            output = ((logits_ss, loss_ss) + output) if loss_ss is not None else ((logits_ss,) + output)\n            output = ((logits_lm, loss_lm) + output) if loss_lm is not None else ((logits_lm,) + output)\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaForContactClassificationOutput(\n            loss=loss,\n            logits_lm=logits_lm,\n            loss_lm=loss_lm,\n            logits_ss=logits_ss,\n            loss_ss=loss_ss,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n            attention_biases=outputs.attention_biases,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForContactPrediction","title":"ErnieRnaForContactPrediction","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForContactPrediction(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        self.ernierna = ErnieRnaModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForMaskedLM","title":"ErnieRnaForMaskedLM","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForMaskedLM(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.ernierna = ErnieRnaModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.lm_head.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head.decoder = new_embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaForMaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaForMaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForNucleotidePrediction","title":"ErnieRnaForNucleotidePrediction","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForNucleotidePrediction(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        self.ernierna = ErnieRnaModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaNucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaNucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForSequencePrediction","title":"ErnieRnaForSequencePrediction","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForSequencePrediction(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n    \"\"\"\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        self.ernierna = ErnieRnaModel(config)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaSequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaSequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaForTokenPrediction","title":"ErnieRnaForTokenPrediction","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaForTokenPrediction(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: ErnieRnaConfig):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.ernierna = ErnieRnaModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaTokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.ernierna(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ErnieRnaTokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaModel","title":"ErnieRnaModel","text":"<p>               Bases: <code>ErnieRnaPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaModel, RnaTokenizer\n&gt;&gt;&gt; config = ErnieRnaConfig()\n&gt;&gt;&gt; model = ErnieRnaModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 768])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 768])\n</code></pre> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaModel(ErnieRnaPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ErnieRnaConfig, ErnieRnaModel, RnaTokenizer\n        &gt;&gt;&gt; config = ErnieRnaConfig()\n        &gt;&gt;&gt; model = ErnieRnaModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 768])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 768])\n    \"\"\"\n\n    pairwise_bias_map: Tensor\n\n    def __init__(\n        self, config: ErnieRnaConfig, add_pooling_layer: bool = True, tokenizer: PreTrainedTokenizer | None = None\n    ):\n        super().__init__(config)\n        if tokenizer is None:\n            tokenizer = AutoTokenizer.from_pretrained(\"multimolecule/rna\")\n        self.tokenizer = tokenizer\n        self.pad_token_id = tokenizer.pad_token_id\n        self.vocab_size = len(self.tokenizer)\n        if self.vocab_size != config.vocab_size:\n            raise ValueError(\n                f\"Vocab size in tokenizer ({self.vocab_size}) does not match the one in config ({config.vocab_size})\"\n            )\n        token_to_ids = self.tokenizer._token_to_id\n        tokens = sorted(token_to_ids, key=token_to_ids.get)\n        pairwise_bias_dict = get_pairwise_bias_dict(config.pairwise_alpha)\n        self.register_buffer(\n            \"pairwise_bias_map\",\n            torch.tensor([[pairwise_bias_dict.get(f\"{i}{j}\", 0) for i in tokens] for j in tokens]),\n            persistent=False,\n        )\n        self.pairwise_bias_proj = nn.Sequential(\n            nn.Linear(1, config.num_attention_heads // 2),\n            nn.GELU(),\n            nn.Linear(config.num_attention_heads // 2, config.num_attention_heads),\n        )\n        self.embeddings = ErnieRnaEmbeddings(config)\n        self.encoder = ErnieRnaEncoder(config)\n        self.pooler = ErnieRnaPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def get_pairwise_bias(\n        self, input_ids: Tensor | NestedTensor, attention_mask: Tensor | NestedTensor | None = None\n    ) -&gt; Tensor | NestedTensor:\n        batch_size, seq_len = input_ids.shape\n\n        # Broadcasting data indices to compute indices\n        data_index_x = input_ids.unsqueeze(2).expand(batch_size, seq_len, seq_len)\n        data_index_y = input_ids.unsqueeze(1).expand(batch_size, seq_len, seq_len)\n\n        # Get bias from pairwise_bias_map\n        return self.pairwise_bias_map[data_index_x, data_index_y]\n\n        # Zhiyuan: Is it really necessary to mask the bias?\n        # The mask position should have been nan, and the implementation is incorrect anyway\n        # if attention_mask is not None:\n        #     attention_mask = attention_mask.unsqueeze(1).expand(batch_size, seq_len, seq_len)\n        #     bias = bias * attention_mask\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_attention_biases: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ErnieRnaModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        pairwise_bias = self.get_pairwise_bias(input_ids, attention_mask)\n        attention_bias = self.pairwise_bias_proj(pairwise_bias.unsqueeze(-1)).transpose(1, 3)\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            attention_bias=attention_bias,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_attention_biases=output_attention_biases,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return ErnieRnaModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attention_biases=encoder_outputs.attention_biases,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_attention_biases: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | ErnieRnaModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_attention_biases: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | ErnieRnaModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    pairwise_bias = self.get_pairwise_bias(input_ids, attention_mask)\n    attention_bias = self.pairwise_bias_proj(pairwise_bias.unsqueeze(-1)).transpose(1, 3)\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        attention_bias=attention_bias,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_attention_biases=output_attention_biases,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return ErnieRnaModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attention_biases=encoder_outputs.attention_biases,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/ernierna/#multimolecule.models.ernierna.ErnieRnaPreTrainedModel","title":"ErnieRnaPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/ernierna/modeling_ernierna.py</code> Python<pre><code>class ErnieRnaPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = ErnieRnaConfig\n    base_model_prefix = \"ernierna\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"ErnieRnaLayer\", \"ErnieRnaEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/modeling_outputs/","title":"modeling_outputs","text":""},{"location":"models/modeling_outputs/#multimolecule.models.modeling_outputs","title":"multimolecule.models.modeling_outputs","text":""},{"location":"models/modeling_outputs/#multimolecule.models.modeling_outputs.ContactPredictorOutput","title":"ContactPredictorOutput  <code>dataclass</code>","text":"<p>               Bases: <code>ModelOutput</code></p> <p>Base class for outputs of contact classification &amp; regression models.</p> <p>Parameters:</p> Name Type Description Default <code>loss</code> <code>FloatTensor | None</code> <p><code>torch.FloatTensor</code> of shape <code>(1,)</code>.</p> <p>Optional, returned when <code>labels</code> is provided</p> <code>None</code> <code>logits</code> <code>FloatTensor</code> <p><code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code></p> <p>Prediction outputs.</p> <code>None</code> <code>hidden_states</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p> <p>Optional, returned when <code>output_hidden_states=True</code> is passed or when `config.output_hidden_states=True</p> <p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p> <code>None</code> <code>attentions</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p> <p>Optional, eturned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code></p> <p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.</p> <code>None</code> Source code in <code>multimolecule/models/modeling_outputs.py</code> Python<pre><code>@dataclass\nclass ContactPredictorOutput(ModelOutput):\n    \"\"\"\n    Base class for outputs of contact classification &amp; regression models.\n\n    Args:\n        loss:\n            `torch.FloatTensor` of shape `(1,)`.\n\n            Optional, returned when `labels` is provided\n        logits:\n            `torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`\n\n            Prediction outputs.\n        hidden_states:\n            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +\n            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.\n\n            Optional, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True\n\n            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n        attentions:\n            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n            sequence_length)`.\n\n            Optional, eturned when `output_attentions=True` is passed or when `config.output_attentions=True`\n\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    \"\"\"\n\n    loss: torch.FloatTensor | None = None\n    logits: torch.FloatTensor = None\n    hidden_states: Tuple[torch.FloatTensor, ...] | None = None\n    attentions: Tuple[torch.FloatTensor, ...] | None = None\n</code></pre>"},{"location":"models/modeling_outputs/#multimolecule.models.modeling_outputs.NucleotidePredictorOutput","title":"NucleotidePredictorOutput  <code>dataclass</code>","text":"<p>               Bases: <code>ModelOutput</code></p> <p>Base class for outputs of nucleotide classification &amp; regression models.</p> <p>Parameters:</p> Name Type Description Default <code>loss</code> <code>FloatTensor | None</code> <p><code>torch.FloatTensor</code> of shape <code>(1,)</code>.</p> <p>Optional, returned when <code>labels</code> is provided</p> <code>None</code> <code>logits</code> <code>FloatTensor</code> <p><code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code></p> <p>Prediction outputs.</p> <code>None</code> <code>hidden_states</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p> <p>Optional, returned when <code>output_hidden_states=True</code> is passed or when `config.output_hidden_states=True</p> <p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p> <code>None</code> <code>attentions</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p> <p>Optional, eturned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code></p> <p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.</p> <code>None</code> Source code in <code>multimolecule/models/modeling_outputs.py</code> Python<pre><code>@dataclass\nclass NucleotidePredictorOutput(ModelOutput):\n    \"\"\"\n    Base class for outputs of nucleotide classification &amp; regression models.\n\n    Args:\n        loss:\n            `torch.FloatTensor` of shape `(1,)`.\n\n            Optional, returned when `labels` is provided\n        logits:\n            `torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`\n\n            Prediction outputs.\n        hidden_states:\n            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +\n            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.\n\n            Optional, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True\n\n            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n        attentions:\n            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n            sequence_length)`.\n\n            Optional, eturned when `output_attentions=True` is passed or when `config.output_attentions=True`\n\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    \"\"\"\n\n    loss: torch.FloatTensor | None = None\n    logits: torch.FloatTensor = None\n    hidden_states: Tuple[torch.FloatTensor, ...] | None = None\n    attentions: Tuple[torch.FloatTensor, ...] | None = None\n</code></pre>"},{"location":"models/modeling_outputs/#multimolecule.models.modeling_outputs.SequencePredictorOutput","title":"SequencePredictorOutput  <code>dataclass</code>","text":"<p>               Bases: <code>ModelOutput</code></p> <p>Base class for outputs of sentence classification &amp; regression models.</p> <p>Parameters:</p> Name Type Description Default <code>loss</code> <code>FloatTensor | None</code> <p><code>torch.FloatTensor</code> of shape <code>(1,)</code>.</p> <p>Optional, returned when <code>labels</code> is provided</p> <code>None</code> <code>logits</code> <code>FloatTensor</code> <p><code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code></p> <p>Prediction outputs.</p> <code>None</code> <code>hidden_states</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p> <p>Optional, returned when <code>output_hidden_states=True</code> is passed or when `config.output_hidden_states=True</p> <p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p> <code>None</code> <code>attentions</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p> <p>Optional, eturned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code></p> <p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.</p> <code>None</code> Source code in <code>multimolecule/models/modeling_outputs.py</code> Python<pre><code>@dataclass\nclass SequencePredictorOutput(ModelOutput):\n    \"\"\"\n    Base class for outputs of sentence classification &amp; regression models.\n\n    Args:\n        loss:\n            `torch.FloatTensor` of shape `(1,)`.\n\n            Optional, returned when `labels` is provided\n        logits:\n            `torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`\n\n            Prediction outputs.\n        hidden_states:\n            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +\n            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.\n\n            Optional, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True\n\n            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n        attentions:\n            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n            sequence_length)`.\n\n            Optional, eturned when `output_attentions=True` is passed or when `config.output_attentions=True`\n\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    \"\"\"\n\n    loss: torch.FloatTensor | None = None\n    logits: torch.FloatTensor = None\n    hidden_states: Tuple[torch.FloatTensor, ...] | None = None\n    attentions: Tuple[torch.FloatTensor, ...] | None = None\n</code></pre>"},{"location":"models/modeling_outputs/#multimolecule.models.modeling_outputs.TokenPredictorOutput","title":"TokenPredictorOutput  <code>dataclass</code>","text":"<p>               Bases: <code>ModelOutput</code></p> <p>Base class for outputs of token classification &amp; regression models.</p> <p>Parameters:</p> Name Type Description Default <code>loss</code> <code>FloatTensor | None</code> <p><code>torch.FloatTensor</code> of shape <code>(1,)</code>.</p> <p>Optional, returned when <code>labels</code> is provided</p> <code>None</code> <code>logits</code> <code>FloatTensor</code> <p><code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code></p> <p>Prediction outputs.</p> <code>None</code> <code>hidden_states</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p> <p>Optional, returned when <code>output_hidden_states=True</code> is passed or when `config.output_hidden_states=True</p> <p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p> <code>None</code> <code>attentions</code> <code>Tuple[FloatTensor, ...] | None</code> <p>Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p> <p>Optional, eturned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code></p> <p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.</p> <code>None</code> Source code in <code>multimolecule/models/modeling_outputs.py</code> Python<pre><code>@dataclass\nclass TokenPredictorOutput(ModelOutput):\n    \"\"\"\n    Base class for outputs of token classification &amp; regression models.\n\n    Args:\n        loss:\n            `torch.FloatTensor` of shape `(1,)`.\n\n            Optional, returned when `labels` is provided\n        logits:\n            `torch.FloatTensor` of shape `(batch_size, sequence_length, config.num_labels)`\n\n            Prediction outputs.\n        hidden_states:\n            Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model has an embedding layer, +\n            one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.\n\n            Optional, returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True\n\n            Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n        attentions:\n            Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads, sequence_length,\n            sequence_length)`.\n\n            Optional, eturned when `output_attentions=True` is passed or when `config.output_attentions=True`\n\n            Attentions weights after the attention softmax, used to compute the weighted average in the self-attention\n            heads.\n    \"\"\"\n\n    loss: torch.FloatTensor | None = None\n    logits: torch.FloatTensor = None\n    hidden_states: Tuple[torch.FloatTensor, ...] | None = None\n    attentions: Tuple[torch.FloatTensor, ...] | None = None\n</code></pre>"},{"location":"models/rinalmo/","title":"RiNALMo","text":"<p>Pre-trained model on non-coding RNA (ncRNA) using a masked language modeling (MLM) objective.</p>"},{"location":"models/rinalmo/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the RiNALMo: General-Purpose RNA Language Models Can Generalize Well on Structure Prediction Tasks by Rafael Josip Peni\u0107, et al.</p> <p>The OFFICIAL repository of RiNALMo is at lbcb-sci/RiNALMo.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing RiNALMo did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/rinalmo/#model-details","title":"Model Details","text":"<p>RiNALMo is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/rinalmo/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 33 1280 20 5120 650.88 168.92 84.43 1022"},{"location":"models/rinalmo/#links","title":"Links","text":"<ul> <li>Code: multimolecule.rinalmo</li> <li>Weights: <code>multimolecule/rinalmo</code></li> <li>Data: RNAcentral</li> <li>Paper: RiNALMo: General-Purpose RNA Language Models Can Generalize Well on Structure Prediction Tasks</li> <li>Developed by: Rafael Josip Peni\u0107, Tin Vla\u0161i\u0107, Roland G. Huber, Yue Wan, Mile \u0160iki\u0107</li> <li>Model type: BERT</li> <li>Original Repository: https://github.com/lbcb-sci/RiNALMo</li> </ul>"},{"location":"models/rinalmo/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/rinalmo/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/rinalmo')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.2931748032569885,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.2710167169570923,\n  'token': 9,\n  'token_str': 'U',\n  'sequence': 'U A G C U U A U C A G A C U G A U G U U G A'},\n {'score': 0.18341825902462006,\n  'token': 12,\n  'token_str': 'X',\n  'sequence': 'U A G C X U A U C A G A C U G A U G U U G A'},\n {'score': 0.16714636981487274,\n  'token': 7,\n  'token_str': 'C',\n  'sequence': 'U A G C C U A U C A G A C U G A U G U U G A'},\n {'score': 0.08522326499223709,\n  'token': 8,\n  'token_str': 'G',\n  'sequence': 'U A G C G U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/rinalmo/#downstream-use","title":"Downstream Use","text":""},{"location":"models/rinalmo/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, RiNALMoModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rinalmo')\nmodel = RiNALMoModel.from_pretrained('multimolecule/rinalmo')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/rinalmo/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RiNALMoForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rinalmo')\nmodel = RiNALMoForSequencePrediction.from_pretrained('multimolecule/rinalmo')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rinalmo/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RiNALMoForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rinalmo')\nmodel = RiNALMoForNucleotidePrediction.from_pretrained('multimolecule/rinalmo')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rinalmo/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RiNALMoForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rinalmo')\nmodel = RiNALMoForContactPrediction.from_pretrained('multimolecule/rinalmo')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rinalmo/#training-details","title":"Training Details","text":"<p>RiNALMo used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/rinalmo/#training-data","title":"Training Data","text":"<p>The RiNALMo model was pre-trained on a cocktail of databases including RNAcentral, Rfam, Ensembl Genome Browser, and Nucleotide. The training data contains 36 million unique ncRNA sequences.</p> <p>To ensure sequence diversity in each training batch, RiNALMo clustered the sequences with MMSeqs2 into 17 million clusters and then sampled each sequence in the batch from a different cluster.</p> <p>RiNALMo preprocessed all tokens by replacing \u201cU\u201ds with \u201cT\u201ds.</p> <p>Note that during model conversions, \u201cT\u201d is replaced with \u201cU\u201d. <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/rinalmo/#training-procedure","title":"Training Procedure","text":""},{"location":"models/rinalmo/#preprocessing","title":"Preprocessing","text":"<p>RiNALMo used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/rinalmo/#pretraining","title":"PreTraining","text":"<p>The model was trained on 7 NVIDIA A100 GPUs with 80GiB memories.</p> <ul> <li>Learning rate: 5e-5</li> <li>Learning rate scheduler: cosine</li> <li>Learning rate warm-up: 2,000 steps</li> <li>Learning rate minimum: 1e-5</li> <li>Epochs: 6</li> <li>Batch Size: 1344</li> <li>Dropout: 0.1</li> </ul>"},{"location":"models/rinalmo/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article{penic2024rinalmo,\n  title={RiNALMo: General-Purpose RNA Language Models Can Generalize Well on Structure Prediction Tasks},\n  author={Peni\u0107, Rafael Josip and Vla\u0161i\u0107, Tin and Huber, Roland G. and Wan, Yue and \u0160iki\u0107, Mile},\n  journal={arXiv preprint arXiv:2403.00043},\n  year={2024}\n}\n</code></pre>"},{"location":"models/rinalmo/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the RiNALMo paper for questions or comments on the paper/model.</p>"},{"location":"models/rinalmo/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo","title":"multimolecule.models.rinalmo","text":""},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoConfig","title":"RiNALMoConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>RiNALMoModel</code>. It is used to instantiate a RiNALMo model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the RiNALMo lbcb-sci/RiNALMo architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the RiNALMo model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>RiNALMoModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>1280</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>33</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>20</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>5120</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1024</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>position_embedding_type</code> <code>str</code> <p>Type of position embedding. Choose one of <code>\"absolute\"</code>, <code>\"relative_key\"</code>, <code>\"relative_key_query\", \"rotary\"</code>. For positional embeddings use <code>\"absolute\"</code>. For more information on <code>\"relative_key\"</code>, please refer to Self-Attention with Relative Position Representations (Shaw et al.). For more information on <code>\"relative_key_query\"</code>, please refer to Method 4 in Improve Transformer Models with Better Relative Position Embeddings (Huang et al.).</p> <code>'rotary'</code> <code>is_decoder</code> <code>bool</code> <p>Whether the model is used as a decoder or not. If <code>False</code>, the model is used as an encoder.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if <code>config.is_decoder=True</code>.</p> <code>True</code> <code>emb_layer_norm_before</code> <code>bool</code> <p>Whether to apply layer normalization after embeddings but before the main stem of the network.</p> <code>True</code> <code>token_dropout</code> <code>bool</code> <p>When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoModel, RiNALMoConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a RiNALMo multimolecule/rinalmo style configuration\n&gt;&gt;&gt; configuration = RiNALMoConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rinalmo style configuration\n&gt;&gt;&gt; model = RiNALMoModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/rinalmo/configuration_rinalmo.py</code> Python<pre><code>class RiNALMoConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`RiNALMoModel`][multimolecule.models.RiNALMoModel].\n    It is used to instantiate a RiNALMo model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the RiNALMo\n    [lbcb-sci/RiNALMo](https://github.com/lbcb-sci/RiNALMo) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the RiNALMo model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`RiNALMoModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        position_embedding_type:\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\", \"rotary\"`.\n            For positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        is_decoder:\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache:\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        emb_layer_norm_before:\n            Whether to apply layer normalization after embeddings but before the main stem of the network.\n        token_dropout:\n            When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoModel, RiNALMoConfig\n\n        &gt;&gt;&gt; # Initializing a RiNALMo multimolecule/rinalmo style configuration\n        &gt;&gt;&gt; configuration = RiNALMoConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rinalmo style configuration\n        &gt;&gt;&gt; model = RiNALMoModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"rinalmo\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 1280,\n        num_hidden_layers: int = 33,\n        num_attention_heads: int = 20,\n        intermediate_size: int = 5120,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1024,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"rotary\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        emb_layer_norm_before: bool = True,\n        learnable_beta: bool = True,\n        token_dropout: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.learnable_beta = learnable_beta\n        self.token_dropout = token_dropout\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n        self.emb_layer_norm_before = emb_layer_norm_before\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoForContactPrediction","title":"RiNALMoForContactPrediction","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoForContactPrediction(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RiNALMoConfig):\n        super().__init__(config)\n        self.rinalmo = RiNALMoModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rinalmo(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoForMaskedLM","title":"RiNALMoForMaskedLM","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoForMaskedLM(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: RiNALMoConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `RiNALMoForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.rinalmo = RiNALMoModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rinalmo(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoForNucleotidePrediction","title":"RiNALMoForNucleotidePrediction","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoForNucleotidePrediction(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RiNALMoConfig):\n        super().__init__(config)\n        self.rinalmo = RiNALMoModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rinalmo(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoForSequencePrediction","title":"RiNALMoForSequencePrediction","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoForSequencePrediction(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RiNALMoConfig):\n        super().__init__(config)\n        self.rinalmo = RiNALMoModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rinalmo(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoForTokenPrediction","title":"RiNALMoForTokenPrediction","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoForTokenPrediction(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RiNALMoConfig):\n        super().__init__(config)\n        self.rinalmo = RiNALMoModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rinalmo(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoModel","title":"RiNALMoModel","text":"<p>               Bases: <code>RiNALMoPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoModel, RnaTokenizer\n&gt;&gt;&gt; config = RiNALMoConfig()\n&gt;&gt;&gt; model = RiNALMoModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 1280])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 1280])\n</code></pre> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoModel(RiNALMoPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RiNALMoConfig, RiNALMoModel, RnaTokenizer\n        &gt;&gt;&gt; config = RiNALMoConfig()\n        &gt;&gt;&gt; model = RiNALMoModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 1280])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 1280])\n    \"\"\"\n\n    def __init__(self, config: RiNALMoConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = RiNALMoEmbeddings(config)\n        self.encoder = RiNALMoEncoder(config)\n        self.pooler = RiNALMoPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        attention_mask=attention_mask,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/rinalmo/#multimolecule.models.rinalmo.RiNALMoPreTrainedModel","title":"RiNALMoPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/rinalmo/modeling_rinalmo.py</code> Python<pre><code>class RiNALMoPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = RiNALMoConfig\n    base_model_prefix = \"rinalmo\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"RiNALMoLayer\", \"RiNALMoEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/rnabert/","title":"RNABERT","text":"<p>Pre-trained model on non-coding RNA (ncRNA) using masked language modeling (MLM) and structural alignment learning (SAL) objectives.</p>"},{"location":"models/rnabert/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Informative RNA-base embedding for functional RNA clustering and structural alignment by Manato Akiyama and Yasubumi Sakakibara.</p> <p>The OFFICIAL repository of RNABERT is at mana438/RNABERT.</p> <p>Caution</p> <p>The MultiMolecule team is aware of a potential risk in reproducing the results of RNABERT.</p> <p>The original implementation of RNABERT does not prepend <code>&lt;cls&gt;</code> and append <code>&lt;eos&gt;</code> tokens to the input sequence. This should not affect the performance of the model in most cases, but it can lead to unexpected behavior in some cases.</p> <p>Please set <code>cls_token=None</code> and <code>eos_token=None</code> explicitly in the tokenizer if you want the exact behavior of the original implementation.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing RNABERT did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/rnabert/#model-details","title":"Model Details","text":"<p>RNABERT is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/rnabert/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 6 120 12 40 0.48 0.15 0.08 440"},{"location":"models/rnabert/#links","title":"Links","text":"<ul> <li>Code: multimolecule.rnabert</li> <li>Weights: multimolecule/rnabert</li> <li>Data: RNAcentral</li> <li>Paper: Informative RNA-base embedding for functional RNA clustering and structural alignment</li> <li>Developed by: JManato Akiyama and Yasubumi Sakakibara</li> <li>Model type: BERT</li> <li>Original Repository: https://github.com/mana438/RNABERT</li> </ul>"},{"location":"models/rnabert/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/rnabert/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/rnabert')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.03853221237659454,\n  'token': 10,\n  'token_str': 'N',\n  'sequence': 'U A G C N U A U C A G A C U G A U G U U G A'},\n {'score': 0.03851545602083206,\n  'token': 25,\n  'token_str': '-',\n  'sequence': 'U A G C - U A U C A G A C U G A U G U U G A'},\n {'score': 0.03850385919213295,\n  'token': 3,\n  'token_str': '&lt;unk&gt;',\n  'sequence': 'U A G C U A U C A G A C U G A U G U U G A'},\n {'score': 0.038502465933561325,\n  'token': 5,\n  'token_str': '&lt;null&gt;',\n  'sequence': 'U A G C &lt;null&gt; U A U C A G A C U G A U G U U G A'},\n {'score': 0.03848615288734436,\n  'token': 11,\n  'token_str': 'I',\n  'sequence': 'U A G C I U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/rnabert/#downstream-use","title":"Downstream Use","text":""},{"location":"models/rnabert/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, RnaBertModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnabert')\nmodel = RnaBertModel.from_pretrained('multimolecule/rnabert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/rnabert/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaBertForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnabert')\nmodel = RnaBertForSequencePrediction.from_pretrained('multimolecule/rnabert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnabert/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaBertForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnabert')\nmodel = RnaBertForNucleotidePrediction.from_pretrained('multimolecule/rnabert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnabert/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaBertForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnabert')\nmodel = RnaBertForContactPrediction.from_pretrained('multimolecule/rnabert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnabert/#training-details","title":"Training Details","text":"<p>RNABERT has two pre-training objectives: masked language modeling (MLM) and structural alignment learning (SAL).</p> <ul> <li>Masked Language Modeling (MLM): taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</li> <li>Structural Alignment Learning (SAL): the model learns to predict the structural alignment of two RNA sequences. The model is trained to predict the alignment score of two RNA sequences using the Needleman-Wunsch algorithm.</li> </ul>"},{"location":"models/rnabert/#training-data","title":"Training Data","text":"<p>The RNABERT model was pre-trained on RNAcentral. RNAcentral is a comprehensive database of non-coding RNA sequences from a wide range of species. It combines 47 different databases, adding up to around 27 million RNA sequences in total. RNABERT used a subset of 76, 237 human ncRNA sequences from RNAcentral for pre-training.</p> <p>RNABERT preprocessed all tokens by replacing \u201cU\u201ds with \u201cT\u201ds.</p> <p>Note that during model conversions, \u201cT\u201d is replaced with \u201cU\u201d. <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/rnabert/#training-procedure","title":"Training Procedure","text":""},{"location":"models/rnabert/#preprocessing","title":"Preprocessing","text":"<p>RNABERT preprocess the dataset by applying 10 different mask patterns to the 72, 237 human ncRNA sequences. The final dataset contains 722, 370 sequences. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/rnabert/#pretraining","title":"PreTraining","text":"<p>The model was trained on 1 NVIDIA V100 GPU.</p>"},{"location":"models/rnabert/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article{akiyama2022informative,\n    author = {Akiyama, Manato and Sakakibara, Yasubumi},\n    title = \"{Informative RNA base embedding for RNA structural alignment and clustering by deep representation learning}\",\n    journal = {NAR Genomics and Bioinformatics},\n    volume = {4},\n    number = {1},\n    pages = {lqac012},\n    year = {2022},\n    month = {02},\n    abstract = \"{Effective embedding is actively conducted by applying deep learning to biomolecular information. Obtaining better embeddings enhances the quality of downstream analyses, such as DNA sequence motif detection and protein function prediction. In this study, we adopt a pre-training algorithm for the effective embedding of RNA bases to acquire semantically rich representations and apply this algorithm to two fundamental RNA sequence problems: structural alignment and clustering. By using the pre-training algorithm to embed the four bases of RNA in a position-dependent manner using a large number of RNA sequences from various RNA families, a context-sensitive embedding representation is obtained. As a result, not only base information but also secondary structure and context information of RNA sequences are embedded for each base. We call this \u2018informative base embedding\u2019 and use it to achieve accuracies superior to those of existing state-of-the-art methods on RNA structural alignment and RNA family clustering tasks. Furthermore, upon performing RNA sequence alignment by combining this informative base embedding with a simple Needleman\u2013Wunsch alignment algorithm, we succeed in calculating structural alignments with a time complexity of O(n2) instead of the O(n6) time complexity of the naive implementation of Sankoff-style algorithm for input RNA sequence of length n.}\",\n    issn = {2631-9268},\n    doi = {10.1093/nargab/lqac012},\n    url = {https://doi.org/10.1093/nargab/lqac012},\n    eprint = {https://academic.oup.com/nargab/article-pdf/4/1/lqac012/42577168/lqac012.pdf},\n}\n</code></pre>"},{"location":"models/rnabert/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the RNABERT paper for questions or comments on the paper/model.</p>"},{"location":"models/rnabert/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert","title":"multimolecule.models.rnabert","text":""},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertConfig","title":"RnaBertConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>RnaBertModel</code>. It is used to instantiate a RnaBert model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the RnaBert mana438/RNABERT architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the RnaBert model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>RnaBertModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int | None</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>None</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>6</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>40</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.0</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.0</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>440</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertModel, RnaBertConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a RNABERT multimolecule/rnabert style configuration\n&gt;&gt;&gt; configuration = RnaBertConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnabert style configuration\n&gt;&gt;&gt; model = RnaBertModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/rnabert/configuration_rnabert.py</code> Python<pre><code>class RnaBertConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`RnaBertModel`][multimolecule.models.RnaBertModel].\n    It is used to instantiate a RnaBert model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the RnaBert\n    [mana438/RNABERT](https://github.com/mana438/RNABERT) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the RnaBert model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`RnaBertModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertModel, RnaBertConfig\n\n        &gt;&gt;&gt; # Initializing a RNABERT multimolecule/rnabert style configuration\n        &gt;&gt;&gt; configuration = RnaBertConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnabert style configuration\n        &gt;&gt;&gt; model = RnaBertModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"rnabert\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        ss_vocab_size: int = 8,\n        hidden_size: int | None = None,\n        multiple: int | None = None,\n        num_hidden_layers: int = 6,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 40,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.0,\n        attention_dropout: float = 0.0,\n        max_position_embeddings: int = 440,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        if hidden_size is None:\n            hidden_size = num_attention_heads * multiple if multiple is not None else 120\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.ss_vocab_size = ss_vocab_size\n        self.type_vocab_size = 2\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForContactPrediction","title":"RnaBertForContactPrediction","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForContactPrediction(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForMaskedLM","title":"RnaBertForMaskedLM","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForMaskedLM(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool = False,\n        output_hidden_states: bool = False,\n        return_dict: bool = True,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForNucleotidePrediction","title":"RnaBertForNucleotidePrediction","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForNucleotidePrediction(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForPreTraining","title":"RnaBertForPreTraining","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForPreTraining, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForPreTraining(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;AddBackward0&gt;)\n&gt;&gt;&gt; output[\"logits_mlm\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"logits_ss\"].shape\ntorch.Size([1, 7, 8])\n&gt;&gt;&gt; output[\"logits_sal\"].shape\ntorch.Size([1, 2])\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForPreTraining(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForPreTraining, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForPreTraining(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;AddBackward0&gt;)\n        &gt;&gt;&gt; output[\"logits_mlm\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"logits_ss\"].shape\n        torch.Size([1, 7, 8])\n        &gt;&gt;&gt; output[\"logits_sal\"].shape\n        torch.Size([1, 2])\n    \"\"\"\n\n    _tied_weights_keys = [\n        \"lm_head.decoder.weight\",\n        \"lm_head.decoder.bias\",\n        \"pretrain.predictions.decoder.weight\",\n        \"pretrain.predictions.decoder.bias\",\n        \"pretrain.predictions_ss.decoder.weight\",\n        \"pretrain.predictions_ss.decoder.bias\",\n    ]\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=True)\n        self.pretrain = RnaBertPreTrainingHeads(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        labels_mlm: Tensor | None = None,\n        labels_ss: Tensor | None = None,\n        labels_sal: Tensor | None = None,\n        output_attentions: bool = False,\n        output_hidden_states: bool = False,\n        return_dict: bool = True,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaBertForPreTrainingOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        total_loss, logits_mlm, logits_ss, logits_sal = self.pretrain(\n            outputs, labels_mlm=labels_mlm, labels_ss=labels_ss, labels_sal=labels_sal\n        )\n\n        if not return_dict:\n            output = (logits_mlm, logits_ss, logits_sal) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return RnaBertForPreTrainingOutput(\n            loss=total_loss,\n            logits_mlm=logits_mlm,\n            logits_ss=logits_ss,\n            logits_sal=logits_sal,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForSequencePrediction","title":"RnaBertForSequencePrediction","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForSequencePrediction(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertForTokenPrediction","title":"RnaBertForTokenPrediction","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertForTokenPrediction(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaBertConfig):\n        super().__init__(config)\n        self.rnabert = RnaBertModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnabert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertModel","title":"RnaBertModel","text":"<p>               Bases: <code>RnaBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertModel, RnaTokenizer\n&gt;&gt;&gt; config = RnaBertConfig()\n&gt;&gt;&gt; model = RnaBertModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 120])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 120])\n</code></pre> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertModel(RnaBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaBertConfig, RnaBertModel, RnaTokenizer\n        &gt;&gt;&gt; config = RnaBertConfig()\n        &gt;&gt;&gt; model = RnaBertModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 120])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 120])\n    \"\"\"\n\n    def __init__(self, config: RnaBertConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = RnaBertEmbeddings(config)\n        self.encoder = RnaBertEncoder(config)\n        self.pooler = RnaBertPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/rnabert/#multimolecule.models.rnabert.RnaBertPreTrainedModel","title":"RnaBertPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/rnabert/modeling_rnabert.py</code> Python<pre><code>class RnaBertPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = RnaBertConfig\n    base_model_prefix = \"rnabert\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"RnaBertLayer\", \"RnaBertEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/rnaernie/","title":"RNAErnie","text":"<p>Pre-trained model on non-coding RNA (ncRNA) using a multi-stage masked language modeling (MLM) objective.</p>"},{"location":"models/rnaernie/#statement","title":"Statement","text":"<p>Multi-purpose RNA language modelling with motif-aware pretraining and type-guided fine-tuning is published in Nature Machine Intelligence, which is a Closed Access / Author-Fee journal.</p> <p>Machine learning has been at the forefront of the movement for free and open access to research.</p> <p>We see no role for closed access or author-fee publication in the future of machine learning research and believe the adoption of these journals as an outlet of record for the machine learning community would be a retrograde step.</p> <p>The MultiMolecule team is committed to the principles of open access and open science.</p> <p>We do NOT endorse the publication of manuscripts in Closed Access / Author-Fee journals and encourage the community to support Open Access journals and conferences.</p> <p>Please consider signing the Statement on Nature Machine Intelligence.</p>"},{"location":"models/rnaernie/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the RNAErnie: An RNA Language Model with Structure-enhanced Representations by Ning Wang, Jiang Bian, Haoyi Xiong, et al.</p> <p>The OFFICIAL repository of RNAErnie is at CatIIIIIIII/RNAErnie.</p> <p>Warning</p> <p>The MultiMolecule team is unable to confirm that the provided model and checkpoints are producing the same intermediate representations as the original implementation. This is because</p> <p>The proposed method is published in a Closed Access / Author-Fee journal.</p> <p>The team releasing RNAErnie did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/rnaernie/#model-details","title":"Model Details","text":"<p>RNAErnie is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p> <p>Note that during the conversion process, additional tokens such as <code>[IND]</code> and ncRNA class symbols are removed.</p>"},{"location":"models/rnaernie/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 12 768 12 3072 86.06 22.36 11.17 512"},{"location":"models/rnaernie/#links","title":"Links","text":"<ul> <li>Code: multimolecule.rnaernie</li> <li>Weights: <code>multimolecule/rnaernie</code></li> <li>Data: RNAcentral</li> <li>Paper: Multi-purpose RNA language modelling with motif-aware pretraining and type-guided fine-tuning</li> <li>Developed by: Ning Wang, Jiang Bian, Yuchen Li, Xuhong Li, Shahid Mumtaz, Linghe Kong, Haoyi Xiong.</li> <li>Model type: BERT - ERNIE</li> <li>Original Repository: https://github.com/CatIIIIIIII/RNAErnie</li> </ul>"},{"location":"models/rnaernie/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/rnaernie/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/rnaernie')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.09175308048725128,\n  'token': 8,\n  'token_str': 'G',\n  'sequence': 'U A G C G U A U C A G A C U G A U G U U G A'},\n {'score': 0.0863049179315567,\n  'token': 18,\n  'token_str': 'R',\n  'sequence': 'U A G C R U A U C A G A C U G A U G U U G A'},\n {'score': 0.08118009567260742,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.0767645537853241,\n  'token': 2,\n  'token_str': '&lt;eos&gt;',\n  'sequence': 'U A G C U A U C A G A C U G A U G U U G A'},\n {'score': 0.07190170139074326,\n  'token': 13,\n  'token_str': 'V',\n  'sequence': 'U A G C V U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/rnaernie/#downstream-use","title":"Downstream Use","text":""},{"location":"models/rnaernie/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, RnaErnieModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnaernie')\nmodel = RnaErnieModel.from_pretrained('multimolecule/rnaernie')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/rnaernie/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaErnieForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnaernie')\nmodel = RnaErnieForSequencePrediction.from_pretrained('multimolecule/rnaernie')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnaernie/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaErnieForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnaernie')\nmodel = RnaErnieForNucleotidePrediction.from_pretrained('multimolecule/rnaernie')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnaernie/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaErnieForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnaernie')\nmodel = RnaErnieForContactPrediction.from_pretrained('multimolecule/rnaernie')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnaernie/#training-details","title":"Training Details","text":"<p>RNAErnie used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/rnaernie/#training-data","title":"Training Data","text":"<p>The RNAErnie model was pre-trained on RNAcentral. RNAcentral is a comprehensive database of non-coding RNA sequences from a wide range of species. It combines 47 different databases, adding up to around 34 million RNA sequences in total.</p> <p>RNAErnie used a subset of RNAcentral for pre-training. The subset contains 23 million sequences. RNAErnie preprocessed all tokens by replacing \u201cT\u201ds with \u201cS\u201ds.</p> <p>Note that <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/rnaernie/#training-procedure","title":"Training Procedure","text":""},{"location":"models/rnaernie/#preprocessing","title":"Preprocessing","text":"<p>RNAErnie used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/rnaernie/#pretraining","title":"PreTraining","text":"<p>RNAErnie uses a special 3-stage training pipeline to pre-train the model, each with a different masking strategy:</p> <p>Base-level Masking: The masking applies to each nucleotide in the sequence. Subsequence-level Masking: The masking applies to subsequences of 4-8bp in the sequence. Motif-level Masking: The model is trained on motif datasets.</p> <p>The model was trained on 4 NVIDIA V100 GPUs with 32GiB memories.</p> <ul> <li>Batch size: 50</li> <li>Learning rate: 1e-4</li> <li>Weight decay: 0.01</li> <li>Optimizer: AdamW</li> <li>Steps: 2,580,000</li> <li>Learning rate warm-up: 129,000 steps</li> <li>Learning rate cool-down: 129,000 steps</li> <li>Minimum learning rate: 5e-5</li> </ul>"},{"location":"models/rnaernie/#citation","title":"Citation","text":"<p>Citation information is not available for papers published in Closed Access / Author-Fee journals.</p>"},{"location":"models/rnaernie/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the RNAErnie paper for questions or comments on the paper/model.</p>"},{"location":"models/rnaernie/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie","title":"multimolecule.models.rnaernie","text":""},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieConfig","title":"RnaErnieConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>RnaErnieModel</code>. It is used to instantiate a RnaErnie model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the RnaErnie Bruce-ywj/rnaernie architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the RnaErnie model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>RnaErnieModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>768</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>12</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>3072</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>513</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieModel, RnaErnieConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a rnaernie multimolecule/rnaernie style configuration\n&gt;&gt;&gt; configuration = RnaErnieConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnaernie style configuration\n&gt;&gt;&gt; model = RnaErnieModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/rnaernie/configuration_rnaernie.py</code> Python<pre><code>class RnaErnieConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a\n    [`RnaErnieModel`][multimolecule.models.RnaErnieModel]. It is used to instantiate a RnaErnie model according to the\n    specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a\n    similar configuration to that of the RnaErnie [Bruce-ywj/rnaernie](https://github.com/Bruce-ywj/rnaernie)\n    architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the RnaErnie model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`RnaErnieModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieModel, RnaErnieConfig\n\n        &gt;&gt;&gt; # Initializing a rnaernie multimolecule/rnaernie style configuration\n        &gt;&gt;&gt; configuration = RnaErnieConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnaernie style configuration\n        &gt;&gt;&gt; model = RnaErnieModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"rnaernie\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 768,\n        num_hidden_layers: int = 12,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 3072,\n        hidden_act: str = \"relu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 513,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.type_vocab_size = 2\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieForContactPrediction","title":"RnaErnieForContactPrediction","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieForContactPrediction(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaErnieConfig):\n        super().__init__(config)\n        self.rnaernie = RnaErnieModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnaernie(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieForMaskedLM","title":"RnaErnieForMaskedLM","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieForMaskedLM(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.bias\", \"lm_head.decoder.weight\"]\n\n    def __init__(self, config: RnaErnieConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `RnaErnieForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.rnaernie = RnaErnieModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.lm_head.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head.decoder = new_embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnaernie(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieForNucleotidePrediction","title":"RnaErnieForNucleotidePrediction","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieForNucleotidePrediction(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaErnieConfig):\n        super().__init__(config)\n        self.rnaernie = RnaErnieModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnaernie(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieForSequencePrediction","title":"RnaErnieForSequencePrediction","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieForSequencePrediction(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.rnaernie = RnaErnieModel(config)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnaernie(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieForTokenPrediction","title":"RnaErnieForTokenPrediction","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieForTokenPrediction(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaErnieConfig):\n        super().__init__(config)\n        self.splicebert = RnaErnieModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieModel","title":"RnaErnieModel","text":"<p>               Bases: <code>RnaErniePreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieModel, RnaTokenizer\n&gt;&gt;&gt; config = RnaErnieConfig()\n&gt;&gt;&gt; model = RnaErnieModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 768])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 768])\n</code></pre> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErnieModel(RnaErniePreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaErnieConfig, RnaErnieModel, RnaTokenizer\n        &gt;&gt;&gt; config = RnaErnieConfig()\n        &gt;&gt;&gt; model = RnaErnieModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 768])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 768])\n    \"\"\"\n\n    def __init__(self, config: RnaErnieConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n\n        self.embeddings = RnaErnieEmbeddings(config)\n        self.encoder = RnaErnieEncoder(config)\n\n        self.pooler = RnaErniePooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErnieModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/rnaernie/#multimolecule.models.rnaernie.RnaErniePreTrainedModel","title":"RnaErniePreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/rnaernie/modeling_rnaernie.py</code> Python<pre><code>class RnaErniePreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = RnaErnieConfig\n    base_model_prefix = \"rnaernie\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"RnaErnieLayer\", \"RnaErnieEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n\n    def _set_gradient_checkpointing(self, module, value=False):\n        if isinstance(module, RnaErnieEncoder):\n            module.gradient_checkpointing = value\n</code></pre>"},{"location":"models/rnafm/","title":"RNA-FM","text":"<p>Pre-trained model on non-coding RNA (ncRNA) using a masked language modeling (MLM) objective.</p>"},{"location":"models/rnafm/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Interpretable RNA Foundation Model from Unannotated Data for Highly Accurate RNA Structure and Function Predictions by Jiayang Chen, Zhihang Hue, Siqi Sun, et al.</p> <p>The OFFICIAL repository of RNA-FM is at ml4bio/RNA-FM.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing RNA-FM did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/rnafm/#model-details","title":"Model Details","text":"<p>RNA-FM is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/rnafm/#variations","title":"Variations","text":"<ul> <li><code>multimolecule/rnafm</code>: The RNA-FM model pre-trained on non-coding RNA sequences.</li> <li><code>multimolecule/mrnafm</code>: The RNA-FM model pre-trained on mRNA coding sequences.</li> </ul>"},{"location":"models/rnafm/#model-specification","title":"Model Specification","text":"Variants Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens RNA-FM 12 640 20 5120 99.52 25.68 12.83 1024 mRNA-FM 1280 239.25 61.43 30.7"},{"location":"models/rnafm/#links","title":"Links","text":"<ul> <li>Code: multimolecule.rnafm</li> <li>Data: RNAcentral</li> <li>Paper: Interpretable RNA Foundation Model from Unannotated Data for Highly Accurate RNA Structure and Function Predictions</li> <li>Developed by: Jiayang Chen, Zhihang Hu, Siqi Sun, Qingxiong Tan, Yixuan Wang, Qinze Yu, Licheng Zong, Liang Hong, Jin Xiao, Tao Shen, Irwin King, Yu Li</li> <li>Model type: BERT - ESM</li> <li>Original Repository: https://github.com/ml4bio/RNA-FM</li> </ul>"},{"location":"models/rnafm/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/rnafm/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/rnafm')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.35248875617980957,\n  'token': 11,\n  'token_str': 'I',\n  'sequence': 'U A G C I U A U C A G A C U G A U G U U G A'},\n {'score': 0.18891523778438568,\n  'token': 24,\n  'token_str': '*',\n  'sequence': 'U A G C * U A U C A G A C U G A U G U U G A'},\n {'score': 0.14166751503944397,\n  'token': 23,\n  'token_str': '.',\n  'sequence': 'U A G C. U A U C A G A C U G A U G U U G A'},\n {'score': 0.09060215204954147,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.07837390154600143,\n  'token': 9,\n  'token_str': 'U',\n  'sequence': 'U A G C U U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/rnafm/#downstream-use","title":"Downstream Use","text":""},{"location":"models/rnafm/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, RnaFmModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnafm')\nmodel = RnaFmModel.from_pretrained('multimolecule/rnafm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/rnafm/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaFmForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnafm')\nmodel = RnaFmForSequencePrediction.from_pretrained('multimolecule/rnafm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnafm/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaFmForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnafm')\nmodel = RnaFmForNucleotidePrediction.from_pretrained('multimolecule/rnafm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnafm/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaFmForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnafm')\nmodel = RnaFmForContactPrediction.from_pretrained('multimolecule/rnafm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnafm/#training-details","title":"Training Details","text":"<p>RNA-FM used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/rnafm/#training-data","title":"Training Data","text":"<p>The RNA-FM model was pre-trained on RNAcentral. RNAcentral is a comprehensive database of non-coding RNA sequences from a wide range of species. It combines 47 different databases, adding up to around 27 million RNA sequences in total.</p> <p>RNA-FM applied CD-HIT (CD-HIT-EST) with a cut-off at 100% sequence identity to remove redundancy from the RNAcentral. The final dataset contains 23.7 million non-redundant RNA sequences.</p> <p>RNA-FM preprocessed all tokens by replacing \u201cU\u201ds with \u201cT\u201ds.</p> <p>Note that during model conversions, \u201cT\u201d is replaced with \u201cU\u201d. <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/rnafm/#training-procedure","title":"Training Procedure","text":""},{"location":"models/rnafm/#preprocessing","title":"Preprocessing","text":"<p>RNA-FM used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/rnafm/#pretraining","title":"PreTraining","text":"<p>The model was trained on 8 NVIDIA A100 GPUs with 80GiB memories.</p> <ul> <li>Learning rate: 1e-4</li> <li>Weight decay: 0.01</li> <li>Learning rate scheduler: inverse square root</li> <li>Learning rate warm-up: 10,000 steps</li> </ul>"},{"location":"models/rnafm/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article{chen2022interpretable,\n  title={Interpretable rna foundation model from unannotated data for highly accurate rna structure and function predictions},\n  author={Chen, Jiayang and Hu, Zhihang and Sun, Siqi and Tan, Qingxiong and Wang, Yixuan and Yu, Qinze and Zong, Licheng and Hong, Liang and Xiao, Jin and King, Irwin and others},\n  journal={arXiv preprint arXiv:2204.00300},\n  year={2022}\n}\n</code></pre>"},{"location":"models/rnafm/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the RNA-FM paper for questions or comments on the paper/model.</p>"},{"location":"models/rnafm/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm","title":"multimolecule.models.rnafm","text":""},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmConfig","title":"RnaFmConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>RnaFmModel</code>. It is used to instantiate a RNA-FM model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the RNA-FM ml4bio/RNA-FM architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int | None</code> <p>Vocabulary size of the RNA-FM model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>RnaFmModel</code>]. Defaults to 25 if <code>codon=False</code> else 131.</p> <code>None</code> <code>codon</code> <code>bool</code> <p>Whether to use codon tokenization.</p> <code>False</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>640</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>12</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>20</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>5120</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1026</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>position_embedding_type</code> <code>str</code> <p>Type of position embedding. Choose one of <code>\"absolute\"</code>, <code>\"relative_key\"</code>, <code>\"relative_key_query\", \"rotary\"</code>. For positional embeddings use <code>\"absolute\"</code>. For more information on <code>\"relative_key\"</code>, please refer to Self-Attention with Relative Position Representations (Shaw et al.). For more information on <code>\"relative_key_query\"</code>, please refer to Method 4 in Improve Transformer Models with Better Relative Position Embeddings (Huang et al.).</p> <code>'absolute'</code> <code>is_decoder</code> <code>bool</code> <p>Whether the model is used as a decoder or not. If <code>False</code>, the model is used as an encoder.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if <code>config.is_decoder=True</code>.</p> <code>True</code> <code>emb_layer_norm_before</code> <code>bool</code> <p>Whether to apply layer normalization after embeddings but before the main stem of the network.</p> <code>True</code> <code>token_dropout</code> <code>bool</code> <p>When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.</p> <code>False</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmModel, RnaFmConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a RNA-FM multimolecule/rnafm style configuration\n&gt;&gt;&gt; configuration = RnaFmConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnafm style configuration\n&gt;&gt;&gt; model = RnaFmModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/rnafm/configuration_rnafm.py</code> Python<pre><code>class RnaFmConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`RnaFmModel`][multimolecule.models.RnaFmModel].\n    It is used to instantiate a RNA-FM model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the RNA-FM\n    [ml4bio/RNA-FM](https://github.com/ml4bio/RNA-FM) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the RNA-FM model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`RnaFmModel`].\n            Defaults to 25 if `codon=False` else 131.\n        codon:\n            Whether to use codon tokenization.\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        position_embedding_type:\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\", \"rotary\"`.\n            For positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        is_decoder:\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache:\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        emb_layer_norm_before:\n            Whether to apply layer normalization after embeddings but before the main stem of the network.\n        token_dropout:\n            When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmModel, RnaFmConfig\n\n        &gt;&gt;&gt; # Initializing a RNA-FM multimolecule/rnafm style configuration\n        &gt;&gt;&gt; configuration = RnaFmConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnafm style configuration\n        &gt;&gt;&gt; model = RnaFmModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"rnafm\"\n\n    def __init__(\n        self,\n        vocab_size: int | None = None,\n        codon: bool = False,\n        hidden_size: int = 640,\n        num_hidden_layers: int = 12,\n        num_attention_heads: int = 20,\n        intermediate_size: int = 5120,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1026,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        emb_layer_norm_before: bool = True,\n        token_dropout: bool = False,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        if vocab_size is None:\n            vocab_size = 131 if codon else 26\n        self.vocab_size = vocab_size\n        self.codon = codon\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.emb_layer_norm_before = emb_layer_norm_before\n        self.token_dropout = token_dropout\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForContactPrediction","title":"RnaFmForContactPrediction","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForContactPrediction(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        self.rnafm = RnaFmModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForMaskedLM","title":"RnaFmForMaskedLM","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForMaskedLM(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `RnaFmForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.rnafm = RnaFmModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForNucleotidePrediction","title":"RnaFmForNucleotidePrediction","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForNucleotidePrediction(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        self.rnafm = RnaFmModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForPreTraining","title":"RnaFmForPreTraining","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForPreTraining, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForPreTraining(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;AddBackward0&gt;)\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"contact_map\"].shape\ntorch.Size([1, 5, 5, 2])\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForPreTraining(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForPreTraining, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForPreTraining(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;AddBackward0&gt;)\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"contact_map\"].shape\n        torch.Size([1, 5, 5, 2])\n    \"\"\"\n\n    _tied_weights_keys = [\n        \"lm_head.decoder.weight\",\n        \"lm_head.decoder.bias\",\n        \"pretrain.predictions.decoder.weight\",\n        \"pretrain.predictions.decoder.bias\",\n        \"pretrain.predictions_ss.decoder.weight\",\n        \"pretrain.predictions_ss.decoder.bias\",\n    ]\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `RnaFmForPreTraining` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.rnafm = RnaFmModel(config, add_pooling_layer=False)\n        self.pretrain = RnaFmPreTrainingHeads(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.pretrain.predictions.decoder\n\n    def set_output_embeddings(self, embeddings):\n        self.pretrain.predictions.decoder = embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels_mlm: Tensor | None = None,\n        labels_contact: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaFmForPreTrainingOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        total_loss, logits, contact_map = self.pretrain(\n            outputs, attention_mask, input_ids, labels_mlm=labels_mlm, labels_contact=labels_contact\n        )\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return RnaFmForPreTrainingOutput(\n            loss=total_loss,\n            logits=logits,\n            contact_map=contact_map,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForSequencePrediction","title":"RnaFmForSequencePrediction","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForSequencePrediction(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        self.rnafm = RnaFmModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmForTokenPrediction","title":"RnaFmForTokenPrediction","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmForTokenPrediction(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaFmConfig):\n        super().__init__(config)\n        self.rnafm = RnaFmModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnafm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmModel","title":"RnaFmModel","text":"<p>               Bases: <code>RnaFmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmModel, RnaTokenizer\n&gt;&gt;&gt; config = RnaFmConfig()\n&gt;&gt;&gt; model = RnaFmModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 640])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 640])\n</code></pre> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmModel(RnaFmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaFmConfig, RnaFmModel, RnaTokenizer\n        &gt;&gt;&gt; config = RnaFmConfig()\n        &gt;&gt;&gt; model = RnaFmModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 640])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 640])\n    \"\"\"\n\n    def __init__(self, config: RnaFmConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = RnaFmEmbeddings(config)\n        self.encoder = RnaFmEncoder(config)\n        self.pooler = RnaFmPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        attention_mask=attention_mask,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/rnafm/#multimolecule.models.rnafm.RnaFmPreTrainedModel","title":"RnaFmPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/rnafm/modeling_rnafm.py</code> Python<pre><code>class RnaFmPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = RnaFmConfig\n    base_model_prefix = \"rnafm\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"RnaFmLayer\", \"RnaFmEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/rnamsm/","title":"RNA-MSM","text":"<p>Pre-trained model on non-coding RNA (ncRNA) with multi (homologous) sequence alignment using a masked language modeling (MLM) objective.</p>"},{"location":"models/rnamsm/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Multiple sequence alignment-based RNA language model and its application to structural inference by Yikun Zhang, Mei Lang, Jiuhong Jiang, Zhiqiang Gao, et al.</p> <p>The OFFICIAL repository of RNA-MSM is at yikunpku/RNA-MSM.</p> <p>Caution</p> <p>The MultiMolecule team is aware of a potential risk in reproducing the results of RNA-MSM.</p> <p>The original implementation of RNA-MSM used a custom tokenizer that does not append <code>&lt;eos&gt;</code> token to the end of the input sequence in consistent to MSA Transformer. This should not affect the performance of the model in most cases, but it can lead to unexpected behavior in some cases.</p> <p>Please set <code>eos_token=None</code> explicitly in the tokenizer if you want the exact behavior of the original implementation.</p> <p>See more at issue #10</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing RNA-MSM did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/rnamsm/#model-details","title":"Model Details","text":"<p>RNA-MSM is a bert-style model pre-trained on a large corpus of non-coding RNA sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/rnamsm/#model-specification","title":"Model Specification","text":"Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens 10 768 12 3072 95.92 21.66 10.57 1024"},{"location":"models/rnamsm/#links","title":"Links","text":"<ul> <li>Code: multimolecule.rnamsm</li> <li>Weights: multimolecule/rnamsm</li> <li>Data: Rfam</li> <li>Paper: Multiple sequence alignment-based RNA language model and its application to structural inference</li> <li>Developed by: Yikun Zhang, Mei Lang, Jiuhong Jiang, Zhiqiang Gao, Fan Xu, Thomas Litfin, Ke Chen, Jaswinder Singh, Xiansong Huang, Guoli Song, Yonghong Tian, Jian Zhan, Jie Chen, Yaoqi Zhou</li> <li>Model type: BERT - MSA</li> <li>Original Repository: https://github.com/yikunpku/RNA-MSM</li> </ul>"},{"location":"models/rnamsm/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/rnamsm/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/rnamsm')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.28288617730140686,\n  'token': 9,\n  'token_str': 'U',\n  'sequence': 'U A G C U U A U C A G A C U G A U G U U G A'},\n {'score': 0.25364217162132263,\n  'token': 22,\n  'token_str': 'K',\n  'sequence': 'U A G C K U A U C A G A C U G A U G U U G A'},\n {'score': 0.22742131352424622,\n  'token': 8,\n  'token_str': 'G',\n  'sequence': 'U A G C G U A U C A G A C U G A U G U U G A'},\n {'score': 0.06836166977882385,\n  'token': 15,\n  'token_str': 'D',\n  'sequence': 'U A G C D U A U C A G A C U G A U G U U G A'},\n {'score': 0.03748038411140442,\n  'token': 19,\n  'token_str': 'W',\n  'sequence': 'U A G C W U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/rnamsm/#downstream-use","title":"Downstream Use","text":""},{"location":"models/rnamsm/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, RnaMsmModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnamsm')\nmodel = RnaMsmModel.from_pretrained('multimolecule/rnamsm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/rnamsm/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaMsmForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnamsm')\nmodel = RnaMsmForSequencePrediction.from_pretrained('multimolecule/rnamsm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnamsm/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaMsmForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnamsm')\nmodel = RnaMsmForNucleotidPrediction.from_pretrained('multimolecule/rnamsm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnamsm/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, RnaMsmForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/rnamsm')\nmodel = RnaMsmForContactPrediction.from_pretrained('multimolecule/rnamsm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/rnamsm/#training-details","title":"Training Details","text":"<p>RNA-MSM used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/rnamsm/#training-data","title":"Training Data","text":"<p>The RNA-MSM model was pre-trained on Rfam. Rfam database is a collection of RNA families, each represented by multiple sequence alignments, consensus secondary structures and covariance models. RNA-MSM used Rfam 14.7 which contains 4,069 RNA families.</p> <p>To avoid potential overfitting in structural inference, RNA-MSM excluded families with experimentally determined structures, such as ribosomal RNAs, transfer RNAs, and small nuclear RNAs. The final dataset contains 3,932 RNA families. The median value for the number of MSA sequences for these families by RNAcmap3 is 2,184.</p> <p>To increase the number of homologous sequences, RNA-MSM used an automatic pipeline, RNAcmap3, for homolog search and sequence alignment. RNAcmap3 is a pipeline that combines the BLAST-N, INFERNAL, Easel, RNAfold and evolutionary coupling tools to generate homologous sequences.</p> <p>RNA-MSM preprocessed all tokens by replacing \u201cT\u201ds with \u201cU\u201ds and substituting \u201cR\u201d, \u201cY\u201d, \u201cK\u201d, \u201cM\u201d, \u201cS\u201d, \u201cW\u201d, \u201cB\u201d, \u201cD\u201d, \u201cH\u201d, \u201cV\u201d, \u201cN\u201d with \u201cX\u201d.</p> <p>Note that <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>. <code>RnaTokenizer</code> does not perform other substitutions.</p>"},{"location":"models/rnamsm/#training-procedure","title":"Training Procedure","text":""},{"location":"models/rnamsm/#preprocessing","title":"Preprocessing","text":"<p>RNA-MSM used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/rnamsm/#pretraining","title":"PreTraining","text":"<p>The model was trained on 8 NVIDIA V100 GPUs with 32GiB memories.</p> <ul> <li>Learning rate: 3e-4</li> <li>Weight decay: 3e-4</li> <li>Optimizer: Adam</li> <li>Learning rate warm-up: 16,000 steps</li> <li>Epochs: 300</li> <li>Batch Size: 1</li> <li>Dropout: 0.1</li> </ul>"},{"location":"models/rnamsm/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article{zhang2023multiple,\n    author = {Zhang, Yikun and Lang, Mei and Jiang, Jiuhong and Gao, Zhiqiang and Xu, Fan and Litfin, Thomas and Chen, Ke and Singh, Jaswinder and Huang, Xiansong and Song, Guoli and Tian, Yonghong and Zhan, Jian and Chen, Jie and Zhou, Yaoqi},\n    title = \"{Multiple sequence alignment-based RNA language model and its application to structural inference}\",\n    journal = {Nucleic Acids Research},\n    volume = {52},\n    number = {1},\n    pages = {e3-e3},\n    year = {2023},\n    month = {11},\n    abstract = \"{Compared with proteins, DNA and RNA are more difficult languages to interpret because four-letter coded DNA/RNA sequences have less information content than 20-letter coded protein sequences. While BERT (Bidirectional Encoder Representations from Transformers)-like language models have been developed for RNA, they are ineffective at capturing the evolutionary information from homologous sequences because\u00a0unlike proteins, RNA sequences are less conserved. Here, we have developed an unsupervised multiple sequence alignment-based RNA language model (RNA-MSM) by utilizing homologous sequences from an automatic pipeline, RNAcmap, as it can provide significantly more homologous sequences than manually annotated Rfam. We demonstrate that the resulting unsupervised, two-dimensional attention maps and one-dimensional embeddings from RNA-MSM contain structural information. In fact, they can be directly mapped with high accuracy to 2D base pairing probabilities and 1D solvent accessibilities, respectively. Further fine-tuning led to significantly improved performance on these two downstream tasks compared with existing state-of-the-art techniques including SPOT-RNA2 and RNAsnap2. By comparison, RNA-FM, a BERT-based RNA language model, performs worse than one-hot encoding with its embedding in base pair and solvent-accessible surface area prediction. We anticipate that the pre-trained RNA-MSM model can be fine-tuned on many other tasks related to RNA structure and function.}\",\n    issn = {0305-1048},\n    doi = {10.1093/nar/gkad1031},\n    url = {https://doi.org/10.1093/nar/gkad1031},\n    eprint = {https://academic.oup.com/nar/article-pdf/52/1/e3/55443207/gkad1031.pdf},\n}\n</code></pre>"},{"location":"models/rnamsm/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the RNA-MSM paper for questions or comments on the paper/model.</p>"},{"location":"models/rnamsm/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm","title":"multimolecule.models.rnamsm","text":""},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmConfig","title":"RnaMsmConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>RnaMsmModel</code>. It is used to instantiate a RnaMsm model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the RnaMsm yikunpku/RNA-MSM architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the RnaMsm model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>RnaMsmModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>768</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>10</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>3072</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1024</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmModel, RnaMsmConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a RNA-MSM multimolecule/rnamsm style configuration\n&gt;&gt;&gt; configuration = RnaMsmConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnamsm style configuration\n&gt;&gt;&gt; model = RnaMsmModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/rnamsm/configuration_rnamsm.py</code> Python<pre><code>class RnaMsmConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`RnaMsmModel`][multimolecule.models.RnaMsmModel].\n    It is used to instantiate a RnaMsm model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the RnaMsm\n    [yikunpku/RNA-MSM](https://github.com/yikunpku/RNA-MSM) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the RnaMsm model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`RnaMsmModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmModel, RnaMsmConfig\n\n        &gt;&gt;&gt; # Initializing a RNA-MSM multimolecule/rnamsm style configuration\n        &gt;&gt;&gt; configuration = RnaMsmConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/rnamsm style configuration\n        &gt;&gt;&gt; model = RnaMsmModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"rnamsm\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 768,\n        num_hidden_layers: int = 10,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 3072,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1024,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        max_tokens_per_msa: int = 2**14,\n        layer_type: str = \"standard\",\n        attention_type: str = \"standard\",\n        embed_positions_msa: bool = True,\n        attention_bias: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.max_tokens_per_msa = max_tokens_per_msa\n        self.layer_type = layer_type\n        self.attention_type = attention_type\n        self.embed_positions_msa = embed_positions_msa\n        self.attention_bias = attention_bias\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForContactPrediction","title":"RnaMsmForContactPrediction","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForContactPrediction(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=True)\n        head_config = HeadConfig(output_name=\"row_attentions\")\n        self.contact_head = ContactPredictionHead(config, head_config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return RnaMsmContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForMaskedLM","title":"RnaMsmForMaskedLM","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForMaskedLM(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config, weight=self.rnamsm.embeddings.word_embeddings.weight)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmForMaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return RnaMsmForMaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForNucleotidePrediction","title":"RnaMsmForNucleotidePrediction","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForNucleotidePrediction(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool = False,\n        output_hidden_states: bool = False,\n        return_dict: bool = True,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmNucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return RnaMsmNucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForPreTraining","title":"RnaMsmForPreTraining","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForPreTraining, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForPreTraining(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;AddBackward0&gt;)\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"contact_map\"].shape\ntorch.Size([1, 5, 5, 2])\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForPreTraining(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForPreTraining, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForPreTraining(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;AddBackward0&gt;)\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"contact_map\"].shape\n        torch.Size([1, 5, 5, 2])\n    \"\"\"\n\n    _tied_weights_keys = [\n        \"lm_head.decoder.weight\",\n        \"lm_head.decoder.bias\",\n        \"pretrain.predictions.decoder.weight\",\n        \"pretrain.predictions.decoder.bias\",\n        \"pretrain.predictions_ss.decoder.weight\",\n        \"pretrain.predictions_ss.decoder.bias\",\n    ]\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=False)\n        self.pretrain = RnaMsmPreTrainingHeads(config, weight=self.rnamsm.embeddings.word_embeddings.weight)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels_mlm: Tensor | None = None,\n        labels_contact: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmForPreTrainingOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        total_loss, logits, contact_map = self.pretrain(\n            outputs, attention_mask, input_ids, labels_mlm=labels_mlm, labels_contact=labels_contact\n        )\n\n        if not return_dict:\n            output = (logits, contact_map) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return RnaMsmForPreTrainingOutput(\n            loss=total_loss,\n            logits=logits,\n            contact_map=contact_map,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForSequencePrediction","title":"RnaMsmForSequencePrediction","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForSequencePrediction(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool = False,\n        output_hidden_states: bool = False,\n        return_dict: bool = True,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmSequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return RnaMsmSequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmForTokenPrediction","title":"RnaMsmForTokenPrediction","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmForTokenPrediction(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: RnaMsmConfig):\n        super().__init__(config)\n        self.rnamsm = RnaMsmModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool = False,\n        output_hidden_states: bool = False,\n        return_dict: bool = True,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmTokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.rnamsm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return RnaMsmTokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            col_attentions=outputs.col_attentions,\n            row_attentions=outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmModel","title":"RnaMsmModel","text":"<p>               Bases: <code>RnaMsmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmModel, RnaTokenizer\n&gt;&gt;&gt; config = RnaMsmConfig()\n&gt;&gt;&gt; model = RnaMsmModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 768])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 768])\n</code></pre> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmModel(RnaMsmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaMsmConfig, RnaMsmModel, RnaTokenizer\n        &gt;&gt;&gt; config = RnaMsmConfig()\n        &gt;&gt;&gt; model = RnaMsmModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 768])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 768])\n    \"\"\"\n\n    def __init__(self, config: RnaMsmConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = RnaMsmEmbeddings(config)\n        self.encoder = RnaMsmEncoder(config)\n        self.pooler = RnaMsmPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | RnaMsmModelOutputWithPooling:\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        elif inputs_embeds is None:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id) if self.pad_token_id is not None else torch.ones_like(input_ids)\n            )\n\n        unsqueeze_input = input_ids.ndim == 2\n        if unsqueeze_input:\n            input_ids = input_ids.unsqueeze(1)\n        if attention_mask.ndim == 2:\n            attention_mask = attention_mask.unsqueeze(1)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        if unsqueeze_input:\n            sequence_output = sequence_output.squeeze(1)\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return RnaMsmModelOutputWithPooling(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            hidden_states=encoder_outputs.hidden_states,\n            col_attentions=encoder_outputs.col_attentions,\n            row_attentions=encoder_outputs.row_attentions,\n        )\n</code></pre>"},{"location":"models/rnamsm/#multimolecule.models.rnamsm.RnaMsmPreTrainedModel","title":"RnaMsmPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/rnamsm/modeling_rnamsm.py</code> Python<pre><code>class RnaMsmPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = RnaMsmConfig\n    base_model_prefix = \"rnamsm\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"RnaMsmLayer\", \"RnaMsmAxialLayer\", \"RnaMsmPkmLayer\", \"RnaMsmEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm) and module.elementwise_affine:\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/splicebert/","title":"SpliceBERT","text":"<p>Pre-trained model on messenger RNA precursor (pre-mRNA) using a masked language modeling (MLM) objective.</p>"},{"location":"models/splicebert/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Self-supervised learning on millions of pre-mRNA sequences improves sequence-based RNA splicing prediction by Ken Chen, et al.</p> <p>The OFFICIAL repository of SpliceBERT is at chenkenbio/SpliceBERT.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing SpliceBERT did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/splicebert/#model-details","title":"Model Details","text":"<p>SpliceBERT is a bert-style model pre-trained on a large corpus of messenger RNA precursor sequences in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/splicebert/#variations","title":"Variations","text":"<ul> <li><code>multimolecule/splicebert</code>: The SpliceBERT model.</li> <li><code>multimolecule/splicebert.510nt</code>: The intermediate SpliceBERT model.</li> <li><code>multimolecule/splicebert-human.510nt</code>: The intermediate SpliceBERT model pre-trained on human data only.</li> </ul>"},{"location":"models/splicebert/#model-specification","title":"Model Specification","text":"Variants Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens splicebert 6 512 16 2048 19.72 5.04 2.52 1024 splicebert.510nt 19.45 510 splicebert-human.510nt"},{"location":"models/splicebert/#links","title":"Links","text":"<ul> <li>Code: multimolecule.splicebert</li> <li>Data: UCSC Genome Browser</li> <li>Paper: Self-supervised learning on millions of pre-mRNA sequences improves sequence-based RNA splicing prediction</li> <li>Developed by: Ken Chen, Yue Zhou, Maolin Ding, Yu Wang, Zhixiang Ren, Yuedong Yang</li> <li>Model type: BERT - FlashAttention</li> <li>Original Repository: https://github.com/chenkenbio/SpliceBERT</li> </ul>"},{"location":"models/splicebert/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/splicebert/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/splicebert')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.09095983952283859,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.08519190549850464,\n  'token': 19,\n  'token_str': 'W',\n  'sequence': 'U A G C W U A U C A G A C U G A U G U U G A'},\n {'score': 0.0797896757721901,\n  'token': 9,\n  'token_str': 'U',\n  'sequence': 'U A G C U U A U C A G A C U G A U G U U G A'},\n {'score': 0.06834687292575836,\n  'token': 14,\n  'token_str': 'H',\n  'sequence': 'U A G C H U A U C A G A C U G A U G U U G A'},\n {'score': 0.06398838013410568,\n  'token': 11,\n  'token_str': 'I',\n  'sequence': 'U A G C I U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/splicebert/#downstream-use","title":"Downstream Use","text":""},{"location":"models/splicebert/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, SpliceBertModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/splicebert')\nmodel = SpliceBertModel.from_pretrained('multimolecule/splicebert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/splicebert/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, SpliceBertForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/splicebert')\nmodel = SpliceBertForSequencePrediction.from_pretrained('multimolecule/splicebert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/splicebert/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, SpliceBertForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/splicebert')\nmodel = SpliceBertForNucleotidePrediction.from_pretrained('multimolecule/splicebert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/splicebert/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, SpliceBertForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/splicebert')\nmodel = SpliceBertForContactPrediction.from_pretrained('multimolecule/splicebert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/splicebert/#training-details","title":"Training Details","text":"<p>SpliceBERT used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/splicebert/#training-data","title":"Training Data","text":"<p>The SpliceBERT model was pre-trained on messenger RNA precursor sequences from UCSC Genome Browser. UCSC Genome Browser provides visualization, analysis, and download of comprehensive vertebrate genome data with aligned annotation tracks (known genes, predicted genes, ESTs, mRNAs, CpG islands, etc.).</p> <p>SpliceBERT collected reference genomes and gene annotations from the UCSC Genome Browser for 72 vertebrate species. It applied bedtools getfasta to extract pre-mRNA sequences from the reference genomes based on the gene annotations. The pre-mRNA sequences are then used to pre-train SpliceBERT. The pre-training data contains 2 million pre-mRNA sequences with a total length of 65 billion nucleotides.</p> <p>Note <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/splicebert/#training-procedure","title":"Training Procedure","text":""},{"location":"models/splicebert/#preprocessing","title":"Preprocessing","text":"<p>SpliceBERT used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/splicebert/#pretraining","title":"PreTraining","text":"<p>The model was trained on 8 NVIDIA V100 GPUs.</p> <ul> <li>Learning rate: 1e-4</li> <li>Learning rate scheduler: ReduceLROnPlateau(patience=3)</li> <li>Optimizer: AdamW</li> </ul> <p>SpliceBERT trained model in a two-stage training process:</p> <ol> <li>Pre-train with sequences of a fixed length of 510 nucleotides.</li> <li>Pre-train with sequences of a variable length between 64 and 1024 nucleotides.</li> </ol> <p>The intermediate model after the first stage is available as <code>multimolecule/splicebert.510nt</code>.</p> <p>SpliceBERT also pre-trained a model on human data only to validate the contribution of multi-species pre-training. The intermediate model after the first stage is available as <code>multimolecule/splicebert-human.510nt</code>.</p>"},{"location":"models/splicebert/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article {chen2023self,\n    author = {Chen, Ken and Zhou, Yue and Ding, Maolin and Wang, Yu and Ren, Zhixiang and Yang, Yuedong},\n    title = {Self-supervised learning on millions of pre-mRNA sequences improves sequence-based RNA splicing prediction},\n    elocation-id = {2023.01.31.526427},\n    year = {2023},\n    doi = {10.1101/2023.01.31.526427},\n    publisher = {Cold Spring Harbor Laboratory},\n    abstract = {RNA splicing is an important post-transcriptional process of gene expression in eukaryotic cells. Predicting RNA splicing from primary sequences can facilitate the interpretation of genomic variants. In this study, we developed a novel self-supervised pre-trained language model, SpliceBERT, to improve sequence-based RNA splicing prediction. Pre-training on pre-mRNA sequences from vertebrates enables SpliceBERT to capture evolutionary conservation information and characterize the unique property of splice sites. SpliceBERT also improves zero-shot prediction of variant effects on splicing by considering sequence context information, and achieves superior performance for predicting branchpoint in the human genome and splice sites across species. Our study highlighted the importance of pre-training genomic language models on a diverse range of species and suggested that pre-trained language models were promising for deciphering the sequence logic of RNA splicing.Competing Interest StatementThe authors have declared no competing interest.},\n    URL = {https://www.biorxiv.org/content/early/2023/05/09/2023.01.31.526427},\n    eprint = {https://www.biorxiv.org/content/early/2023/05/09/2023.01.31.526427.full.pdf},\n    journal = {bioRxiv}\n}\n</code></pre>"},{"location":"models/splicebert/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the SpliceBERT paper for questions or comments on the paper/model.</p>"},{"location":"models/splicebert/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert","title":"multimolecule.models.splicebert","text":""},{"location":"models/splicebert/#multimolecule.models.splicebert.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertConfig","title":"SpliceBertConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>SpliceBertModel</code>. It is used to instantiate a SpliceBert model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the SpliceBert biomed-AI/SpliceBERT architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the SpliceBert model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>SpliceBertModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>512</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>6</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>16</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>2048</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1026</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertModel, SpliceBertConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a SpliceBERT multimolecule/splicebert style configuration\n&gt;&gt;&gt; configuration = SpliceBertConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/splicebert style configuration\n&gt;&gt;&gt; model = SpliceBertModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/splicebert/configuration_splicebert.py</code> Python<pre><code>class SpliceBertConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a\n    [`SpliceBertModel`][multimolecule.models.SpliceBertModel]. It is used to instantiate a SpliceBert model according\n    to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will\n    yield a similar configuration to that of the SpliceBert\n    [biomed-AI/SpliceBERT](https://github.com/biomed-AI/SpliceBERT) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the SpliceBert model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`SpliceBertModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertModel, SpliceBertConfig\n\n        &gt;&gt;&gt; # Initializing a SpliceBERT multimolecule/splicebert style configuration\n        &gt;&gt;&gt; configuration = SpliceBertConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/splicebert style configuration\n        &gt;&gt;&gt; model = SpliceBertModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"splicebert\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 512,\n        num_hidden_layers: int = 6,\n        num_attention_heads: int = 16,\n        intermediate_size: int = 2048,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1026,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.type_vocab_size = 2\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertForContactPrediction","title":"SpliceBertForContactPrediction","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertForContactPrediction(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: SpliceBertConfig):\n        super().__init__(config)\n        self.splicebert = SpliceBertModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertForMaskedLM","title":"SpliceBertForMaskedLM","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertForMaskedLM(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.bias\", \"lm_head.decoder.weight\"]\n\n    def __init__(self, config: SpliceBertConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `SpliceBertForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.splicebert = SpliceBertModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.lm_head.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head.decoder = new_embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertForNucleotidePrediction","title":"SpliceBertForNucleotidePrediction","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertForNucleotidePrediction(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: SpliceBertConfig):\n        super().__init__(config)\n        self.splicebert = SpliceBertModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertForSequencePrediction","title":"SpliceBertForSequencePrediction","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertForSequencePrediction(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: SpliceBertConfig):\n        super().__init__(config)\n        self.splicebert = SpliceBertModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertForTokenPrediction","title":"SpliceBertForTokenPrediction","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertForTokenPrediction(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: SpliceBertConfig):\n        super().__init__(config)\n        self.splicebert = SpliceBertModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.splicebert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertModel","title":"SpliceBertModel","text":"<p>               Bases: <code>SpliceBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertModel, RnaTokenizer\n&gt;&gt;&gt; config = SpliceBertConfig()\n&gt;&gt;&gt; model = SpliceBertModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 512])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 512])\n</code></pre> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertModel(SpliceBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import SpliceBertConfig, SpliceBertModel, RnaTokenizer\n        &gt;&gt;&gt; config = SpliceBertConfig()\n        &gt;&gt;&gt; model = SpliceBertModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 512])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 512])\n    \"\"\"\n\n    def __init__(self, config: SpliceBertConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = SpliceBertEmbeddings(config)\n        self.encoder = SpliceBertEncoder(config)\n        self.pooler = SpliceBertPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/splicebert/#multimolecule.models.splicebert.SpliceBertPreTrainedModel","title":"SpliceBertPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/splicebert/modeling_splicebert.py</code> Python<pre><code>class SpliceBertPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = SpliceBertConfig\n    base_model_prefix = \"splicebert\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"SpliceBertLayer\", \"SpliceBertEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n\n    def _set_gradient_checkpointing(self, module, value=False):\n        if isinstance(module, SpliceBertEncoder):\n            module.gradient_checkpointing = value\n</code></pre>"},{"location":"models/utrbert/","title":"3UTRBERT","text":"<p>Pre-trained model on 3\u2019 untranslated region (3\u2019UTR) using a masked language modeling (MLM) objective.</p>"},{"location":"models/utrbert/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the Deciphering 3\u2019 UTR mediated gene regulation using interpretable deep representation learning by Yuning Yang, Gen Li, et al.</p> <p>The OFFICIAL repository of 3UTRBERT is at yangyn533/3UTRBERT.</p> <p>Tip</p> <p>The MultiMolecule team has confirmed that the provided model and checkpoints are producing the same intermediate representations as the original implementation.</p> <p>The team releasing 3UTRBERT did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/utrbert/#model-details","title":"Model Details","text":"<p>3UTRBERT is a bert-style model pre-trained on a large corpus of 3\u2019 untranslated regions (3\u2019UTRs) in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/utrbert/#variations","title":"Variations","text":"<ul> <li><code>multimolecule/utrbert-3mer</code>: The 3UTRBERT model pre-trained on 3-mer data.</li> <li><code>multimolecule/utrbert-4mer</code>: The 3UTRBERT model pre-trained on 4-mer data.</li> <li><code>multimolecule/utrbert-5mer</code>: The 3UTRBERT model pre-trained on 5-mer data.</li> <li><code>multimolecule/utrbert-6mer</code>: The 3UTRBERT model pre-trained on 6-mer data.</li> </ul>"},{"location":"models/utrbert/#model-specification","title":"Model Specification","text":"Variants Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens UTRBERT-3mer 12 768 12 3072 86.14 22.36 11.17 512 UTRBERT-4mer 86.53 UTRBERT-5mer 88.45 UTRBERT-6mer 98.05"},{"location":"models/utrbert/#links","title":"Links","text":"<ul> <li>Code: multimolecule.utrbert</li> <li>Data: GENCODE</li> <li>Paper: Deciphering 3\u2019 UTR mediated gene regulation using interpretable deep representation learning</li> <li>Developed by: Yuning Yang, Gen Li, Kuan Pang, Wuxinhao Cao, Xiangtao Li, Zhaolei Zhang</li> <li>Model type: BERT - FlashAttention</li> <li>Original Repository: https://github.com/yangyn533/3UTRBERT</li> </ul>"},{"location":"models/utrbert/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/utrbert/#direct-use","title":"Direct Use","text":"<p>Note: Default transformers pipeline does not support K-mer tokenization.</p> <p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/utrbert-3mer')\n&gt;&gt;&gt; unmasker(\"uag&lt;mask&gt;&lt;mask&gt;&lt;mask&gt;cagacugauguuga\")[1]\n\n[{'score': 0.6499986052513123,\n  'token': 57,\n  'token_str': 'GAC',\n  'sequence': '&lt;cls&gt; UAG &lt;mask&gt; GAC &lt;mask&gt; CAG AGA GAC ACU CUG UGA GAU AUG UGU GUU UUG UGA &lt;eos&gt;'},\n {'score': 0.07012350112199783,\n  'token': 72,\n  'token_str': 'GUC',\n  'sequence': '&lt;cls&gt; UAG &lt;mask&gt; GUC &lt;mask&gt; CAG AGA GAC ACU CUG UGA GAU AUG UGU GUU UUG UGA &lt;eos&gt;'},\n {'score': 0.06567499041557312,\n  'token': 32,\n  'token_str': 'CAC',\n  'sequence': '&lt;cls&gt; UAG &lt;mask&gt; CAC &lt;mask&gt; CAG AGA GAC ACU CUG UGA GAU AUG UGU GUU UUG UGA &lt;eos&gt;'},\n {'score': 0.06494498997926712,\n  'token': 62,\n  'token_str': 'GCC',\n  'sequence': '&lt;cls&gt; UAG &lt;mask&gt; GCC &lt;mask&gt; CAG AGA GAC ACU CUG UGA GAU AUG UGU GUU UUG UGA &lt;eos&gt;'},\n {'score': 0.06052926927804947,\n  'token': 67,\n  'token_str': 'GGC',\n  'sequence': '&lt;cls&gt; UAG &lt;mask&gt; GGC &lt;mask&gt; CAG AGA GAC ACU CUG UGA GAU AUG UGU GUU UUG UGA &lt;eos&gt;'}]\n</code></pre>"},{"location":"models/utrbert/#downstream-use","title":"Downstream Use","text":""},{"location":"models/utrbert/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, UtrBertModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrbert-3mer')\nmodel = UtrBertModel.from_pretrained('multimolecule/utrbert-3mer')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/utrbert/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrBertForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrbert-3mer')\nmodel = UtrBertForSequencePrediction.from_pretrained('multimolecule/utrbert-3mer')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrbert/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrBertForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrbert-3mer')\nmodel = UtrBertForNucleotidePrediction.from_pretrained('multimolecule/utrbert-3mer')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrbert/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrBertForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrbert')\nmodel = UtrBertForContactPrediction.from_pretrained('multimolecule/utrbert')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrbert/#training-details","title":"Training Details","text":"<p>3UTRBERT used Masked Language Modeling (MLM) as the pre-training objective: taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</p>"},{"location":"models/utrbert/#training-data","title":"Training Data","text":"<p>The 3UTRBERT model was pre-trained on human mRNA transcript sequences from GENCODE. GENCODE aims to identify all gene features in the human genome using a combination of computational analysis, manual annotation, and experimental validation. The GENCODE release 40 used by this work contains 61,544 genes, and 246,624 transcripts.</p> <p>3UTRBERT collected the human mRNA transcript sequences from GENCODE, including 108,573 unique mRNA transcripts. Only the longest transcript of each gene was used in the pre-training process. 3UTRBERT only used the 3\u2019 untranslated regions (3\u2019UTRs) of the mRNA transcripts for pre-training to avoid codon constrains in the CDS region, and to reduce increased complexity of the entire mRNA transcripts. The average length of the 3\u2019UTRs was 1,227 nucleotides, while the median length was 631 nucleotides. Each 3\u2019UTR sequence was cut to non-overlapping patches of 510 nucleotides. The remaining sequences were padded to the same length.</p> <p>Note <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/utrbert/#training-procedure","title":"Training Procedure","text":""},{"location":"models/utrbert/#preprocessing","title":"Preprocessing","text":"<p>3UTRBERT used masked language modeling (MLM) as the pre-training objective. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul> <p>Since 3UTRBERT used k-mer tokenizer, it masks the entire k-mer instead of individual nucleotides to avoid information leakage.</p> <p>For example, if the k-mer is 3, the sequence <code>\"UAGCGUAU\"</code> will be tokenized as <code>[\"UAG\", \"AGC\", \"GCG\", \"CGU\", \"GUA\", \"UAU\"]</code>. If the nucleotide <code>\"C\"</code> is masked, the adjacent tokens will also be masked, resulting <code>[\"UAG\", \"&lt;mask&gt;\", \"&lt;mask&gt;\", \"&lt;mask&gt;\", \"GUA\", \"UAU\"]</code>.</p>"},{"location":"models/utrbert/#pretraining","title":"PreTraining","text":"<p>The model was trained on 4 NVIDIA Quadro RTX 6000 GPUs with 24GiB memories.</p> <ul> <li>Batch size: 128</li> <li>Learning rate: 3e-4</li> <li>Weight decay: 0.01</li> <li>Optimizer: AdamW(\u03b21=0.9, \u03b22=0.98, e=1e-6)</li> <li>Steps: 200,000</li> <li>Learning rate scheduler: Linear</li> <li>Learning rate warm-up: 10,000 steps</li> </ul>"},{"location":"models/utrbert/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article {yang2023deciphering,\n    author = {Yang, Yuning and Li, Gen and Pang, Kuan and Cao, Wuxinhao and Li, Xiangtao and Zhang, Zhaolei},\n    title = {Deciphering 3{\\textquoteright} UTR mediated gene regulation using interpretable deep representation learning},\n    elocation-id = {2023.09.08.556883},\n    year = {2023},\n    doi = {10.1101/2023.09.08.556883},\n    publisher = {Cold Spring Harbor Laboratory},\n    abstract = {The 3{\\textquoteright}untranslated regions (3{\\textquoteright}UTRs) of messenger RNAs contain many important cis-regulatory elements that are under functional and evolutionary constraints. We hypothesize that these constraints are similar to grammars and syntaxes in human languages and can be modeled by advanced natural language models such as Transformers, which has been very effective in modeling protein sequence and structures. Here we describe 3UTRBERT, which implements an attention-based language model, i.e., Bidirectional Encoder Representations from Transformers (BERT). 3UTRBERT was pre-trained on aggregated 3{\\textquoteright}UTR sequences of human mRNAs in a task-agnostic manner; the pre-trained model was then fine-tuned for specific downstream tasks such as predicting RBP binding sites, m6A RNA modification sites, and predicting RNA sub-cellular localizations. Benchmark results showed that 3UTRBERT generally outperformed other contemporary methods in each of these tasks. We also showed that the self-attention mechanism within 3UTRBERT allows direct visualization of the semantic relationship between sequence elements.Competing Interest StatementThe authors have declared no competing interest.},\n    URL = {https://www.biorxiv.org/content/early/2023/09/12/2023.09.08.556883},\n    eprint = {https://www.biorxiv.org/content/early/2023/09/12/2023.09.08.556883.full.pdf},\n    journal = {bioRxiv}\n}\n</code></pre>"},{"location":"models/utrbert/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the 3UTRBERT paper for questions or comments on the paper/model.</p>"},{"location":"models/utrbert/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert","title":"multimolecule.models.utrbert","text":""},{"location":"models/utrbert/#multimolecule.models.utrbert.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertConfig","title":"UtrBertConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>UtrBertModel</code>. It is used to instantiate a 3UTRBERT model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the 3UTRBERT yangyn533/3UTRBERT architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int | None</code> <p>Vocabulary size of the UTRBERT model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>BertModel</code>].</p> <code>None</code> <code>nmers</code> <code>int | None</code> <p>kmer size of the UTRBERT model. Defines the vocabulary size of the model.</p> <code>None</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>768</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>12</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>12</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>3072</code> <code>hidden_act</code> <code>str</code> <p>The non-linear activation function (function or string) in the encoder and pooler. If string, <code>\"gelu\"</code>, <code>\"relu\"</code>, <code>\"silu\"</code> and <code>\"gelu_new\"</code> are supported.</p> <code>'gelu'</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>512</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>position_embedding_type</code> <code>str</code> <p>Type of position embedding. Choose one of <code>\"absolute\"</code>, <code>\"relative_key\"</code>, <code>\"relative_key_query\"</code>. For positional embeddings use <code>\"absolute\"</code>. For more information on <code>\"relative_key\"</code>, please refer to Self-Attention with Relative Position Representations (Shaw et al.). For more information on <code>\"relative_key_query\"</code>, please refer to Method 4 in Improve Transformer Models with Better Relative Position Embeddings (Huang et al.).</p> <code>'absolute'</code> <code>is_decoder</code> <code>bool</code> <p>Whether the model is used as a decoder or not. If <code>False</code>, the model is used as an encoder.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if <code>config.is_decoder=True</code>.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertModel\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a UtrBERT multimolecule/utrbert style configuration\n&gt;&gt;&gt; configuration = UtrBertConfig(vocab_size=26, nmers=1)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/utrbert style configuration\n&gt;&gt;&gt; model = UtrBertModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/utrbert/configuration_utrbert.py</code> Python<pre><code>class UtrBertConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`UtrBertModel`][multimolecule.models.UtrBertModel].\n    It is used to instantiate a 3UTRBERT model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the 3UTRBERT\n    [yangyn533/3UTRBERT](https://github.com/yangyn533/3UTRBERT) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the UTRBERT model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`BertModel`].\n        nmers:\n            kmer size of the UTRBERT model. Defines the vocabulary size of the model.\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act:\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        position_embedding_type:\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        is_decoder:\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache:\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertModel\n\n        &gt;&gt;&gt; # Initializing a UtrBERT multimolecule/utrbert style configuration\n        &gt;&gt;&gt; configuration = UtrBertConfig(vocab_size=26, nmers=1)\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/utrbert style configuration\n        &gt;&gt;&gt; model = UtrBertModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"utrbert\"\n\n    def __init__(\n        self,\n        vocab_size: int | None = None,\n        nmers: int | None = None,\n        hidden_size: int = 768,\n        num_hidden_layers: int = 12,\n        num_attention_heads: int = 12,\n        intermediate_size: int = 3072,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 512,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"absolute\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.type_vocab_size = 2\n        self.nmers = nmers\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertForContactPrediction","title":"UtrBertForContactPrediction","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=1)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n&gt;&gt;&gt; model = UtrBertForContactPrediction(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertForContactPrediction(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=1)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n        &gt;&gt;&gt; model = UtrBertForContactPrediction(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrBertConfig):\n        super().__init__(config)\n        self.utrbert = UtrBertModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrbert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertForMaskedLM","title":"UtrBertForMaskedLM","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForMaskedLM, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n&gt;&gt;&gt; model = UtrBertForMaskedLM(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 6, 31])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertForMaskedLM(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForMaskedLM, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n        &gt;&gt;&gt; model = UtrBertForMaskedLM(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 6, 31])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: UtrBertConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.utrbert = UtrBertModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.lm_head.decoder\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head.decoder = new_embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrbert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertForNucleotidePrediction","title":"UtrBertForNucleotidePrediction","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size, nmers=2)\n&gt;&gt;&gt; model = UtrBertForNucleotidePrediction(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertForNucleotidePrediction(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size, nmers=2)\n        &gt;&gt;&gt; model = UtrBertForNucleotidePrediction(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrBertConfig):\n        super().__init__(config)\n        self.utrbert = UtrBertModel(config, add_pooling_layer=False)\n        self.nucleotide_head = NucleotideKMerHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrbert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertForSequencePrediction","title":"UtrBertForSequencePrediction","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForSequencePrediction, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=4)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n&gt;&gt;&gt; model = UtrBertForSequencePrediction(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertForSequencePrediction(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForSequencePrediction, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=4)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n        &gt;&gt;&gt; model = UtrBertForSequencePrediction(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrBertConfig):\n        super().__init__(config)\n        self.utrbert = UtrBertModel(config)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrbert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertForTokenPrediction","title":"UtrBertForTokenPrediction","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForTokenPrediction, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size, nmers=2)\n&gt;&gt;&gt; model = UtrBertForTokenPrediction(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertForTokenPrediction(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertForTokenPrediction, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=2)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size, nmers=2)\n        &gt;&gt;&gt; model = UtrBertForTokenPrediction(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrBertConfig):\n        super().__init__(config)\n        self.num_labels = config.num_labels\n        self.utrbert = UtrBertModel(config, add_pooling_layer=False)\n        self.token_head = TokenKMerHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrbert(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertModel","title":"UtrBertModel","text":"<p>               Bases: <code>UtrBertPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertModel, RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=1)\n&gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n&gt;&gt;&gt; model = UtrBertModel(config)\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 768])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 768])\n</code></pre> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertModel(UtrBertPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrBertConfig, UtrBertModel, RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=1)\n        &gt;&gt;&gt; config = UtrBertConfig(vocab_size=tokenizer.vocab_size)\n        &gt;&gt;&gt; model = UtrBertModel(config)\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 768])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 768])\n    \"\"\"\n\n    def __init__(self, config: UtrBertConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = UtrBertEmbeddings(config)\n        self.encoder = UtrBertEncoder(config)\n        self.pooler = UtrBertPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/utrbert/#multimolecule.models.utrbert.UtrBertPreTrainedModel","title":"UtrBertPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/utrbert/modeling_utrbert.py</code> Python<pre><code>class UtrBertPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = UtrBertConfig\n    base_model_prefix = \"utrbert\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"UtrBertLayer\", \"UtrBertEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"models/utrlm/","title":"UTR-LM","text":"<p>Pre-trained model on 5\u2019 untranslated region (5\u2019UTR) using masked language modeling (MLM), Secondary Structure (SS), and Minimum Free Energy (MFE) objectives.</p>"},{"location":"models/utrlm/#statement","title":"Statement","text":"<p>A 5\u2019 UTR Language Model for Decoding Untranslated Regions of mRNA and Function Predictions is published in Nature Machine Intelligence, which is a Closed Access / Author-Fee journal.</p> <p>Machine learning has been at the forefront of the movement for free and open access to research.</p> <p>We see no role for closed access or author-fee publication in the future of machine learning research and believe the adoption of these journals as an outlet of record for the machine learning community would be a retrograde step.</p> <p>The MultiMolecule team is committed to the principles of open access and open science.</p> <p>We do NOT endorse the publication of manuscripts in Closed Access / Author-Fee journals and encourage the community to support Open Access journals and conferences.</p> <p>Please consider signing the Statement on Nature Machine Intelligence.</p>"},{"location":"models/utrlm/#disclaimer","title":"Disclaimer","text":"<p>This is an UNOFFICIAL implementation of the A 5\u2019 UTR Language Model for Decoding Untranslated Regions of mRNA and Function Predictions by Yanyi Chu, Dan Yu, et al.</p> <p>The OFFICIAL repository of UTR-LM is at a96123155/UTR-LM.</p> <p>Warning</p> <p>The MultiMolecule team is unable to confirm that the provided model and checkpoints are producing the same intermediate representations as the original implementation. This is because</p> <p>The proposed method is published in a Closed Access / Author-Fee journal.</p> <p>The team releasing UTR-LM did not write this model card for this model so this model card has been written by the MultiMolecule team.</p>"},{"location":"models/utrlm/#model-details","title":"Model Details","text":"<p>UTR-LM is a bert-style model pre-trained on a large corpus of 5\u2019 untranslated regions (5\u2019UTRs) in a self-supervised fashion. This means that the model was trained on the raw nucleotides of RNA sequences only, with an automatic process to generate inputs and labels from those texts. Please refer to the Training Details section for more information on the training process.</p>"},{"location":"models/utrlm/#variations","title":"Variations","text":"<ul> <li><code>multimolecule/utrlm.te_el</code>: The UTR-LM model for Translation Efficiency of transcripts and mRNA Expression Level.</li> <li><code>multimolecule/utrlm.mrl</code>: The UTR-LM model for Mean Ribosome Loading.</li> </ul>"},{"location":"models/utrlm/#model-specification","title":"Model Specification","text":"Variants Num Layers Hidden Size Num Heads Intermediate Size Num Parameters (M) FLOPs (G) MACs (G) Max Num Tokens UTR-LM MRL 6 128 16 512 1.21 0.35 0.18 1022 UTR-LM TE_EL"},{"location":"models/utrlm/#links","title":"Links","text":"<ul> <li>Code: multimolecule.utrlm</li> <li>Data:</li> <li>Ensembl Genome Browser</li> <li>Human 5\u2032 UTR design and variant effect prediction from a massively parallel translation assay</li> <li>High-Throughput 5\u2019 UTR Engineering for Enhanced Protein Production in Non-Viral Gene Therapies</li> <li>Paper: A 5\u2019 UTR Language Model for Decoding Untranslated Regions of mRNA and Function Predictions</li> <li>Developed by: Yanyi Chu, Dan Yu, Yupeng Li, Kaixuan Huang, Yue Shen, Le Cong, Jason Zhang, Mengdi Wang</li> <li>Model type: BERT - ESM</li> <li>Original Repository: https://github.com/a96123155/UTR-LM</li> </ul>"},{"location":"models/utrlm/#usage","title":"Usage","text":"<p>The model file depends on the <code>multimolecule</code> library. You can install it using pip:</p> Bash<pre><code>pip install multimolecule\n</code></pre>"},{"location":"models/utrlm/#direct-use","title":"Direct Use","text":"<p>You can use this model directly with a pipeline for masked language modeling:</p> Python<pre><code>&gt;&gt;&gt; import multimolecule  # you must import multimolecule to register models\n&gt;&gt;&gt; from transformers import pipeline\n&gt;&gt;&gt; unmasker = pipeline('fill-mask', model='multimolecule/utrlm.te_el')\n&gt;&gt;&gt; unmasker(\"uagc&lt;mask&gt;uaucagacugauguuga\")\n\n[{'score': 0.09042543172836304,\n  'token': 11,\n  'token_str': 'I',\n  'sequence': 'U A G C I U A U C A G A C U G A U G U U G A'},\n {'score': 0.07878069579601288,\n  'token': 23,\n  'token_str': '.',\n  'sequence': 'U A G C. U A U C A G A C U G A U G U U G A'},\n {'score': 0.07764176279306412,\n  'token': 5,\n  'token_str': '&lt;null&gt;',\n  'sequence': 'U A G C &lt;null&gt; U A U C A G A C U G A U G U U G A'},\n {'score': 0.07515929639339447,\n  'token': 6,\n  'token_str': 'A',\n  'sequence': 'U A G C A U A U C A G A C U G A U G U U G A'},\n {'score': 0.06679271906614304,\n  'token': 10,\n  'token_str': 'N',\n  'sequence': 'U A G C N U A U C A G A C U G A U G U U G A'}]\n</code></pre>"},{"location":"models/utrlm/#downstream-use","title":"Downstream Use","text":""},{"location":"models/utrlm/#extract-features","title":"Extract Features","text":"<p>Here is how to use this model to get the features of a given sequence in PyTorch:</p> Python<pre><code>from multimolecule import RnaTokenizer, UtrLmModel\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrlm.te_el')\nmodel = UtrLmModel.from_pretrained('multimolecule/utrlm.te_el')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\n\noutput = model(**input)\n</code></pre>"},{"location":"models/utrlm/#sequence-classification-regression","title":"Sequence Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for sequence classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a sequence-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrLmForSequencePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrlm.te_el')\nmodel = UtrLmForSequencePrediction.from_pretrained('multimolecule/utrlm.te_el')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.tensor([1])\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrlm/#nucleotide-classification-regression","title":"Nucleotide Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for nucleotide classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a nucleotide-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrLmForNucleotidePrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrlm.te_el')\nmodel = UtrLmForNucleotidePrediction.from_pretrained('multimolecule/utrlm.te_el')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), ))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrlm/#contact-classification-regression","title":"Contact Classification / Regression","text":"<p>Note: This model is not fine-tuned for any specific task. You will need to fine-tune the model on a downstream task to use it for contact classification or regression.</p> <p>Here is how to use this model as backbone to fine-tune for a contact-level task in PyTorch:</p> Python<pre><code>import torch\nfrom multimolecule import RnaTokenizer, UtrLmForContactPrediction\n\n\ntokenizer = RnaTokenizer.from_pretrained('multimolecule/utrlm')\nmodel = UtrLmForContactPrediction.from_pretrained('multimolecule/utrlm')\n\ntext = \"UAGCUUAUCAGACUGAUGUUGA\"\ninput = tokenizer(text, return_tensors='pt')\nlabel = torch.randint(2, (len(text), len(text)))\n\noutput = model(**input, labels=label)\n</code></pre>"},{"location":"models/utrlm/#training-details","title":"Training Details","text":"<p>UTR-LM used a mixed training strategy with one self-supervised task and two supervised tasks, where the labels of both supervised tasks are calculated using ViennaRNA.</p> <ol> <li>Masked Language Modeling (MLM): taking a sequence, the model randomly masks 15% of the tokens in the input then runs the entire masked sentence through the model and has to predict the masked tokens. This is comparable to the Cloze task in language modeling.</li> <li>Secondary Structure (SS): predicting the secondary structure of the <code>&lt;mask&gt;</code> token in the MLM task.</li> <li>Minimum Free Energy (MFE): predicting the minimum free energy of the 5\u2019 UTR sequence.</li> </ol>"},{"location":"models/utrlm/#training-data","title":"Training Data","text":"<p>The UTR-LM model was pre-trained on 5\u2019 UTR sequences from three sources:</p> <ul> <li>Ensembl Genome Browser: Ensembl is a genome browser for vertebrate genomes that supports research in comparative genomics, evolution, sequence variation and transcriptional regulation. UTR-LM used 5\u2019 UTR sequences from 5 species: human, rat, mouse, chicken, and zebrafish, since these species have high-quality and manual gene annotations.</li> <li>Human 5\u2032 UTR design and variant effect prediction from a massively parallel translation assay: Sample et al. proposed 8 distinct 5\u2019 UTR libraries, each containing random 50 nucleotide sequences, to evaluate translation rules using mean ribosome loading (MRL) measurements.</li> <li>High-Throughput 5\u2019 UTR Engineering for Enhanced Protein Production in Non-Viral Gene Therapies: Cao et al. analyzed endogenous human 5\u2019 UTRs, including data from 3 distinct cell lines/tissues: human embryonic kidney 293T (HEK), human prostate cancer cell (PC3), and human muscle tissue (Muscle).</li> </ul> <p>UTR-LM preprocessed the 5\u2019 UTR sequences in a 4-step pipeline:</p> <ol> <li>removed all coding sequence (CDS) and non-5\u2019 UTR fragments from the raw sequences.</li> <li>identified and removed duplicate sequences</li> <li>truncated the sequences to fit within a range of 30 to 1022 bp</li> <li>filtered out incorrect and low-quality sequences</li> </ol> <p>Note <code>RnaTokenizer</code> will convert \u201cT\u201ds to \u201cU\u201ds for you, you may disable this behaviour by passing <code>replace_T_with_U=False</code>.</p>"},{"location":"models/utrlm/#training-procedure","title":"Training Procedure","text":""},{"location":"models/utrlm/#preprocessing","title":"Preprocessing","text":"<p>UTR-LM used masked language modeling (MLM) as one of the pre-training objectives. The masking procedure is similar to the one used in BERT:</p> <ul> <li>15% of the tokens are masked.</li> <li>In 80% of the cases, the masked tokens are replaced by <code>&lt;mask&gt;</code>.</li> <li>In 10% of the cases, the masked tokens are replaced by a random token (different) from the one they replace.</li> <li>In the 10% remaining cases, the masked tokens are left as is.</li> </ul>"},{"location":"models/utrlm/#pretraining","title":"PreTraining","text":"<p>The model was trained on two clusters:</p> <ol> <li>4 NVIDIA V100 GPUs with 16GiB memories.</li> <li>4 NVIDIA P100 GPUs with 32GiB memories.</li> </ol>"},{"location":"models/utrlm/#citation","title":"Citation","text":"<p>BibTeX:</p> BibTeX<pre><code>@article {chu2023a,\n    author = {Chu, Yanyi and Yu, Dan and Li, Yupeng and Huang, Kaixuan and Shen, Yue and Cong, Le and Zhang, Jason and Wang, Mengdi},\n    title = {A 5{\\textquoteright} UTR Language Model for Decoding Untranslated Regions of mRNA and Function Predictions},\n    elocation-id = {2023.10.11.561938},\n    year = {2023},\n    doi = {10.1101/2023.10.11.561938},\n    publisher = {Cold Spring Harbor Laboratory},\n    abstract = {The 5{\\textquoteright} UTR, a regulatory region at the beginning of an mRNA molecule, plays a crucial role in regulating the translation process and impacts the protein expression level. Language models have showcased their effectiveness in decoding the functions of protein and genome sequences. Here, we introduced a language model for 5{\\textquoteright} UTR, which we refer to as the UTR-LM. The UTR-LM is pre-trained on endogenous 5{\\textquoteright} UTRs from multiple species and is further augmented with supervised information including secondary structure and minimum free energy. We fine-tuned the UTR-LM in a variety of downstream tasks. The model outperformed the best-known benchmark by up to 42\\% for predicting the Mean Ribosome Loading, and by up to 60\\% for predicting the Translation Efficiency and the mRNA Expression Level. The model also applies to identifying unannotated Internal Ribosome Entry Sites within the untranslated region and improves the AUPR from 0.37 to 0.52 compared to the best baseline. Further, we designed a library of 211 novel 5{\\textquoteright} UTRs with high predicted values of translation efficiency and evaluated them via a wet-lab assay. Experiment results confirmed that our top designs achieved a 32.5\\% increase in protein production level relative to well-established 5{\\textquoteright} UTR optimized for therapeutics.Competing Interest StatementThe authors have declared no competing interest.},\n    URL = {https://www.biorxiv.org/content/early/2023/10/14/2023.10.11.561938},\n    eprint = {https://www.biorxiv.org/content/early/2023/10/14/2023.10.11.561938.full.pdf},\n    journal = {bioRxiv}\n}\n</code></pre>"},{"location":"models/utrlm/#contact","title":"Contact","text":"<p>Please use GitHub issues of MultiMolecule for any questions or comments on the model card.</p> <p>Please contact the authors of the UTR-LM paper for questions or comments on the paper/model.</p>"},{"location":"models/utrlm/#license","title":"License","text":"<p>This model is licensed under the AGPL-3.0 License.</p> Text Only<pre><code>SPDX-License-Identifier: AGPL-3.0-or-later\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm","title":"multimolecule.models.utrlm","text":""},{"location":"models/utrlm/#multimolecule.models.utrlm.RnaTokenizer","title":"RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmConfig","title":"UtrLmConfig","text":"<p>               Bases: <code>PreTrainedConfig</code></p> <p>This is the configuration class to store the configuration of a <code>UtrLmModel</code>. It is used to instantiate a UTR-LM model according to the specified arguments, defining the model architecture. Instantiating a configuration with the defaults will yield a similar configuration to that of the UTR-LM a96123155/UTR-LM architecture.</p> <p>Configuration objects inherit from <code>PreTrainedConfig</code> and can be used to control the model outputs. Read the documentation from <code>PreTrainedConfig</code> for more information.</p> <p>Parameters:</p> Name Type Description Default <code>vocab_size</code> <code>int</code> <p>Vocabulary size of the UTR-LM model. Defines the number of different tokens that can be represented by the <code>inputs_ids</code> passed when calling [<code>UtrLmModel</code>].</p> <code>26</code> <code>hidden_size</code> <code>int</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <code>128</code> <code>num_hidden_layers</code> <code>int</code> <p>Number of hidden layers in the Transformer encoder.</p> <code>6</code> <code>num_attention_heads</code> <code>int</code> <p>Number of attention heads for each attention layer in the Transformer encoder.</p> <code>16</code> <code>intermediate_size</code> <code>int</code> <p>Dimensionality of the \u201cintermediate\u201d (often named feed-forward) layer in the Transformer encoder.</p> <code>512</code> <code>hidden_dropout</code> <code>float</code> <p>The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.</p> <code>0.1</code> <code>attention_dropout</code> <code>float</code> <p>The dropout ratio for the attention probabilities.</p> <code>0.1</code> <code>max_position_embeddings</code> <code>int</code> <p>The maximum sequence length that this model might ever be used with. Typically set this to something large just in case (e.g., 512 or 1024 or 2048).</p> <code>1026</code> <code>initializer_range</code> <code>float</code> <p>The standard deviation of the truncated_normal_initializer for initializing all weight matrices.</p> <code>0.02</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>position_embedding_type</code> <code>str</code> <p>Type of position embedding. Choose one of <code>\"absolute\"</code>, <code>\"relative_key\"</code>, <code>\"relative_key_query\", \"rotary\"</code>. For positional embeddings use <code>\"absolute\"</code>. For more information on <code>\"relative_key\"</code>, please refer to Self-Attention with Relative Position Representations (Shaw et al.). For more information on <code>\"relative_key_query\"</code>, please refer to Method 4 in Improve Transformer Models with Better Relative Position Embeddings (Huang et al.).</p> <code>'rotary'</code> <code>is_decoder</code> <code>bool</code> <p>Whether the model is used as a decoder or not. If <code>False</code>, the model is used as an encoder.</p> <code>False</code> <code>use_cache</code> <code>bool</code> <p>Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if <code>config.is_decoder=True</code>.</p> <code>True</code> <code>emb_layer_norm_before</code> <code>bool</code> <p>Whether to apply layer normalization after embeddings but before the main stem of the network.</p> <code>False</code> <code>token_dropout</code> <code>bool</code> <p>When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.</p> <code>False</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmModel, UtrLmConfig\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a UTR-LM multimolecule/utrlm style configuration\n&gt;&gt;&gt; configuration = UtrLmConfig()\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/utrlm style configuration\n&gt;&gt;&gt; model = UtrLmModel(configuration)\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; # Accessing the model configuration\n&gt;&gt;&gt; configuration = model.config\n</code></pre> Source code in <code>multimolecule/models/utrlm/configuration_utrlm.py</code> Python<pre><code>class UtrLmConfig(PreTrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`UtrLmModel`][multimolecule.models.UtrLmModel].\n    It is used to instantiate a UTR-LM model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the UTR-LM\n    [a96123155/UTR-LM](https://github.com/a96123155/UTR-LM) architecture.\n\n    Configuration objects inherit from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig] and can be used to\n    control the model outputs. Read the documentation from [`PreTrainedConfig`][multimolecule.models.PreTrainedConfig]\n    for more information.\n\n    Args:\n        vocab_size:\n            Vocabulary size of the UTR-LM model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`UtrLmModel`].\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers:\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads:\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size:\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_dropout:\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout:\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings:\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range:\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        position_embedding_type:\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\", \"rotary\"`.\n            For positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        is_decoder:\n            Whether the model is used as a decoder or not. If `False`, the model is used as an encoder.\n        use_cache:\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        emb_layer_norm_before:\n            Whether to apply layer normalization after embeddings but before the main stem of the network.\n        token_dropout:\n            When this is enabled, masked tokens are treated as if they had been dropped out by input dropout.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmModel, UtrLmConfig\n\n        &gt;&gt;&gt; # Initializing a UTR-LM multimolecule/utrlm style configuration\n        &gt;&gt;&gt; configuration = UtrLmConfig()\n\n        &gt;&gt;&gt; # Initializing a model (with random weights) from the multimolecule/utrlm style configuration\n        &gt;&gt;&gt; model = UtrLmModel(configuration)\n\n        &gt;&gt;&gt; # Accessing the model configuration\n        &gt;&gt;&gt; configuration = model.config\n    \"\"\"\n\n    model_type = \"utrlm\"\n\n    def __init__(\n        self,\n        vocab_size: int = 26,\n        hidden_size: int = 128,\n        num_hidden_layers: int = 6,\n        num_attention_heads: int = 16,\n        intermediate_size: int = 512,\n        hidden_act: str = \"gelu\",\n        hidden_dropout: float = 0.1,\n        attention_dropout: float = 0.1,\n        max_position_embeddings: int = 1026,\n        initializer_range: float = 0.02,\n        layer_norm_eps: float = 1e-12,\n        position_embedding_type: str = \"rotary\",\n        is_decoder: bool = False,\n        use_cache: bool = True,\n        emb_layer_norm_before: bool = False,\n        token_dropout: bool = False,\n        head: HeadConfig | None = None,\n        lm_head: MaskedLMHeadConfig | None = None,\n        ss_head: HeadConfig | None = None,\n        mfe_head: HeadConfig | None = None,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.intermediate_size = intermediate_size\n        self.hidden_act = hidden_act\n        self.hidden_dropout = hidden_dropout\n        self.attention_dropout = attention_dropout\n        self.max_position_embeddings = max_position_embeddings\n        self.initializer_range = initializer_range\n        self.layer_norm_eps = layer_norm_eps\n        self.position_embedding_type = position_embedding_type\n        self.is_decoder = is_decoder\n        self.use_cache = use_cache\n        self.emb_layer_norm_before = emb_layer_norm_before\n        self.token_dropout = token_dropout\n        self.head = HeadConfig(**head if head is not None else {})\n        self.lm_head = MaskedLMHeadConfig(**lm_head if lm_head is not None else {})\n        self.ss_head = HeadConfig(**ss_head) if ss_head is not None else None\n        self.mfe_head = HeadConfig(**mfe_head) if mfe_head is not None else None\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForContactPrediction","title":"UtrLmForContactPrediction","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmForContactPrediction, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForContactPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForContactPrediction(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmForContactPrediction, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForContactPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 5, 5)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        self.utrlm = UtrLmModel(config, add_pooling_layer=True)\n        self.contact_head = ContactPredictionHead(config)\n        self.head_config = self.contact_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | ContactPredictorOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.contact_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return ContactPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForMaskedLM","title":"UtrLmForMaskedLM","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForMaskedLM(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForMaskedLM(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForMaskedLM(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    _tied_weights_keys = [\"lm_head.decoder.weight\", \"lm_head.decoder.bias\"]\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `UtrLmForMaskedLM` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.utrlm = UtrLmModel(config, add_pooling_layer=False)\n        self.lm_head = MaskedLMHead(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | MaskedLMOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.lm_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return MaskedLMOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForNucleotidePrediction","title":"UtrLmForNucleotidePrediction","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmForNucleotidePrediction, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForNucleotidePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 5, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForNucleotidePrediction(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmForNucleotidePrediction, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForNucleotidePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randn(1, 5, 2))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 5, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        self.utrlm = UtrLmModel(config, add_pooling_layer=True)\n        self.nucleotide_head = NucleotidePredictionHead(config)\n        self.head_config = self.nucleotide_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | NucleotidePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.nucleotide_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return NucleotidePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForPreTraining","title":"UtrLmForPreTraining","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForPreTraining(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;AddBackward0&gt;)\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 26])\n&gt;&gt;&gt; output[\"contact_map\"].shape\ntorch.Size([1, 5, 5, 2])\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForPreTraining(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForPreTraining(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels_mlm=input[\"input_ids\"])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;AddBackward0&gt;)\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 26])\n        &gt;&gt;&gt; output[\"contact_map\"].shape\n        torch.Size([1, 5, 5, 2])\n    \"\"\"\n\n    _tied_weights_keys = [\n        \"lm_head.decoder.weight\",\n        \"lm_head.decoder.bias\",\n        \"pretrain.predictions.decoder.weight\",\n        \"pretrain.predictions.decoder.bias\",\n        \"pretrain.predictions_ss.decoder.weight\",\n        \"pretrain.predictions_ss.decoder.bias\",\n    ]\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        if config.is_decoder:\n            logger.warning(\n                \"If you want to use `UtrLmForPreTraining` make sure `config.is_decoder=False` for \"\n                \"bi-directional self-attention.\"\n            )\n        self.utrlm = UtrLmModel(config, add_pooling_layer=False)\n        self.pretrain = UtrLmPreTrainingHeads(config)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_output_embeddings(self):\n        return self.pretrain.predictions.decoder\n\n    def set_output_embeddings(self, embeddings):\n        self.pretrain.predictions.decoder = embeddings\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        labels_mlm: Tensor | None = None,\n        labels_contact: Tensor | None = None,\n        labels_ss: Tensor | None = None,\n        labels_mfe: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | UtrLmForPreTrainingOutput:\n        if output_attentions is False:\n            warn(\"output_attentions must be True for contact classification and will be ignored.\")\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_attention_mask,\n            output_attentions=True,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        total_loss, logits, contact_map, secondary_structure, minimum_free_energy = self.pretrain(\n            outputs,\n            attention_mask,\n            input_ids,\n            labels_mlm=labels_mlm,\n            labels_contact=labels_contact,\n            labels_ss=labels_ss,\n            labels_mfe=labels_mfe,\n        )\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((total_loss,) + output) if total_loss is not None else output\n\n        return UtrLmForPreTrainingOutput(\n            loss=total_loss,\n            logits=logits,\n            contact_map=contact_map,\n            secondary_structure=secondary_structure,\n            minimum_free_energy=minimum_free_energy,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForSequencePrediction","title":"UtrLmForSequencePrediction","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForSequencePrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForSequencePrediction(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForSequencePrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.tensor([[1]]))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        self.utrlm = UtrLmModel(config, add_pooling_layer=True)\n        self.sequence_head = SequencePredictionHead(config)\n        self.head_config = self.sequence_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | SequencePredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.sequence_head(outputs, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return SequencePredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmForTokenPrediction","title":"UtrLmForTokenPrediction","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmForTokenPrediction(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n&gt;&gt;&gt; output[\"logits\"].shape\ntorch.Size([1, 7, 2])\n&gt;&gt;&gt; output[\"loss\"]\ntensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmForTokenPrediction(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmForTokenPrediction(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input, labels=torch.randint(2, (1, 7)))\n        &gt;&gt;&gt; output[\"logits\"].shape\n        torch.Size([1, 7, 2])\n        &gt;&gt;&gt; output[\"loss\"]  # doctest:+ELLIPSIS\n        tensor(..., grad_fn=&lt;NllLossBackward0&gt;)\n    \"\"\"\n\n    def __init__(self, config: UtrLmConfig):\n        super().__init__(config)\n        self.utrlm = UtrLmModel(config, add_pooling_layer=True)\n        self.token_head = TokenPredictionHead(config)\n        self.head_config = self.token_head.config\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        labels: Tensor | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | TokenPredictorOutput:\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n        outputs = self.utrlm(\n            input_ids,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            head_mask=head_mask,\n            inputs_embeds=inputs_embeds,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            **kwargs,\n        )\n        output = self.token_head(outputs, attention_mask, input_ids, labels)\n        logits, loss = output.logits, output.loss\n\n        if not return_dict:\n            output = (logits,) + outputs[2:]\n            return ((loss,) + output) if loss is not None else output\n\n        return TokenPredictorOutput(\n            loss=loss,\n            logits=logits,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmModel","title":"UtrLmModel","text":"<p>               Bases: <code>UtrLmPreTrainedModel</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n&gt;&gt;&gt; config = UtrLmConfig()\n&gt;&gt;&gt; model = UtrLmModel(config)\n&gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n&gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n&gt;&gt;&gt; output = model(**input)\n&gt;&gt;&gt; output[\"last_hidden_state\"].shape\ntorch.Size([1, 7, 128])\n&gt;&gt;&gt; output[\"pooler_output\"].shape\ntorch.Size([1, 128])\n</code></pre> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmModel(UtrLmPreTrainedModel):\n    \"\"\"\n    Examples:\n        &gt;&gt;&gt; from multimolecule import UtrLmConfig, UtrLmModel, RnaTokenizer\n        &gt;&gt;&gt; config = UtrLmConfig()\n        &gt;&gt;&gt; model = UtrLmModel(config)\n        &gt;&gt;&gt; tokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rna\")\n        &gt;&gt;&gt; input = tokenizer(\"ACGUN\", return_tensors=\"pt\")\n        &gt;&gt;&gt; output = model(**input)\n        &gt;&gt;&gt; output[\"last_hidden_state\"].shape\n        torch.Size([1, 7, 128])\n        &gt;&gt;&gt; output[\"pooler_output\"].shape\n        torch.Size([1, 128])\n    \"\"\"\n\n    def __init__(self, config: UtrLmConfig, add_pooling_layer: bool = True):\n        super().__init__(config)\n        self.pad_token_id = config.pad_token_id\n        self.embeddings = UtrLmEmbeddings(config)\n        self.encoder = UtrLmEncoder(config)\n        self.pooler = UtrLmPooler(config) if add_pooling_layer else None\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embeddings.word_embeddings\n\n    def set_input_embeddings(self, value):\n        self.embeddings.word_embeddings = value\n\n    def _prune_heads(self, heads_to_prune):\n        \"\"\"\n        Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer} See base\n        class PreTrainedModel\n        \"\"\"\n        for layer, heads in heads_to_prune.items():\n            self.encoder.layer[layer].attention.prune_heads(heads)\n\n    def forward(\n        self,\n        input_ids: Tensor | NestedTensor,\n        attention_mask: Tensor | None = None,\n        position_ids: Tensor | None = None,\n        head_mask: Tensor | None = None,\n        inputs_embeds: Tensor | NestedTensor | None = None,\n        encoder_hidden_states: Tensor | None = None,\n        encoder_attention_mask: Tensor | None = None,\n        past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n        use_cache: bool | None = None,\n        output_attentions: bool | None = None,\n        output_hidden_states: bool | None = None,\n        return_dict: bool | None = None,\n        **kwargs,\n    ) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n        r\"\"\"\n        encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n            the model is configured as a decoder.\n        encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n            the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n        past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n            of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n            Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n            If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n            don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n            `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        \"\"\"\n        if kwargs:\n            warn(\n                f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n                f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n                \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n            )\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.config.is_decoder:\n            use_cache = use_cache if use_cache is not None else self.config.use_cache\n        else:\n            use_cache = False\n\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        if input_ids is not None and inputs_embeds is not None:\n            raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n        if input_ids is not None:\n            self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n            input_shape = input_ids.size()\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n        batch_size, seq_length = input_shape\n        device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n        # past_key_values_length\n        past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n        if attention_mask is None:\n            attention_mask = (\n                input_ids.ne(self.pad_token_id)\n                if self.pad_token_id is not None\n                else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n            )\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.config.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        # 1.0 in head_mask indicate we keep the head\n        # attention_probs has shape bsz x n_heads x N x N\n        # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n        # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n        head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n        embedding_output = self.embeddings(\n            input_ids=input_ids,\n            position_ids=position_ids,\n            attention_mask=attention_mask,\n            inputs_embeds=inputs_embeds,\n            past_key_values_length=past_key_values_length,\n        )\n        encoder_outputs = self.encoder(\n            embedding_output,\n            attention_mask=extended_attention_mask,\n            head_mask=head_mask,\n            encoder_hidden_states=encoder_hidden_states,\n            encoder_attention_mask=encoder_extended_attention_mask,\n            past_key_values=past_key_values,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n        sequence_output = encoder_outputs[0]\n        pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n        if not return_dict:\n            return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n        return BaseModelOutputWithPoolingAndCrossAttentions(\n            last_hidden_state=sequence_output,\n            pooler_output=pooled_output,\n            past_key_values=encoder_outputs.past_key_values,\n            hidden_states=encoder_outputs.hidden_states,\n            attentions=encoder_outputs.attentions,\n            cross_attentions=encoder_outputs.cross_attentions,\n        )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmModel.forward","title":"forward","text":"Python<pre><code>forward(input_ids: Tensor | NestedTensor, attention_mask: Tensor | None = None, position_ids: Tensor | None = None, head_mask: Tensor | None = None, inputs_embeds: Tensor | NestedTensor | None = None, encoder_hidden_states: Tensor | None = None, encoder_attention_mask: Tensor | None = None, past_key_values: Tuple[Tuple[FloatTensor, FloatTensor], ...] | None = None, use_cache: bool | None = None, output_attentions: bool | None = None, output_hidden_states: bool | None = None, return_dict: bool | None = None, **kwargs) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions\n</code></pre> <p>encoder_hidden_states  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, optional):     Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if     the model is configured as a decoder. encoder_attention_mask (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, optional):     Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in     the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p> Text Only<pre><code>- 1 for tokens that are **not masked**,\n- 0 for tokens that are **masked**.\n</code></pre> <p>past_key_values (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors     of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>):     Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p> Text Only<pre><code>If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\ndon't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n`decoder_input_ids` of shape `(batch_size, sequence_length)`.\n</code></pre> <p>use_cache (<code>bool</code>, optional):     If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see     <code>past_key_values</code>).</p> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>def forward(\n    self,\n    input_ids: Tensor | NestedTensor,\n    attention_mask: Tensor | None = None,\n    position_ids: Tensor | None = None,\n    head_mask: Tensor | None = None,\n    inputs_embeds: Tensor | NestedTensor | None = None,\n    encoder_hidden_states: Tensor | None = None,\n    encoder_attention_mask: Tensor | None = None,\n    past_key_values: Tuple[Tuple[torch.FloatTensor, torch.FloatTensor], ...] | None = None,\n    use_cache: bool | None = None,\n    output_attentions: bool | None = None,\n    output_hidden_states: bool | None = None,\n    return_dict: bool | None = None,\n    **kwargs,\n) -&gt; Tuple[Tensor, ...] | BaseModelOutputWithPoolingAndCrossAttentions:\n    r\"\"\"\n    encoder_hidden_states  (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n        Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if\n        the model is configured as a decoder.\n    encoder_attention_mask (`torch.FloatTensor` of shape `(batch_size, sequence_length)`, *optional*):\n        Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in\n        the cross-attention if the model is configured as a decoder. Mask values selected in `[0, 1]`:\n\n        - 1 for tokens that are **not masked**,\n        - 0 for tokens that are **masked**.\n    past_key_values (`tuple(tuple(torch.FloatTensor))` of length `config.n_layers` with each tuple having 4 tensors\n        of shape `(batch_size, num_heads, sequence_length - 1, embed_size_per_head)`):\n        Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.\n\n        If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids` (those that\n        don't have their past key value states given to this model) of shape `(batch_size, 1)` instead of all\n        `decoder_input_ids` of shape `(batch_size, sequence_length)`.\n    use_cache (`bool`, *optional*):\n        If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n        `past_key_values`).\n    \"\"\"\n    if kwargs:\n        warn(\n            f\"Additional keyword arguments `{', '.join(kwargs)}` are detected in \"\n            f\"`{self.__class__.__name__}.forward`, they will be ignored.\\n\"\n            \"This is provided for backward compatibility and may lead to unexpected behavior.\"\n        )\n    output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n    output_hidden_states = (\n        output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n    )\n    return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n    if self.config.is_decoder:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n    else:\n        use_cache = False\n\n    if isinstance(input_ids, NestedTensor):\n        input_ids, attention_mask = input_ids.tensor, input_ids.mask\n    if input_ids is not None and inputs_embeds is not None:\n        raise ValueError(\"You cannot specify both input_ids and inputs_embeds at the same time\")\n    if input_ids is not None:\n        self.warn_if_padding_and_no_attention_mask(input_ids, attention_mask)\n        input_shape = input_ids.size()\n    elif inputs_embeds is not None:\n        input_shape = inputs_embeds.size()[:-1]\n    else:\n        raise ValueError(\"You have to specify either input_ids or inputs_embeds\")\n\n    batch_size, seq_length = input_shape\n    device = input_ids.device if input_ids is not None else inputs_embeds.device  # type: ignore[union-attr]\n\n    # past_key_values_length\n    past_key_values_length = past_key_values[0][0].shape[2] if past_key_values is not None else 0\n\n    if attention_mask is None:\n        attention_mask = (\n            input_ids.ne(self.pad_token_id)\n            if self.pad_token_id is not None\n            else torch.ones(((batch_size, seq_length + past_key_values_length)), device=device)\n        )\n\n    # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n    # ourselves in which case we just need to make it broadcastable to all heads.\n    extended_attention_mask: Tensor = self.get_extended_attention_mask(attention_mask, input_shape)\n\n    # If a 2D or 3D attention mask is provided for the cross-attention\n    # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n    if self.config.is_decoder and encoder_hidden_states is not None:\n        encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n        encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n        if encoder_attention_mask is None:\n            encoder_attention_mask = torch.ones(encoder_hidden_shape, device=device)\n        encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n    else:\n        encoder_extended_attention_mask = None\n\n    # Prepare head mask if needed\n    # 1.0 in head_mask indicate we keep the head\n    # attention_probs has shape bsz x n_heads x N x N\n    # input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]\n    # and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]\n    head_mask = self.get_head_mask(head_mask, self.config.num_hidden_layers)\n\n    embedding_output = self.embeddings(\n        input_ids=input_ids,\n        position_ids=position_ids,\n        attention_mask=attention_mask,\n        inputs_embeds=inputs_embeds,\n        past_key_values_length=past_key_values_length,\n    )\n    encoder_outputs = self.encoder(\n        embedding_output,\n        attention_mask=extended_attention_mask,\n        head_mask=head_mask,\n        encoder_hidden_states=encoder_hidden_states,\n        encoder_attention_mask=encoder_extended_attention_mask,\n        past_key_values=past_key_values,\n        use_cache=use_cache,\n        output_attentions=output_attentions,\n        output_hidden_states=output_hidden_states,\n        return_dict=return_dict,\n    )\n    sequence_output = encoder_outputs[0]\n    pooled_output = self.pooler(sequence_output) if self.pooler is not None else None\n\n    if not return_dict:\n        return (sequence_output, pooled_output) + encoder_outputs[1:]\n\n    return BaseModelOutputWithPoolingAndCrossAttentions(\n        last_hidden_state=sequence_output,\n        pooler_output=pooled_output,\n        past_key_values=encoder_outputs.past_key_values,\n        hidden_states=encoder_outputs.hidden_states,\n        attentions=encoder_outputs.attentions,\n        cross_attentions=encoder_outputs.cross_attentions,\n    )\n</code></pre>"},{"location":"models/utrlm/#multimolecule.models.utrlm.UtrLmPreTrainedModel","title":"UtrLmPreTrainedModel","text":"<p>               Bases: <code>PreTrainedModel</code></p> <p>An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.</p> Source code in <code>multimolecule/models/utrlm/modeling_utrlm.py</code> Python<pre><code>class UtrLmPreTrainedModel(PreTrainedModel):\n    \"\"\"\n    An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained\n    models.\n    \"\"\"\n\n    config_class = UtrLmConfig\n    base_model_prefix = \"utrlm\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"UtrLmLayer\", \"UtrLmEmbeddings\"]\n\n    # Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights\n    def _init_weights(self, module: nn.Module):\n        \"\"\"Initialize the weights\"\"\"\n        if isinstance(module, nn.Linear):\n            # Slightly different from the TF version which uses truncated_normal for initialization\n            # cf https://github.com/pytorch/pytorch/pull/5617\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n</code></pre>"},{"location":"module/","title":"module","text":"<p><code>module</code> provides a collection of pre-defined modules for users to implement their own architectures.</p> <p>MultiMolecule is built upon the  ecosystem, embracing a similar design philosophy: Don\u2019t Repeat Yourself. We follow the <code>single model file policy</code> where each model under the <code>models</code> package contains one and only one <code>modeling.py</code> file that describes the network design.</p> <p>The <code>module</code> package is intended for simple, reusable modules that are consistent across multiple models. This approach minimizes code duplication and promotes clean, maintainable code.</p>"},{"location":"module/#key-features","title":"Key Features","text":"<ul> <li>Reusability: The <code>module</code> package includes components that are commonly used across different models, such as the <code>SequencePredictionHead</code>. This reduces redundancy and simplifies the development process.</li> <li>Consistency: By centralizing common modules, we ensure that updates and improvements are consistently applied across all models, enhancing reliability and performance.</li> <li>Flexibility: While modules such as transformer encoders are widely used, they often vary in implementation details (e.g., pre-norm vs. post-norm, different residual connection strategies). The module package focuses on simpler components, leaving complex, model-specific variations to be defined within each model\u2019s <code>modeling.py</code>.</li> </ul>"},{"location":"module/#modules","title":"Modules","text":"<ul> <li>heads: Contains various prediction heads, such as <code>SequencePredictionHead</code>, <code>NucleotidePredictionHead</code>, and <code>ContactPredictionHead</code>.</li> <li>embeddings: Contains various positional embeddings, such as <code>SinusoidalEmbedding</code> and <code>RotaryEmbedding</code>.</li> </ul>"},{"location":"module/embeddings/","title":"embeddings","text":"<p><code>embeddings</code> provide a collection of pre-defined positional embeddings.</p>"},{"location":"module/embeddings/#multimolecule.module.embeddings","title":"multimolecule.module.embeddings","text":""},{"location":"module/embeddings/#multimolecule.module.embeddings.RotaryEmbedding","title":"RotaryEmbedding","text":"<p>               Bases: <code>Module</code></p> <p>Rotary position embeddings based on those in RoFormer.</p> <p>Query and keys are transformed by rotation matrices which depend on their relative positions.</p> Cache <p>The inverse frequency buffer is cached and updated only when the sequence length changes or the device changes.</p> Sequence Length <p>Rotary Embedding is irrespective of the sequence length and can be used for any sequence length.</p> Source code in <code>multimolecule/module/embeddings/rotary.py</code> Python<pre><code>@PositionEmbeddingRegistry.register(\"rotary\")\n@PositionEmbeddingRegistryHF.register(\"rotary\")\nclass RotaryEmbedding(nn.Module):\n    \"\"\"\n    Rotary position embeddings based on those in\n    [RoFormer](https://huggingface.co/docs/transformers/model_doc/roformer).\n\n    Query and keys are transformed by rotation\n    matrices which depend on their relative positions.\n\n    Tip: **Cache**\n        The inverse frequency buffer is cached and updated only when the sequence length changes or the device changes.\n\n    Success: **Sequence Length**\n        Rotary Embedding is irrespective of the sequence length and can be used for any sequence length.\n    \"\"\"\n\n    def __init__(self, embedding_dim: int):\n        super().__init__()\n        # Generate and save the inverse frequency buffer (non trainable)\n        inv_freq = 1.0 / (10000 ** (torch.arange(0, embedding_dim, 2, dtype=torch.int64).float() / embedding_dim))\n        self.register_buffer(\"inv_freq\", inv_freq)\n\n        self._seq_len_cached = None\n        self._cos_cached = None\n        self._sin_cached = None\n\n    def forward(self, q: Tensor, k: Tensor) -&gt; Tuple[Tensor, Tensor]:\n        self._update_cos_sin_tables(k, seq_dimension=-2)\n\n        return (self.apply_rotary_pos_emb(q), self.apply_rotary_pos_emb(k))\n\n    def _update_cos_sin_tables(self, x, seq_dimension=2):\n        seq_len = x.shape[seq_dimension]\n\n        # Reset the tables if the sequence length has changed,\n        # or if we're on a new device (possibly due to tracing for instance)\n        if seq_len != self._seq_len_cached or self._cos_cached.device != x.device:\n            self._seq_len_cached = seq_len\n            t = torch.arange(x.shape[seq_dimension], device=x.device).type_as(self.inv_freq)\n            freqs = torch.outer(t, self.inv_freq)\n            emb = torch.cat((freqs, freqs), dim=-1).to(x.device)\n\n            self._cos_cached = emb.cos()[None, None, :, :]\n            self._sin_cached = emb.sin()[None, None, :, :]\n\n        return self._cos_cached, self._sin_cached\n\n    def apply_rotary_pos_emb(self, x):\n        cos = self._cos_cached[:, :, : x.shape[-2], :]\n        sin = self._sin_cached[:, :, : x.shape[-2], :]\n\n        return (x * cos) + (self.rotate_half(x) * sin)\n\n    @staticmethod\n    def rotate_half(x):\n        x1, x2 = x.chunk(2, dim=-1)\n        return torch.cat((-x2, x1), dim=-1)\n</code></pre>"},{"location":"module/embeddings/#multimolecule.module.embeddings.SinusoidalEmbedding","title":"SinusoidalEmbedding","text":"<p>               Bases: <code>Embedding</code></p> <p>Sinusoidal positional embeddings for inputs with any length.</p> Freezing <p>The embeddings are frozen and cannot be trained. They will not be saved in the model\u2019s state_dict.</p> Padding Idx <p>Padding symbols are ignored if the padding_idx is specified.</p> Sequence Length <p>These embeddings get automatically extended in forward if more positions is needed.</p> Source code in <code>multimolecule/module/embeddings/sinusoidal.py</code> Python<pre><code>@PositionEmbeddingRegistry.register(\"sinusoidal\")\n@PositionEmbeddingRegistryHF.register(\"sinusoidal\")\nclass SinusoidalEmbedding(nn.Embedding):\n    r\"\"\"\n    Sinusoidal positional embeddings for inputs with any length.\n\n    Note: **Freezing**\n        The embeddings are frozen and cannot be trained.\n        They will not be saved in the model's state_dict.\n\n    Tip: **Padding Idx**\n        Padding symbols are ignored if the padding_idx is specified.\n\n    Success: **Sequence Length**\n        These embeddings get automatically extended in forward if more positions is needed.\n    \"\"\"\n\n    _is_hf_initialized = True\n\n    def __init__(self, num_embeddings: int, embedding_dim: int, padding_idx: int | None = None, bias: int = 0):\n        weight = self.get_embedding(num_embeddings, embedding_dim, padding_idx)\n        super().__init__(num_embeddings, embedding_dim, padding_idx, _weight=weight.detach(), _freeze=True)\n        self.bias = bias\n\n    def update_weight(self, num_embeddings: int, embedding_dim: int, padding_idx: int | None = None):\n        weight = self.get_embedding(num_embeddings, embedding_dim, padding_idx).to(\n            dtype=self.weight.dtype, device=self.weight.device  # type: ignore[has-type]\n        )\n        self.weight = nn.Parameter(weight.detach(), requires_grad=False)\n\n    @staticmethod\n    def get_embedding(num_embeddings: int, embedding_dim: int, padding_idx: int | None = None) -&gt; Tensor:\n        \"\"\"\n        Build sinusoidal embeddings.\n\n        This matches the implementation in tensor2tensor, but differs slightly from the description in Section 3.5 of\n        \"Attention Is All You Need\".\n        \"\"\"\n        half_dim = embedding_dim // 2\n        emb = torch.exp(torch.arange(half_dim, dtype=torch.float) * -(math.log(10000) / (half_dim - 1)))\n        emb = torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)\n        emb = torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)\n        if embedding_dim % 2 == 1:\n            # zero pad\n            emb = torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)\n        if padding_idx is not None:\n            emb[padding_idx, :] = 0\n        return emb\n\n    @staticmethod\n    def get_position_ids(tensor, padding_idx: int | None = None):\n        \"\"\"\n        Replace non-padding symbols with their position numbers.\n\n        Position numbers begin at padding_idx+1. Padding symbols are ignored.\n        \"\"\"\n        # The series of casts and type-conversions here are carefully\n        # balanced to both work with ONNX export and XLA. In particular XLA\n        # prefers ints, cumsum defaults to output longs, and ONNX doesn't know\n        # how to handle the dtype kwarg in cumsum.\n        if padding_idx is None:\n            return torch.cumsum(tensor.new_ones(tensor.size(1)).long(), dim=0) - 1\n        mask = tensor.ne(padding_idx).int()\n        return (torch.cumsum(mask, dim=1).type_as(mask) * mask).long() + padding_idx\n\n    def forward(self, input_ids: Tensor) -&gt; Tensor:\n        _, seq_len = input_ids.shape[:2]\n        # expand embeddings if needed\n        max_pos = seq_len + self.bias + 1\n        if self.padding_idx is not None:\n            max_pos += self.padding_idx\n        if max_pos &gt; self.weight.size(0):\n            self.update_weight(max_pos, self.embedding_dim, self.padding_idx)\n        # Need to shift the position ids by the padding index\n        position_ids = self.get_position_ids(input_ids, self.padding_idx) + self.bias\n        return super().forward(position_ids)\n\n    def state_dict(self, destination=None, prefix=\"\", keep_vars=False):\n        return {}\n\n    def load_state_dict(self, *args, state_dict, strict=True):\n        return\n\n    def _load_from_state_dict(\n        self, state_dict, prefix, local_metadata, strict, missing_keys, unexpected_keys, error_msgs\n    ):\n        return\n</code></pre>"},{"location":"module/embeddings/#multimolecule.module.embeddings.SinusoidalEmbedding.get_embedding","title":"get_embedding  <code>staticmethod</code>","text":"Python<pre><code>get_embedding(num_embeddings: int, embedding_dim: int, padding_idx: int | None = None) -&gt; Tensor\n</code></pre> <p>Build sinusoidal embeddings.</p> <p>This matches the implementation in tensor2tensor, but differs slightly from the description in Section 3.5 of \u201cAttention Is All You Need\u201d.</p> Source code in <code>multimolecule/module/embeddings/sinusoidal.py</code> Python<pre><code>@staticmethod\ndef get_embedding(num_embeddings: int, embedding_dim: int, padding_idx: int | None = None) -&gt; Tensor:\n    \"\"\"\n    Build sinusoidal embeddings.\n\n    This matches the implementation in tensor2tensor, but differs slightly from the description in Section 3.5 of\n    \"Attention Is All You Need\".\n    \"\"\"\n    half_dim = embedding_dim // 2\n    emb = torch.exp(torch.arange(half_dim, dtype=torch.float) * -(math.log(10000) / (half_dim - 1)))\n    emb = torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)\n    emb = torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)\n    if embedding_dim % 2 == 1:\n        # zero pad\n        emb = torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)\n    if padding_idx is not None:\n        emb[padding_idx, :] = 0\n    return emb\n</code></pre>"},{"location":"module/embeddings/#multimolecule.module.embeddings.SinusoidalEmbedding.get_position_ids","title":"get_position_ids  <code>staticmethod</code>","text":"Python<pre><code>get_position_ids(tensor, padding_idx: int | None = None)\n</code></pre> <p>Replace non-padding symbols with their position numbers.</p> <p>Position numbers begin at padding_idx+1. Padding symbols are ignored.</p> Source code in <code>multimolecule/module/embeddings/sinusoidal.py</code> Python<pre><code>@staticmethod\ndef get_position_ids(tensor, padding_idx: int | None = None):\n    \"\"\"\n    Replace non-padding symbols with their position numbers.\n\n    Position numbers begin at padding_idx+1. Padding symbols are ignored.\n    \"\"\"\n    # The series of casts and type-conversions here are carefully\n    # balanced to both work with ONNX export and XLA. In particular XLA\n    # prefers ints, cumsum defaults to output longs, and ONNX doesn't know\n    # how to handle the dtype kwarg in cumsum.\n    if padding_idx is None:\n        return torch.cumsum(tensor.new_ones(tensor.size(1)).long(), dim=0) - 1\n    mask = tensor.ne(padding_idx).int()\n    return (torch.cumsum(mask, dim=1).type_as(mask) * mask).long() + padding_idx\n</code></pre>"},{"location":"module/heads/","title":"heads","text":"<p><code>heads</code> provide a collection of pre-defined prediction heads.</p> <p><code>heads</code> take in either a <code>ModelOutupt</code>, a <code>dict</code>, or a <code>tuple</code> as input. It automatically looks for the model output required for prediction and processes it accordingly.</p> <p>Some prediction heads may require additional information, such as the <code>attention_mask</code> or the <code>input_ids</code>, like <code>ContactPredictionHead</code>. These additional arguments can be passed in as arguments/keyword arguments.</p> <p>Note that <code>heads</code> use the same <code>ModelOutupt</code> conventions as the  Transformers. If the model output is a <code>tuple</code>, we consider the first element as the <code>pooler_output</code>, the second element as the <code>last_hidden_state</code>, and the last element as the <code>attention_map</code>. It is the user\u2019s responsibility to ensure that the model output is correctly formatted.</p> <p>If the model output is a <code>ModelOutupt</code> or a <code>dict</code>, the <code>heads</code> will look for the <code>HeadConfig.output_name</code> from the model output. You can specify the <code>output_name</code> in the <code>HeadConfig</code> to ensure that the <code>heads</code> can correctly locate the required tensor.</p>"},{"location":"module/heads/#multimolecule.module.heads.config","title":"multimolecule.module.heads.config","text":""},{"location":"module/heads/#multimolecule.module.heads.config.HeadConfig","title":"HeadConfig  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHeadConfig</code></p> <p>Configuration class for a prediction head.</p> <p>Parameters:</p> Name Type Description Default <code>num_labels</code> <code>int</code> <p>Number of labels to use in the last layer added to the model, typically for a classification task.</p> <p>Head should look for <code>Config.num_labels</code> if is <code>None</code>.</p> <code>None</code> <code>problem_type</code> <code>str</code> <p>Problem type for <code>XxxForYyyPrediction</code> models. Can be one of <code>\"regression\"</code>, <code>\"single_label_classification\"</code> or <code>\"multi_label_classification\"</code>.</p> <p>Head should look for <code>Config.problem_type</code> if is <code>None</code>.</p> <code>None</code> <code>hidden_size</code> <code>int | None</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <p>Head should look for <code>Config.hidden_size</code> if is <code>None</code>.</p> <code>None</code> <code>dropout</code> <code>float</code> <p>The dropout ratio for the hidden states.</p> <code>0.0</code> <code>transform</code> <code>str | None</code> <p>The transform operation applied to hidden states.</p> <code>None</code> <code>transform_act</code> <code>str | None</code> <p>The activation function of transform applied to hidden states.</p> <code>'gelu'</code> <code>bias</code> <code>bool</code> <p>Whether to apply bias to the final prediction layer.</p> <code>True</code> <code>act</code> <code>str | None</code> <p>The activation function of the final prediction output.</p> <code>None</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>output_name</code> <code>`str`, *optional*</code> <p>The name of the tensor required in model outputs.</p> <p>If is <code>None</code>, will use the default output name of the corresponding head.</p> <code>None</code> Source code in <code>multimolecule/module/heads/config.py</code> Python<pre><code>@dataclass\nclass HeadConfig(BaseHeadConfig):\n    r\"\"\"\n    Configuration class for a prediction head.\n\n    Args:\n        num_labels:\n            Number of labels to use in the last layer added to the model, typically for a classification task.\n\n            Head should look for [`Config.num_labels`][multimolecule.PreTrainedConfig] if is `None`.\n        problem_type:\n            Problem type for `XxxForYyyPrediction` models. Can be one of `\"regression\"`,\n            `\"single_label_classification\"` or `\"multi_label_classification\"`.\n\n            Head should look for [`Config.problem_type`][multimolecule.PreTrainedConfig] if is `None`.\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n\n            Head should look for [`Config.hidden_size`][multimolecule.PreTrainedConfig] if is `None`.\n        dropout:\n            The dropout ratio for the hidden states.\n        transform:\n            The transform operation applied to hidden states.\n        transform_act:\n            The activation function of transform applied to hidden states.\n        bias:\n            Whether to apply bias to the final prediction layer.\n        act:\n            The activation function of the final prediction output.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        output_name (`str`, *optional*):\n            The name of the tensor required in model outputs.\n\n            If is `None`, will use the default output name of the corresponding head.\n    \"\"\"\n\n    num_labels: int = None  # type: ignore[assignment]\n    problem_type: str = None  # type: ignore[assignment]\n    hidden_size: int | None = None\n    dropout: float = 0.0\n    transform: str | None = None\n    transform_act: str | None = \"gelu\"\n    bias: bool = True\n    act: str | None = None\n    layer_norm_eps: float = 1e-12\n    output_name: str | None = None\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.config.MaskedLMHeadConfig","title":"MaskedLMHeadConfig  <code>dataclass</code>","text":"<p>               Bases: <code>BaseHeadConfig</code></p> <p>Configuration class for a Masked Language Modeling head.</p> <p>Parameters:</p> Name Type Description Default <code>hidden_size</code> <code>int | None</code> <p>Dimensionality of the encoder layers and the pooler layer.</p> <p>Head should look for <code>Config.hidden_size</code> if is <code>None</code>.</p> <code>None</code> <code>dropout</code> <code>float</code> <p>The dropout ratio for the hidden states.</p> <code>0.0</code> <code>transform</code> <code>str | None</code> <p>The transform operation applied to hidden states.</p> <code>'nonlinear'</code> <code>transform_act</code> <code>str | None</code> <p>The activation function of transform applied to hidden states.</p> <code>'gelu'</code> <code>bias</code> <code>bool</code> <p>Whether to apply bias to the final prediction layer.</p> <code>True</code> <code>act</code> <code>str | None</code> <p>The activation function of the final prediction output.</p> <code>None</code> <code>layer_norm_eps</code> <code>float</code> <p>The epsilon used by the layer normalization layers.</p> <code>1e-12</code> <code>output_name</code> <code>`str`, *optional*</code> <p>The name of the tensor required in model outputs.</p> <p>If is <code>None</code>, will use the default output name of the corresponding head.</p> <code>None</code> Source code in <code>multimolecule/module/heads/config.py</code> Python<pre><code>@dataclass\nclass MaskedLMHeadConfig(BaseHeadConfig):\n    r\"\"\"\n    Configuration class for a Masked Language Modeling head.\n\n    Args:\n        hidden_size:\n            Dimensionality of the encoder layers and the pooler layer.\n\n            Head should look for [`Config.hidden_size`][multimolecule.PreTrainedConfig] if is `None`.\n        dropout:\n            The dropout ratio for the hidden states.\n        transform:\n            The transform operation applied to hidden states.\n        transform_act:\n            The activation function of transform applied to hidden states.\n        bias:\n            Whether to apply bias to the final prediction layer.\n        act:\n            The activation function of the final prediction output.\n        layer_norm_eps:\n            The epsilon used by the layer normalization layers.\n        output_name (`str`, *optional*):\n            The name of the tensor required in model outputs.\n\n            If is `None`, will use the default output name of the corresponding head.\n    \"\"\"\n\n    hidden_size: int | None = None\n    dropout: float = 0.0\n    transform: str | None = \"nonlinear\"\n    transform_act: str | None = \"gelu\"\n    bias: bool = True\n    act: str | None = None\n    layer_norm_eps: float = 1e-12\n    output_name: str | None = None\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.sequence","title":"multimolecule.module.heads.sequence","text":""},{"location":"module/heads/#multimolecule.module.heads.sequence.SequencePredictionHead","title":"SequencePredictionHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in sequence-level.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/sequence.py</code> Python<pre><code>@HeadRegistry.register(\"sequence\")\nclass SequencePredictionHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in sequence-level.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"pooler_output\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self, outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the SequencePredictionHead.\n\n        Args:\n            outputs: The outputs of the model.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[1]\n        return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.sequence.SequencePredictionHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'pooler_output'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.sequence.SequencePredictionHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the SequencePredictionHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/sequence.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self, outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the SequencePredictionHead.\n\n    Args:\n        outputs: The outputs of the model.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[1]\n    return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide","title":"multimolecule.module.heads.nucleotide","text":""},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotidePredictionHead","title":"NucleotidePredictionHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in nucleotide-level.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/nucleotide.py</code> Python<pre><code>@HeadRegistry.register(\"nucleotide.single\")\n@NucleotideHeadRegistryHF.register(\"single\", default=True)\nclass NucleotidePredictionHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in nucleotide-level.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"last_hidden_state\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        self.bos_token_id = config.bos_token_id\n        self.eos_token_id = config.eos_token_id\n        self.pad_token_id = config.pad_token_id\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self,\n        outputs: ModelOutput | Tuple[Tensor, ...],\n        attention_mask: Tensor | None = None,\n        input_ids: NestedTensor | Tensor | None = None,\n        labels: Tensor | None = None,\n        output_name: str | None = None,\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the NucleotidePredictionHead.\n\n        Args:\n            outputs: The outputs of the model.\n            attention_mask: The attention mask for the inputs.\n            input_ids: The input ids for the inputs.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if attention_mask is None:\n            if isinstance(input_ids, NestedTensor):\n                input_ids, attention_mask = input_ids.tensor, input_ids.mask\n            else:\n                if input_ids is None:\n                    raise ValueError(\n                        f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                    )\n                if self.pad_token_id is None:\n                    raise ValueError(\n                        f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                    )\n                attention_mask = input_ids.ne(self.pad_token_id)\n\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[0]\n        output *= attention_mask.unsqueeze(-1)\n\n        # remove cls token embeddings\n        if self.bos_token_id is not None:\n            output = output[..., 1:, :]\n            # process attention_mask and input_ids to make removal of eos token happy\n            attention_mask = attention_mask[..., 1:]\n            if input_ids is not None:\n                input_ids = input_ids[..., 1:]\n        # remove eos token embeddings\n        if self.eos_token_id is not None:\n            if input_ids is not None:\n                eos_mask = input_ids.ne(self.eos_token_id).to(output)\n            else:\n                last_valid_indices = attention_mask.sum(dim=-1)\n                seq_length = attention_mask.size(-1)\n                eos_mask = torch.arange(seq_length, device=output.device) == last_valid_indices.unsqueeze(1)\n            output *= eos_mask[:, :, None]\n            output = output[..., :-1, :]\n\n        return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotidePredictionHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'last_hidden_state'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotidePredictionHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], attention_mask: Tensor | None = None, input_ids: NestedTensor | Tensor | None = None, labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the NucleotidePredictionHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>attention_mask</code> <code>Tensor | None</code> <p>The attention mask for the inputs.</p> <code>None</code> <code>input_ids</code> <code>NestedTensor | Tensor | None</code> <p>The input ids for the inputs.</p> <code>None</code> <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/nucleotide.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self,\n    outputs: ModelOutput | Tuple[Tensor, ...],\n    attention_mask: Tensor | None = None,\n    input_ids: NestedTensor | Tensor | None = None,\n    labels: Tensor | None = None,\n    output_name: str | None = None,\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the NucleotidePredictionHead.\n\n    Args:\n        outputs: The outputs of the model.\n        attention_mask: The attention mask for the inputs.\n        input_ids: The input ids for the inputs.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if attention_mask is None:\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        else:\n            if input_ids is None:\n                raise ValueError(\n                    f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                )\n            if self.pad_token_id is None:\n                raise ValueError(\n                    f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                )\n            attention_mask = input_ids.ne(self.pad_token_id)\n\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[0]\n    output *= attention_mask.unsqueeze(-1)\n\n    # remove cls token embeddings\n    if self.bos_token_id is not None:\n        output = output[..., 1:, :]\n        # process attention_mask and input_ids to make removal of eos token happy\n        attention_mask = attention_mask[..., 1:]\n        if input_ids is not None:\n            input_ids = input_ids[..., 1:]\n    # remove eos token embeddings\n    if self.eos_token_id is not None:\n        if input_ids is not None:\n            eos_mask = input_ids.ne(self.eos_token_id).to(output)\n        else:\n            last_valid_indices = attention_mask.sum(dim=-1)\n            seq_length = attention_mask.size(-1)\n            eos_mask = torch.arange(seq_length, device=output.device) == last_valid_indices.unsqueeze(1)\n        output *= eos_mask[:, :, None]\n        output = output[..., :-1, :]\n\n    return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotideKMerHead","title":"NucleotideKMerHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in nucleotide-level with kmer inputs.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/nucleotide.py</code> Python<pre><code>@HeadRegistry.register(\"nucleotide.kmer\")\n@NucleotideHeadRegistryHF.register(\"kmer\")\nclass NucleotideKMerHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in nucleotide-level with kmer inputs.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"last_hidden_state\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        self.nmers = config.nmers\n        self.bos_token_id = config.bos_token_id\n        self.eos_token_id = config.eos_token_id\n        self.pad_token_id = config.pad_token_id\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n        # Do not pass bos_token_id and eos_token_id to unfold_kmer_embeddings\n        # As they will be removed in preprocess\n        self.unfold_kmer_embeddings = partial(unfold_kmer_embeddings, nmers=self.nmers)\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self,\n        outputs: ModelOutput | Tuple[Tensor, ...],\n        attention_mask: Tensor | None = None,\n        input_ids: NestedTensor | Tensor | None = None,\n        labels: Tensor | None = None,\n        output_name: str | None = None,\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the NucleotideKMerHead.\n\n        Args:\n            outputs: The outputs of the model.\n            attention_mask: The attention mask for the inputs.\n            input_ids: The input ids for the inputs.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if attention_mask is None:\n            if isinstance(input_ids, NestedTensor):\n                input_ids, attention_mask = input_ids.tensor, input_ids.mask\n            else:\n                if input_ids is None:\n                    raise ValueError(\n                        f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                    )\n                if self.pad_token_id is None:\n                    raise ValueError(\n                        f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                    )\n                attention_mask = input_ids.ne(self.pad_token_id)\n\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[0]\n        output = output * attention_mask.unsqueeze(-1)\n\n        # remove cls token embeddings\n        if self.bos_token_id is not None:\n            output = output[..., 1:, :]\n            attention_mask = attention_mask[..., 1:]\n            if input_ids is not None:\n                input_ids = input_ids[..., 1:]\n        # remove eos token embeddings\n        if self.eos_token_id is not None:\n            if input_ids is not None:\n                eos_mask = input_ids.ne(self.eos_token_id).to(output)\n                input_ids = input_ids[..., :-1]\n            else:\n                last_valid_indices = attention_mask.sum(dim=-1)\n                seq_length = attention_mask.size(-1)\n                eos_mask = torch.arange(seq_length, device=output.device) == last_valid_indices.unsqueeze(1)\n            output *= eos_mask[:, :, None]\n            output = output[..., :-1, :]\n            attention_mask = attention_mask[..., 1:]\n\n        output = self.unfold_kmer_embeddings(output, attention_mask)\n        return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotideKMerHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'last_hidden_state'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.nucleotide.NucleotideKMerHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], attention_mask: Tensor | None = None, input_ids: NestedTensor | Tensor | None = None, labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the NucleotideKMerHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>attention_mask</code> <code>Tensor | None</code> <p>The attention mask for the inputs.</p> <code>None</code> <code>input_ids</code> <code>NestedTensor | Tensor | None</code> <p>The input ids for the inputs.</p> <code>None</code> <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/nucleotide.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self,\n    outputs: ModelOutput | Tuple[Tensor, ...],\n    attention_mask: Tensor | None = None,\n    input_ids: NestedTensor | Tensor | None = None,\n    labels: Tensor | None = None,\n    output_name: str | None = None,\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the NucleotideKMerHead.\n\n    Args:\n        outputs: The outputs of the model.\n        attention_mask: The attention mask for the inputs.\n        input_ids: The input ids for the inputs.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if attention_mask is None:\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        else:\n            if input_ids is None:\n                raise ValueError(\n                    f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                )\n            if self.pad_token_id is None:\n                raise ValueError(\n                    f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                )\n            attention_mask = input_ids.ne(self.pad_token_id)\n\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[0]\n    output = output * attention_mask.unsqueeze(-1)\n\n    # remove cls token embeddings\n    if self.bos_token_id is not None:\n        output = output[..., 1:, :]\n        attention_mask = attention_mask[..., 1:]\n        if input_ids is not None:\n            input_ids = input_ids[..., 1:]\n    # remove eos token embeddings\n    if self.eos_token_id is not None:\n        if input_ids is not None:\n            eos_mask = input_ids.ne(self.eos_token_id).to(output)\n            input_ids = input_ids[..., :-1]\n        else:\n            last_valid_indices = attention_mask.sum(dim=-1)\n            seq_length = attention_mask.size(-1)\n            eos_mask = torch.arange(seq_length, device=output.device) == last_valid_indices.unsqueeze(1)\n        output *= eos_mask[:, :, None]\n        output = output[..., :-1, :]\n        attention_mask = attention_mask[..., 1:]\n\n    output = self.unfold_kmer_embeddings(output, attention_mask)\n    return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.token","title":"multimolecule.module.heads.token","text":""},{"location":"module/heads/#multimolecule.module.heads.token.TokenPredictionHead","title":"TokenPredictionHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in token-level.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/token.py</code> Python<pre><code>@HeadRegistry.register(\"token.single\")\n@TokenHeadRegistryHF.register(\"single\", default=True)\nclass TokenPredictionHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in token-level.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"last_hidden_state\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        self.bos_token_id = config.bos_token_id\n        self.eos_token_id = config.eos_token_id\n        self.pad_token_id = config.pad_token_id\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self,\n        outputs: ModelOutput | Tuple[Tensor, ...],\n        attention_mask: Tensor | None = None,\n        input_ids: NestedTensor | Tensor | None = None,\n        labels: Tensor | None = None,\n        output_name: str | None = None,\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the TokenPredictionHead.\n\n        Args:\n            outputs: The outputs of the model.\n            attention_mask: The attention mask for the inputs.\n            input_ids: The input ids for the inputs.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if attention_mask is None:\n            if isinstance(input_ids, NestedTensor):\n                input_ids, attention_mask = input_ids.tensor, input_ids.mask\n            else:\n                if input_ids is None:\n                    raise ValueError(\n                        f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                    )\n                if self.pad_token_id is None:\n                    raise ValueError(\n                        f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                    )\n                attention_mask = input_ids.ne(self.pad_token_id)\n\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[0]\n        output = output * attention_mask.unsqueeze(-1)\n        return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.token.TokenPredictionHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'last_hidden_state'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.token.TokenPredictionHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], attention_mask: Tensor | None = None, input_ids: NestedTensor | Tensor | None = None, labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the TokenPredictionHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>attention_mask</code> <code>Tensor | None</code> <p>The attention mask for the inputs.</p> <code>None</code> <code>input_ids</code> <code>NestedTensor | Tensor | None</code> <p>The input ids for the inputs.</p> <code>None</code> <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/token.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self,\n    outputs: ModelOutput | Tuple[Tensor, ...],\n    attention_mask: Tensor | None = None,\n    input_ids: NestedTensor | Tensor | None = None,\n    labels: Tensor | None = None,\n    output_name: str | None = None,\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the TokenPredictionHead.\n\n    Args:\n        outputs: The outputs of the model.\n        attention_mask: The attention mask for the inputs.\n        input_ids: The input ids for the inputs.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if attention_mask is None:\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        else:\n            if input_ids is None:\n                raise ValueError(\n                    f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                )\n            if self.pad_token_id is None:\n                raise ValueError(\n                    f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                )\n            attention_mask = input_ids.ne(self.pad_token_id)\n\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[0]\n    output = output * attention_mask.unsqueeze(-1)\n    return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.token.TokenKMerHead","title":"TokenKMerHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in token-level with kmer inputs.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/token.py</code> Python<pre><code>@HeadRegistry.register(\"token.kmer\")\n@TokenHeadRegistryHF.register(\"kmer\")\nclass TokenKMerHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in token-level with kmer inputs.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"last_hidden_state\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        self.nmers = config.nmers\n        self.bos_token_id = config.bos_token_id\n        self.eos_token_id = config.eos_token_id\n        self.pad_token_id = config.pad_token_id\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n        self.unfold_kmer_embeddings = partial(\n            unfold_kmer_embeddings, nmers=self.nmers, bos_token_id=self.bos_token_id, eos_token_id=self.eos_token_id\n        )\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self,\n        outputs: ModelOutput | Tuple[Tensor, ...],\n        attention_mask: Tensor | None = None,\n        input_ids: NestedTensor | Tensor | None = None,\n        labels: Tensor | None = None,\n        output_name: str | None = None,\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the TokenKMerHead.\n\n        Args:\n            outputs: The outputs of the model.\n            attention_mask: The attention mask for the inputs.\n            input_ids: The input ids for the inputs.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if attention_mask is None:\n            if isinstance(input_ids, NestedTensor):\n                input_ids, attention_mask = input_ids.tensor, input_ids.mask\n            else:\n                if input_ids is None:\n                    raise ValueError(\n                        f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                    )\n                if self.pad_token_id is None:\n                    raise ValueError(\n                        f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                    )\n                attention_mask = input_ids.ne(self.pad_token_id)\n\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[0]\n        output *= attention_mask.unsqueeze(-1)\n        output = self.unfold_kmer_embeddings(output, attention_mask)\n        return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.token.TokenKMerHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'last_hidden_state'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.token.TokenKMerHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], attention_mask: Tensor | None = None, input_ids: NestedTensor | Tensor | None = None, labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the TokenKMerHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>attention_mask</code> <code>Tensor | None</code> <p>The attention mask for the inputs.</p> <code>None</code> <code>input_ids</code> <code>NestedTensor | Tensor | None</code> <p>The input ids for the inputs.</p> <code>None</code> <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/token.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self,\n    outputs: ModelOutput | Tuple[Tensor, ...],\n    attention_mask: Tensor | None = None,\n    input_ids: NestedTensor | Tensor | None = None,\n    labels: Tensor | None = None,\n    output_name: str | None = None,\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the TokenKMerHead.\n\n    Args:\n        outputs: The outputs of the model.\n        attention_mask: The attention mask for the inputs.\n        input_ids: The input ids for the inputs.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if attention_mask is None:\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        else:\n            if input_ids is None:\n                raise ValueError(\n                    f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                )\n            if self.pad_token_id is None:\n                raise ValueError(\n                    f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                )\n            attention_mask = input_ids.ne(self.pad_token_id)\n\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[0]\n    output *= attention_mask.unsqueeze(-1)\n    output = self.unfold_kmer_embeddings(output, attention_mask)\n    return super().forward(output, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.contact","title":"multimolecule.module.heads.contact","text":""},{"location":"module/heads/#multimolecule.module.heads.contact.ContactPredictionHead","title":"ContactPredictionHead","text":"<p>               Bases: <code>PredictionHead</code></p> <p>Head for tasks in contact-level.</p> <p>Performs symmetrization, and average product correct.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/contact.py</code> Python<pre><code>@HeadRegistry.register(\"contact\")\nclass ContactPredictionHead(PredictionHead):\n    r\"\"\"\n    Head for tasks in contact-level.\n\n    Performs symmetrization, and average product correct.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"attentions\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__(config, head_config)\n        self.bos_token_id = config.bos_token_id\n        self.eos_token_id = config.eos_token_id\n        self.pad_token_id = config.pad_token_id\n        self.decoder = nn.Linear(\n            config.num_hidden_layers * config.num_attention_heads, self.num_labels, bias=self.config.bias\n        )\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n\n    def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n        self,\n        outputs: ModelOutput | Mapping | Tuple[Tensor, ...],\n        attention_mask: Tensor | None = None,\n        input_ids: NestedTensor | Tensor | None = None,\n        labels: Tensor | None = None,\n        output_name: str | None = None,\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the ContactPredictionHead.\n\n        Args:\n            outputs: The outputs of the model.\n            attention_mask: The attention mask for the inputs.\n            input_ids: The input ids for the inputs.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if attention_mask is None:\n            if isinstance(input_ids, NestedTensor):\n                input_ids, attention_mask = input_ids.tensor, input_ids.mask\n            else:\n                if input_ids is None:\n                    raise ValueError(\n                        f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                    )\n                if self.pad_token_id is None:\n                    raise ValueError(\n                        f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                    )\n                attention_mask = input_ids.ne(self.pad_token_id)\n\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[-1]\n        attentions = torch.stack(output, 1)\n\n        # In the original model, attentions for padding tokens are completely zeroed out.\n        # This makes no difference most of the time because the other tokens won't attend to them,\n        # but it does for the contact prediction task, which takes attentions as input,\n        # so we have to mimic that here.\n        attention_mask = attention_mask.unsqueeze(1) * attention_mask.unsqueeze(2)\n        attentions *= attention_mask[:, None, None, :, :]\n\n        # remove cls token attentions\n        if self.bos_token_id is not None:\n            attentions = attentions[..., 1:, 1:]\n            # process attention_mask and input_ids to make removal of eos token happy\n            attention_mask = attention_mask[..., 1:]\n            if input_ids is not None:\n                input_ids = input_ids[..., 1:]\n        # remove eos token attentions\n        if self.eos_token_id is not None:\n            if input_ids is not None:\n                eos_mask = input_ids.ne(self.eos_token_id).to(attentions)\n            else:\n                last_valid_indices = attention_mask.sum(dim=-1)\n                seq_length = attention_mask.size(-1)\n                eos_mask = torch.arange(seq_length, device=attentions.device).unsqueeze(0) == last_valid_indices\n            eos_mask = eos_mask.unsqueeze(1) * eos_mask.unsqueeze(2)\n            attentions *= eos_mask[:, None, None, :, :]\n            attentions = attentions[..., :-1, :-1]\n\n        # features: batch x channels x input_ids x input_ids (symmetric)\n        batch_size, layers, heads, seqlen, _ = attentions.size()\n        attentions = attentions.view(batch_size, layers * heads, seqlen, seqlen)\n        attentions = attentions.to(self.decoder.weight.device)\n        attentions = average_product_correct(symmetrize(attentions))\n        attentions = attentions.permute(0, 2, 3, 1).squeeze(3)\n\n        return super().forward(attentions, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.contact.ContactPredictionHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'attentions'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.contact.ContactPredictionHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Mapping | Tuple[Tensor, ...], attention_mask: Tensor | None = None, input_ids: NestedTensor | Tensor | None = None, labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the ContactPredictionHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Mapping | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>attention_mask</code> <code>Tensor | None</code> <p>The attention mask for the inputs.</p> <code>None</code> <code>input_ids</code> <code>NestedTensor | Tensor | None</code> <p>The input ids for the inputs.</p> <code>None</code> <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/contact.py</code> Python<pre><code>def forward(  # type: ignore[override]  # pylint: disable=arguments-renamed\n    self,\n    outputs: ModelOutput | Mapping | Tuple[Tensor, ...],\n    attention_mask: Tensor | None = None,\n    input_ids: NestedTensor | Tensor | None = None,\n    labels: Tensor | None = None,\n    output_name: str | None = None,\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the ContactPredictionHead.\n\n    Args:\n        outputs: The outputs of the model.\n        attention_mask: The attention mask for the inputs.\n        input_ids: The input ids for the inputs.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if attention_mask is None:\n        if isinstance(input_ids, NestedTensor):\n            input_ids, attention_mask = input_ids.tensor, input_ids.mask\n        else:\n            if input_ids is None:\n                raise ValueError(\n                    f\"Either attention_mask or input_ids must be provided for {self.__class__.__name__} to work.\"\n                )\n            if self.pad_token_id is None:\n                raise ValueError(\n                    f\"pad_token_id must be provided when attention_mask is not passed to {self.__class__.__name__}.\"\n                )\n            attention_mask = input_ids.ne(self.pad_token_id)\n\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[-1]\n    attentions = torch.stack(output, 1)\n\n    # In the original model, attentions for padding tokens are completely zeroed out.\n    # This makes no difference most of the time because the other tokens won't attend to them,\n    # but it does for the contact prediction task, which takes attentions as input,\n    # so we have to mimic that here.\n    attention_mask = attention_mask.unsqueeze(1) * attention_mask.unsqueeze(2)\n    attentions *= attention_mask[:, None, None, :, :]\n\n    # remove cls token attentions\n    if self.bos_token_id is not None:\n        attentions = attentions[..., 1:, 1:]\n        # process attention_mask and input_ids to make removal of eos token happy\n        attention_mask = attention_mask[..., 1:]\n        if input_ids is not None:\n            input_ids = input_ids[..., 1:]\n    # remove eos token attentions\n    if self.eos_token_id is not None:\n        if input_ids is not None:\n            eos_mask = input_ids.ne(self.eos_token_id).to(attentions)\n        else:\n            last_valid_indices = attention_mask.sum(dim=-1)\n            seq_length = attention_mask.size(-1)\n            eos_mask = torch.arange(seq_length, device=attentions.device).unsqueeze(0) == last_valid_indices\n        eos_mask = eos_mask.unsqueeze(1) * eos_mask.unsqueeze(2)\n        attentions *= eos_mask[:, None, None, :, :]\n        attentions = attentions[..., :-1, :-1]\n\n    # features: batch x channels x input_ids x input_ids (symmetric)\n    batch_size, layers, heads, seqlen, _ = attentions.size()\n    attentions = attentions.view(batch_size, layers * heads, seqlen, seqlen)\n    attentions = attentions.to(self.decoder.weight.device)\n    attentions = average_product_correct(symmetrize(attentions))\n    attentions = attentions.permute(0, 2, 3, 1).squeeze(3)\n\n    return super().forward(attentions, labels)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.pretrain","title":"multimolecule.module.heads.pretrain","text":""},{"location":"module/heads/#multimolecule.module.heads.pretrain.MaskedLMHead","title":"MaskedLMHead","text":"<p>               Bases: <code>Module</code></p> <p>Head for masked language modeling.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>MaskedLMHeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/pretrain.py</code> Python<pre><code>@HeadRegistry.register(\"masked_lm\")\nclass MaskedLMHead(nn.Module):\n    r\"\"\"\n    Head for masked language modeling.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    output_name: str = \"last_hidden_state\"\n    r\"\"\"The default output to use for the head.\"\"\"\n\n    def __init__(\n        self, config: PreTrainedConfig, weight: Tensor | None = None, head_config: MaskedLMHeadConfig | None = None\n    ):\n        super().__init__()\n        if head_config is None:\n            head_config = config.lm_head if hasattr(config, \"lm_head\") else config.head  # type: ignore[assignment]\n        self.config: MaskedLMHeadConfig = head_config  # type: ignore[assignment]\n        if self.config.hidden_size is None:\n            self.config.hidden_size = config.hidden_size\n        self.num_labels = config.vocab_size\n        self.dropout = nn.Dropout(self.config.dropout)\n        self.transform = HeadTransformRegistryHF.build(self.config)\n        self.decoder = nn.Linear(self.config.hidden_size, self.num_labels, bias=False)\n        if weight is not None:\n            self.decoder.weight = weight\n        if self.config.bias:\n            self.bias = nn.Parameter(torch.zeros(self.num_labels))\n            self.decoder.bias = self.bias\n        self.activation = ACT2FN[self.config.act] if self.config.act is not None else None\n        if head_config is not None and head_config.output_name is not None:\n            self.output_name = head_config.output_name\n\n    def forward(\n        self, outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None\n    ) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the MaskedLMHead.\n\n        Args:\n            outputs: The outputs of the model.\n            labels: The labels for the head.\n            output_name: The name of the output to use.\n                Defaults to `self.output_name`.\n        \"\"\"\n        if isinstance(outputs, (Mapping, ModelOutput)):\n            output = outputs[output_name or self.output_name]\n        elif isinstance(outputs, tuple):\n            output = outputs[0]\n        output = self.dropout(output)\n        output = self.transform(output)\n        output = self.decoder(output)\n        if self.activation is not None:\n            output = self.activation(output)\n        if labels is not None:\n            if isinstance(labels, NestedTensor):\n                if isinstance(output, Tensor):\n                    output = labels.nested_like(output, strict=False)\n                return HeadOutput(output, F.cross_entropy(torch.cat(output.storage()), torch.cat(labels.storage())))\n            return HeadOutput(output, F.cross_entropy(output.view(-1, self.num_labels), labels.view(-1)))\n        return HeadOutput(output)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.pretrain.MaskedLMHead.output_name","title":"output_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"Python<pre><code>output_name: str = 'last_hidden_state'\n</code></pre> <p>The default output to use for the head.</p>"},{"location":"module/heads/#multimolecule.module.heads.pretrain.MaskedLMHead.forward","title":"forward","text":"Python<pre><code>forward(outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the MaskedLMHead.</p> <p>Parameters:</p> Name Type Description Default <code>outputs</code> <code>ModelOutput | Tuple[Tensor, ...]</code> <p>The outputs of the model.</p> required <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> <code>None</code> <code>output_name</code> <code>str | None</code> <p>The name of the output to use. Defaults to <code>self.output_name</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/pretrain.py</code> Python<pre><code>def forward(\n    self, outputs: ModelOutput | Tuple[Tensor, ...], labels: Tensor | None = None, output_name: str | None = None\n) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the MaskedLMHead.\n\n    Args:\n        outputs: The outputs of the model.\n        labels: The labels for the head.\n        output_name: The name of the output to use.\n            Defaults to `self.output_name`.\n    \"\"\"\n    if isinstance(outputs, (Mapping, ModelOutput)):\n        output = outputs[output_name or self.output_name]\n    elif isinstance(outputs, tuple):\n        output = outputs[0]\n    output = self.dropout(output)\n    output = self.transform(output)\n    output = self.decoder(output)\n    if self.activation is not None:\n        output = self.activation(output)\n    if labels is not None:\n        if isinstance(labels, NestedTensor):\n            if isinstance(output, Tensor):\n                output = labels.nested_like(output, strict=False)\n            return HeadOutput(output, F.cross_entropy(torch.cat(output.storage()), torch.cat(labels.storage())))\n        return HeadOutput(output, F.cross_entropy(output.view(-1, self.num_labels), labels.view(-1)))\n    return HeadOutput(output)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.generic","title":"multimolecule.module.heads.generic","text":""},{"location":"module/heads/#multimolecule.module.heads.generic.PredictionHead","title":"PredictionHead","text":"<p>               Bases: <code>Module</code></p> <p>Head for all-level of tasks.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>PreTrainedConfig</code> <p>The configuration object for the model.</p> required <code>head_config</code> <code>HeadConfig | None</code> <p>The configuration object for the head. If None, will use configuration from the <code>config</code>.</p> <code>None</code> Source code in <code>multimolecule/module/heads/generic.py</code> Python<pre><code>class PredictionHead(nn.Module):\n    r\"\"\"\n    Head for all-level of tasks.\n\n    Args:\n        config: The configuration object for the model.\n        head_config: The configuration object for the head.\n            If None, will use configuration from the `config`.\n    \"\"\"\n\n    num_labels: int\n\n    def __init__(self, config: PreTrainedConfig, head_config: HeadConfig | None = None):\n        super().__init__()\n        if head_config is None:\n            head_config = config.head\n        self.config = head_config\n        if self.config.hidden_size is None:\n            self.config.hidden_size = config.hidden_size\n        if self.config.num_labels is None:\n            self.config.num_labels = config.num_labels\n        if self.config.problem_type is None:\n            self.config.problem_type = config.problem_type\n        self.num_labels = self.config.num_labels\n        self.dropout = nn.Dropout(self.config.dropout)\n        self.transform = HeadTransformRegistryHF.build(self.config)\n        self.decoder = nn.Linear(config.hidden_size, self.num_labels, bias=self.config.bias)\n        self.activation = ACT2FN[self.config.act] if self.config.act is not None else None\n        self.criterion = Criterion(self.config)\n\n    def forward(self, embeddings: Tensor, labels: Tensor | None) -&gt; HeadOutput:\n        r\"\"\"\n        Forward pass of the PredictionHead.\n\n        Args:\n            embeddings: The embeddings to be passed through the head.\n            labels: The labels for the head.\n        \"\"\"\n        output = self.dropout(embeddings)\n        output = self.transform(output)\n        output = self.decoder(output)\n        if self.activation is not None:\n            output = self.activation(output)\n        if labels is not None:\n            if isinstance(labels, NestedTensor):\n                if isinstance(output, Tensor):\n                    output = labels.nested_like(output, strict=False)\n                return HeadOutput(output, self.criterion(torch.cat(output.storage()), torch.cat(labels.storage())))\n            return HeadOutput(output, self.criterion(output, labels))\n        return HeadOutput(output)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.generic.PredictionHead.forward","title":"forward","text":"Python<pre><code>forward(embeddings: Tensor, labels: Tensor | None) -&gt; HeadOutput\n</code></pre> <p>Forward pass of the PredictionHead.</p> <p>Parameters:</p> Name Type Description Default <code>embeddings</code> <code>Tensor</code> <p>The embeddings to be passed through the head.</p> required <code>labels</code> <code>Tensor | None</code> <p>The labels for the head.</p> required Source code in <code>multimolecule/module/heads/generic.py</code> Python<pre><code>def forward(self, embeddings: Tensor, labels: Tensor | None) -&gt; HeadOutput:\n    r\"\"\"\n    Forward pass of the PredictionHead.\n\n    Args:\n        embeddings: The embeddings to be passed through the head.\n        labels: The labels for the head.\n    \"\"\"\n    output = self.dropout(embeddings)\n    output = self.transform(output)\n    output = self.decoder(output)\n    if self.activation is not None:\n        output = self.activation(output)\n    if labels is not None:\n        if isinstance(labels, NestedTensor):\n            if isinstance(output, Tensor):\n                output = labels.nested_like(output, strict=False)\n            return HeadOutput(output, self.criterion(torch.cat(output.storage()), torch.cat(labels.storage())))\n        return HeadOutput(output, self.criterion(output, labels))\n    return HeadOutput(output)\n</code></pre>"},{"location":"module/heads/#multimolecule.module.heads.output","title":"multimolecule.module.heads.output","text":""},{"location":"module/heads/#multimolecule.module.heads.output.HeadOutput","title":"HeadOutput  <code>dataclass</code>","text":"<p>               Bases: <code>ModelOutput</code></p> <p>Output of a prediction head.</p> <p>Parameters:</p> Name Type Description Default <code>logits</code> <code>FloatTensor</code> <p>The prediction logits from the head.</p> required <code>loss</code> <code>FloatTensor | None</code> <p>The loss from the head. Defaults to None.</p> <code>None</code> Source code in <code>multimolecule/module/heads/output.py</code> Python<pre><code>@dataclass\nclass HeadOutput(ModelOutput):\n    r\"\"\"\n    Output of a prediction head.\n\n    Args:\n        logits: The prediction logits from the head.\n        loss: The loss from the head.\n            Defaults to None.\n    \"\"\"\n\n    logits: FloatTensor\n    loss: FloatTensor | None = None\n</code></pre>"},{"location":"tokenisers/","title":"tokenisers","text":"<p><code>tokenisers</code> provide a collection of pre-defined tokenizers.</p> <p>A tokenizer is a class that converts a sequence of nucleotides or amino acids into a sequence of indices. It is used to pre-process the input sequence before feeding it into a model.</p> <p>Please refer to Tokenizer for more details.</p>"},{"location":"tokenisers/#available-tokenizers","title":"Available Tokenizers","text":"<ul> <li>DnaTokenizer</li> <li>RnaTokenizer</li> <li>ProteinTokenizer</li> <li>DotBracketTokenizer</li> </ul>"},{"location":"tokenisers/dna/","title":"DnaTokenizer","text":"<p>DnaTokenizer is smart, it tokenizes raw DNA nucleotides into tokens, no matter if the input is in uppercase or lowercase, uses T (Thymine) or U (Uracil), and with or without special tokens. It also supports tokenization into nmers and codons, so you don\u2019t have to write complex code to preprocess your data.</p> <p>By default, <code>DnaTokenizer</code> uses the standard alphabet. If <code>nmers</code> is greater than <code>1</code>, or <code>codon</code> is set to <code>True</code>, it will instead use the streamline alphabet.</p> <p>MultiMolecule provides a set of predefined alphabets for tokenization.</p>"},{"location":"tokenisers/dna/#multimolecule.tokenisers.DnaTokenizer","title":"multimolecule.tokenisers.DnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for DNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>iupac</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_U_with_T</code> <code>bool</code> <p>Whether to replace U with T.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import DnaTokenizer\n&gt;&gt;&gt; tokenizer = DnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGTNXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = DnaTokenizer(replace_U_with_T=False)\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = DnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('tataaagta')[\"input_ids\"]\n[1, 84, 21, 81, 6, 8, 19, 71, 2]\n&gt;&gt;&gt; tokenizer = DnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('tataaagta')[\"input_ids\"]\n[1, 84, 6, 71, 2]\n&gt;&gt;&gt; tokenizer('tataaagtaa')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/dna/tokenization_dna.py</code> Python<pre><code>class DnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for DNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `iupac`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_U_with_T: Whether to replace U with T.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import DnaTokenizer\n        &gt;&gt;&gt; tokenizer = DnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGTNXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = DnaTokenizer(replace_U_with_T=False)\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = DnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('tataaagta')[\"input_ids\"]\n        [1, 84, 21, 81, 6, 8, 19, 71, 2]\n        &gt;&gt;&gt; tokenizer = DnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('tataaagta')[\"input_ids\"]\n        [1, 84, 6, 71, 2]\n        &gt;&gt;&gt; tokenizer('tataaagtaa')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_U_with_T: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_U_with_T = replace_U_with_T\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_U_with_T:\n            text = text.replace(\"U\", \"T\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"tokenisers/dna/#standard-alphabet","title":"Standard Alphabet","text":"<p>The standard alphabet is an extended version of the IUPAC alphabet. This extension includes two additional symbols to the IUPAC alphabet, <code>X</code> and <code>*</code>.</p> <ul> <li><code>X</code>: Any base; is slightly different from <code>N</code> which represents Unknown base.   In automatic word embedding conversion, the <code>X</code> will be initialized as the mean of <code>A</code>, <code>C</code>, <code>G</code>, and <code>T</code>, while <code>N</code> will not be further processed.</li> <li><code>*</code>: is not used in MultiMolecule and is reserved for future use.</li> </ul> <p>gap</p> <p>Note that we use <code>.</code> to represent a gap in the sequence.</p> <p>While <code>-</code> exists in the standard alphabet, it is not used in MultiMolecule and is reserved for future use.</p> Code Represents A Adenine C Cytosine G Guanine T Thymine N Unknown X Any V A, C, or G H A, C, or T D A, G, or T B C, G, or T M A or C R A or G W A or T S C or G Y C or T K G or T . Gap * Not Used - Not Used"},{"location":"tokenisers/dna/#iupac-alphabet","title":"IUPAC Alphabet","text":"<p>IUPAC nucleotide code is a standard nucleotide code proposed by the International Union of Pure and Applied Chemistry (IUPAC) to represent DNA sequences.</p> <p>It consists of 10 symbols that represent ambiguity in the nucleotide sequence and 1 symbol that represents a gap in addition to the streamline alphabet.</p> Code Represents A Adenine C Cytosine G Guanine T Thymine R A or G Y C or T S C or G W A or T K G or T M A or C B C, G, or T D A, G, or T H A, C, or T V A, C, or G N A, C, G, or T . Gap <p>Note that we use <code>.</code> to represent a gap in the sequence.</p>"},{"location":"tokenisers/dna/#streamline-alphabet","title":"Streamline Alphabet","text":"<p>The streamline alphabet includes one additional symbol to the nucleobase alphabet, <code>N</code> to represent unknown nucleobase.</p> Code Nucleotide A Adenine C Cytosine G Guanine T Thymine N Unknown"},{"location":"tokenisers/dna/#nucleobase-alphabet","title":"Nucleobase Alphabet","text":"<p>The nucleobase alphabet is a minimal version of the DNA alphabet that includes only the four canonical nucleotides <code>A</code>, <code>C</code>, <code>G</code>, and <code>T</code>.</p> Code Nucleotide A Adenine C Cytosine G Guanine T Thymine"},{"location":"tokenisers/dot_bracket/","title":"DotBracketTokenizer","text":"<p>DotBracketTokenizer provides a simple way to tokenize secondary structure in dot-bracket notation. It also supports tokenization into nmers and codons, so you don\u2019t have to write complex code to preprocess your data.</p> <p>By default, <code>DotBracketTokenizer</code> uses the standard alphabet. If <code>nmers</code> is greater than <code>1</code>, or <code>codon</code> is set to <code>True</code>, it will instead use the streamline alphabet.</p> <p>MultiMolecule provides a set of predefined alphabets for tokenization.</p>"},{"location":"tokenisers/dot_bracket/#multimolecule.tokenisers.DotBracketTokenizer","title":"multimolecule.tokenisers.DotBracketTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for Secondary Structure sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard Secondary Structure alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>iupac</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import DotBracketTokenizer\n&gt;&gt;&gt; tokenizer = DotBracketTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;&lt;{[(.|,)]}&gt;+-_:~$@^%*')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2]\n&gt;&gt;&gt; tokenizer('(.)')[\"input_ids\"]\n[1, 9, 10, 13, 2]\n&gt;&gt;&gt; tokenizer('+(.)')[\"input_ids\"]\n[1, 17, 9, 10, 13, 2]\n&gt;&gt;&gt; tokenizer = DotBracketTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('(((((+..........)))))')[\"input_ids\"]\n[1, 6, 6, 6, 9, 19, 59, 27, 27, 27, 27, 27, 27, 27, 27, 28, 32, 48, 48, 48, 2]\n&gt;&gt;&gt; tokenizer = DotBracketTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('(((((+..........)))))')[\"input_ids\"]\n[1, 6, 9, 27, 27, 27, 32, 48, 2]\n&gt;&gt;&gt; tokenizer('(((((+...........)))))')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 22\n</code></pre> Source code in <code>multimolecule/tokenisers/dot_bracket/tokenization_db.py</code> Python<pre><code>class DotBracketTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for Secondary Structure sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard Secondary Structure alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `iupac`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import DotBracketTokenizer\n        &gt;&gt;&gt; tokenizer = DotBracketTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;&lt;{[(.|,)]}&gt;+-_:~$@^%*')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2]\n        &gt;&gt;&gt; tokenizer('(.)')[\"input_ids\"]\n        [1, 9, 10, 13, 2]\n        &gt;&gt;&gt; tokenizer('+(.)')[\"input_ids\"]\n        [1, 17, 9, 10, 13, 2]\n        &gt;&gt;&gt; tokenizer = DotBracketTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('(((((+..........)))))')[\"input_ids\"]\n        [1, 6, 6, 6, 9, 19, 59, 27, 27, 27, 27, 27, 27, 27, 27, 28, 32, 48, 48, 48, 2]\n        &gt;&gt;&gt; tokenizer = DotBracketTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('(((((+..........)))))')[\"input_ids\"]\n        [1, 6, 9, 27, 27, 27, 32, 48, 2]\n        &gt;&gt;&gt; tokenizer('(((((+...........)))))')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 22\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        additional_special_tokens: List | Tuple | None = None,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            **kwargs,\n        )\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"tokenisers/dot_bracket/#standard-alphabet","title":"Standard Alphabet","text":"<p>The standard alphabet is an extended version of the Extended Dot-Bracket Notation. This extension includes most symbols from the WUSS notation for better compatibility with existing tools.</p> Code Represents &lt; simple terminal stems { all internal helices of deeper multifurcations [ internal helices that includes at least one annotated () stem ( internal helices of all terminal stems . unpaired | mostly paired , unpaired in multibranch loops ) internal helices of all terminal stems ] internal helices that includes at least one annotated () stem } all internal helices of deeper multifurcations &gt; simple terminal stems + nick between strand - bulges and interior loops _ unpaired : single stranded in the exterior loop ~ local structural alignment left regions of target and query unaligned $ Not Used @ Not Used ^ Not Used % Not Used * Not Used"},{"location":"tokenisers/dot_bracket/#extended-alphabet","title":"Extended Alphabet","text":"<p>Extended Dot-Bracket Notation is a more generalized version of the original Dot-Bracket notation may use additional pairs of brackets for annotating pseudo-knots, since different pairs of brackets are not required to be nested.</p> Code Represents &lt; simple terminal stems { all internal helices of deeper multifurcations [ internal helices that includes at least one annotated () stem ( internal helices of all terminal stems . unpaired | mostly paired , unpaired in multibranch loops ) internal helices of all terminal stems ] internal helices that includes at least one annotated () stem } all internal helices of deeper multifurcations &gt; simple terminal stems + nick between strand <p>Note that we use <code>.</code> to represent a gap in the sequence.</p>"},{"location":"tokenisers/dot_bracket/#streamline-alphabet","title":"Streamline Alphabet","text":"<p>The streamline alphabet includes one additional symbol to the nucleobase alphabet, <code>N</code> to represent unknown nucleobase.</p> Code Represents ( internal helices of all terminal stems . unpaired ) internal helices of all terminal stems + nick between strand"},{"location":"tokenisers/protein/","title":"ProteinTokenizer","text":"<p>ProteinTokenizer is smart, it tokenizes raw amino acids into tokens, no matter if the input is in uppercase or lowercase, and with or without special tokens.</p> <p>By default, <code>ProteinTokenizer</code> uses the standard alphabet.</p> <p>MultiMolecule provides a set of predefined alphabets for tokenization.</p>"},{"location":"tokenisers/protein/#multimolecule.tokenisers.ProteinTokenizer","title":"multimolecule.tokenisers.ProteinTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for Protein sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>iupac</code></li> <li><code>streamline</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import ProteinTokenizer\n&gt;&gt;&gt; tokenizer = ProteinTokenizer()\n&gt;&gt;&gt; tokenizer('ACDEFGHIKLMNPQRSTVWYXBZJUO')[\"input_ids\"]\n[1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2]\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 32, 33, 34, 2]\n&gt;&gt;&gt; tokenizer('manlgcwmlv')[\"input_ids\"]\n[1, 16, 6, 17, 15, 11, 7, 24, 16, 15, 23, 2]\n</code></pre> Source code in <code>multimolecule/tokenisers/protein/tokenization_protein.py</code> Python<pre><code>class ProteinTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for Protein sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `iupac`\n                + `streamline`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import ProteinTokenizer\n        &gt;&gt;&gt; tokenizer = ProteinTokenizer()\n        &gt;&gt;&gt; tokenizer('ACDEFGHIKLMNPQRSTVWYXBZJUO')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2]\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 32, 33, 34, 2]\n        &gt;&gt;&gt; tokenizer('manlgcwmlv')[\"input_ids\"]\n        [1, 16, 6, 17, 15, 11, 7, 24, 16, 15, 23, 2]\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        return list(text)\n</code></pre>"},{"location":"tokenisers/protein/#standard-alphabet","title":"Standard Alphabet","text":"<p>The standard alphabet is an extended version of the IUPAC alphabet. This extension includes six additional symbols to the IUPAC alphabet, <code>J</code>, <code>U</code>, <code>O</code>, <code>.</code>, <code>-</code>, and <code>*</code>.</p> <ul> <li><code>J</code>: Xle; Leucine (L) or Isoleucine (I)</li> <li><code>U</code>: Sec; Selenocysteine</li> <li><code>O</code>: Pyl; Pyrrolysine</li> <li><code>.</code>: is not used in MultiMolecule and is reserved for future use.</li> <li><code>-</code>: is not used in MultiMolecule and is reserved for future use.</li> <li><code>*</code>: is not used in MultiMolecule and is reserved for future use.</li> </ul> Amino Acid Code Three letter Code Amino Acid A Ala Alanine C Cys Cysteine D Asp Aspartic Acid E Glu Glutamic Acid F Phe Phenylalanine G Gly Glycine H His Histidine I Ile Isoleucine K Lys Lysine L Leu Leucine M Met Methionine N Asn Asparagine P Pro Proline Q Gln Glutamine R Arg Arginine S Ser Serine T Thr Threonine V Val Valine W Trp Tryptophan Y Tyr Tyrosine X Xaa Any amino acid B Asx Aspartic acid (D) or Asparagine (N) Z Glx Glutamine (Q) or Glutamic acid (E) J Xle Leucine (L) or Isoleucine (I) U Sec Selenocysteine O Pyl Pyrrolysine . \u2026 Not Used * *** Not Used - \u2014 Not Used"},{"location":"tokenisers/protein/#iupac-alphabet","title":"IUPAC Alphabet","text":"<p>IUPAC amino acid code is a standard amino acid code proposed by the International Union of Pure and Applied Chemistry (IUPAC) to represent Protein sequences.</p> <p>The IUPAC amino acid code consists of three additional symbols to Streamline Alphabet, <code>B</code>, <code>Z</code>, and <code>X</code>.</p> Amino Acid Code Three letter Code Amino Acid A Ala Alanine B Asx Aspartic acid (D) or Asparagine (N) C Cys Cysteine D Asp Aspartic Acid E Glu Glutamic Acid F Phe Phenylalanine G Gly Glycine H His Histidine I Ile Isoleucine K Lys Lysine L Leu Leucine M Met Methionine N Asn Asparagine P Pro Proline Q Gln Glutamine R Arg Arginine S Ser Serine T Thr Threonine V Val Valine W Trp Tryptophan X Xaa Any amino acid Y Tyr Tyrosine Z Glx Glutamine (Q) or Glutamic acid (E)"},{"location":"tokenisers/protein/#streamline-alphabet","title":"Streamline Alphabet","text":"<p>The streamline alphabet is a simplified version of the standard alphabet.</p> Amino Acid Code Three letter Code Amino Acid A Ala Alanine C Cys Cysteine D Asp Aspartic Acid E Glu Glutamic Acid F Phe Phenylalanine G Gly Glycine H His Histidine I Ile Isoleucine K Lys Lysine L Leu Leucine M Met Methionine N Asn Asparagine P Pro Proline Q Gln Glutamine R Arg Arginine S Ser Serine T Thr Threonine V Val Valine W Trp Tryptophan Y Tyr Tyrosine"},{"location":"tokenisers/rna/","title":"RnaTokenizer","text":"<p>RnaTokenizer is smart, it tokenizes raw RNA nucleotides into tokens, no matter if the input is in uppercase or lowercase, uses U (Uracil) or U (Thymine), and with or without special tokens. It also supports tokenization into nmers and codons, so you don\u2019t have to write complex code to preprocess your data.</p> <p>By default, <code>RnaTokenizer</code> uses the standard alphabet. If <code>nmers</code> is greater than <code>1</code>, or <code>codon</code> is set to <code>True</code>, it will instead use the streamline alphabet.</p> <p>MultiMolecule provides a set of predefined alphabets for tokenization.</p>"},{"location":"tokenisers/rna/#multimolecule.tokenisers.RnaTokenizer","title":"multimolecule.tokenisers.RnaTokenizer","text":"<p>               Bases: <code>Tokenizer</code></p> <p>Tokenizer for RNA sequences.</p> <p>Parameters:</p> Name Type Description Default <code>alphabet</code> <code>Alphabet | str | List[str] | None</code> <p>alphabet to use for tokenization.</p> <ul> <li>If is <code>None</code>, the standard RNA alphabet will be used.</li> <li>If is a <code>string</code>, it should correspond to the name of a predefined alphabet. The options include<ul> <li><code>standard</code></li> <li><code>extended</code></li> <li><code>streamline</code></li> <li><code>nucleobase</code></li> </ul> </li> <li>If is an alphabet or a list of characters, that specific alphabet will be used.</li> </ul> <code>None</code> <code>nmers</code> <code>int</code> <p>Size of kmer to tokenize.</p> <code>1</code> <code>codon</code> <code>bool</code> <p>Whether to tokenize into codons.</p> <code>False</code> <code>replace_T_with_U</code> <code>bool</code> <p>Whether to replace T with U.</p> <code>True</code> <code>do_upper_case</code> <code>bool</code> <p>Whether to convert input to uppercase.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from multimolecule import RnaTokenizer\n&gt;&gt;&gt; tokenizer = RnaTokenizer()\n&gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n[1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n&gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 9, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n&gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n[1, 6, 7, 8, 3, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 17, 64, 49, 96, 84, 22, 2]\n&gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n&gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n[1, 83, 49, 22, 2]\n&gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\nTraceback (most recent call last):\nValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n</code></pre> Source code in <code>multimolecule/tokenisers/rna/tokenization_rna.py</code> Python<pre><code>class RnaTokenizer(Tokenizer):\n    \"\"\"\n    Tokenizer for RNA sequences.\n\n    Args:\n        alphabet: alphabet to use for tokenization.\n\n            - If is `None`, the standard RNA alphabet will be used.\n            - If is a `string`, it should correspond to the name of a predefined alphabet. The options include\n                + `standard`\n                + `extended`\n                + `streamline`\n                + `nucleobase`\n            - If is an alphabet or a list of characters, that specific alphabet will be used.\n        nmers: Size of kmer to tokenize.\n        codon: Whether to tokenize into codons.\n        replace_T_with_U: Whether to replace T with U.\n        do_upper_case: Whether to convert input to uppercase.\n\n    Examples:\n        &gt;&gt;&gt; from multimolecule import RnaTokenizer\n        &gt;&gt;&gt; tokenizer = RnaTokenizer()\n        &gt;&gt;&gt; tokenizer('&lt;pad&gt;&lt;cls&gt;&lt;eos&gt;&lt;unk&gt;&lt;mask&gt;&lt;null&gt;ACGUNIXVHDBMRWSYK.*-')[\"input_ids\"]\n        [1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 2]\n        &gt;&gt;&gt; tokenizer('acgu')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 9, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(replace_T_with_U=False)\n        &gt;&gt;&gt; tokenizer('acgt')[\"input_ids\"]\n        [1, 6, 7, 8, 3, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(nmers=3)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 17, 64, 49, 96, 84, 22, 2]\n        &gt;&gt;&gt; tokenizer = RnaTokenizer(codon=True)\n        &gt;&gt;&gt; tokenizer('uagcuuauc')[\"input_ids\"]\n        [1, 83, 49, 22, 2]\n        &gt;&gt;&gt; tokenizer('uagcuuauca')[\"input_ids\"]\n        Traceback (most recent call last):\n        ValueError: length of input sequence must be a multiple of 3 for codon tokenization, but got 10\n    \"\"\"\n\n    model_input_names = [\"input_ids\", \"attention_mask\"]\n\n    def __init__(\n        self,\n        alphabet: Alphabet | str | List[str] | None = None,\n        nmers: int = 1,\n        codon: bool = False,\n        replace_T_with_U: bool = True,\n        additional_special_tokens: List | Tuple | None = None,\n        do_upper_case: bool = True,\n        **kwargs,\n    ):\n        if codon and nmers &gt; 1:\n            raise ValueError(\"Codon and nmers cannot be used together.\")\n        if codon:\n            nmers = 3  # set to 3 to get correct vocab\n        if not isinstance(alphabet, Alphabet):\n            alphabet = get_alphabet(alphabet, nmers=nmers)\n        super().__init__(\n            alphabet=alphabet,\n            additional_special_tokens=additional_special_tokens,\n            do_upper_case=do_upper_case,\n            **kwargs,\n        )\n        self.replace_T_with_U = replace_T_with_U\n        self.nmers = nmers\n        self.condon = codon\n\n    def _tokenize(self, text: str, **kwargs):\n        if self.do_upper_case:\n            text = text.upper()\n        if self.replace_T_with_U:\n            text = text.replace(\"T\", \"U\")\n        if self.condon:\n            if len(text) % 3 != 0:\n                raise ValueError(\n                    f\"length of input sequence must be a multiple of 3 for codon tokenization, but got {len(text)}\"\n                )\n            return [text[i : i + 3] for i in range(0, len(text), 3)]\n        if self.nmers &gt; 1:\n            return [text[i : i + self.nmers] for i in range(len(text) - self.nmers + 1)]  # noqa: E203\n        return list(text)\n</code></pre>"},{"location":"tokenisers/rna/#standard-alphabet","title":"Standard Alphabet","text":"<p>The standard alphabet is an extended version of the IUPAC alphabet. This extension includes three additional symbols to the IUPAC alphabet, <code>I</code>, <code>X</code> and <code>*</code>.</p> <ul> <li><code>I</code>: Inosine; is a post-transcriptional modification that is not a standard RNA base.   Inosine is the result of a deamination reaction of adenines that is catalyzed by adenosine deaminases acting on tRNAs (ADATs)</li> <li><code>X</code>: Any base; is slightly different from <code>N</code> which represents Unknown base.   In automatic word embedding conversion, the <code>X</code> will be initialized as the mean of <code>A</code>, <code>C</code>, <code>G</code>, and <code>U</code>, while <code>N</code> will not be further processed.</li> <li><code>*</code>: is not used in MultiMolecule and is reserved for future use.</li> </ul> <p>gap</p> <p>Note that we use <code>.</code> to represent a gap in the sequence.</p> <p>While <code>-</code> exists in the standard alphabet, it is not used in MultiMolecule and is reserved for future use.</p> Code Represents A Adenine C Cytosine G Guanine U Uracil N Unknown X Any V A, C, or G H A, C, or U D A, G, or U B C, G, or U M A or C R A or G W A or U S C or G Y C or U K G or U . Gap * Not Used - Not Used I Inosine"},{"location":"tokenisers/rna/#iupac-alphabet","title":"IUPAC Alphabet","text":"<p>IUPAC nucleotide code is a standard nucleotide code proposed by the International Union of Pure and Applied Chemistry (IUPAC) to represent RNA sequences.</p> <p>It consists of 10 symbols that represent ambiguity in the nucleotide sequence and 1 symbol that represents a gap in addition to the streamline alphabet.</p> Code Represents A Adenine C Cytosine G Guanine U Uracil R A or G Y C or U S G or C W A or U K G or U M A or C B C, G, or U D A, G, or U H A, C, or U V A, C, or G N A, C, G, or U . Gap <p>Note that we use <code>.</code> to represent a gap in the sequence.</p>"},{"location":"tokenisers/rna/#streamline-alphabet","title":"Streamline Alphabet","text":"<p>The streamline alphabet includes one additional symbol to the nucleobase alphabet, <code>N</code> to represent unknown nucleobase.</p> Code Nucleotide A Adenine C Cytosine G Guanine U Uracil N Unknown"},{"location":"tokenisers/rna/#nucleobase-alphabet","title":"Nucleobase Alphabet","text":"<p>The nucleobase alphabet is a minimal version of the RNA alphabet that includes only the four canonical nucleotides <code>A</code>, <code>C</code>, <code>G</code>, and <code>U</code>.</p> Code Nucleotide A Adenine C Cytosine G Guanine U Uracil"},{"location":"zh/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u6b22\u8fce\u200b\u6765\u5230\u200b MultiMolecule (\u200b\u6d66\u539f\u200b)\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u901a\u8fc7\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u52a0\u901f\u200b\u79d1\u5b66\u7814\u7a76\u200b\u7684\u200b\u57fa\u7840\u200b\u5e93\u200b\u3002MultiMolecule \u200b\u65e8\u5728\u200b\u4e3a\u200b\u5e0c\u671b\u200b\u5728\u200b\u5de5\u4f5c\u200b\u5f53\u4e2d\u200b\u4f7f\u7528\u200b AI \u200b\u7684\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u63d0\u4f9b\u200b\u4e00\u5957\u200b\u5168\u9762\u200b\u800c\u200b\u7075\u6d3b\u200b\u7684\u200b\u5de5\u5177\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u7406\u89e3\u200b AI4Science \u200b\u662f\u200b\u4e00\u4e2a\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u9886\u57df\u200b\uff0c\u200b\u6765\u81ea\u200b\u4e0d\u540c\u200b\u5b66\u79d1\u200b\u7684\u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u4f7f\u7528\u200b\u5404\u79cd\u200b\u5b9e\u8df5\u200b\u65b9\u6cd5\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0cMultiMolecule \u200b\u8bbe\u8ba1\u200b\u65f6\u200b\u8003\u8651\u200b\u4e86\u200b\u4f4e\u200b\u8026\u5408\u200b\u6027\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u867d\u7136\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5b8c\u6574\u200b\u7684\u200b\u529f\u80fd\u200b\u5957\u4ef6\u200b\uff0c\u200b\u4f46\u200b\u6bcf\u4e2a\u200b\u6a21\u5757\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u72ec\u7acb\u200b\u4f7f\u7528\u200b\u3002\u200b\u8fd9\u4f7f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ec5\u200b\u5c06\u200b\u6240\u200b\u9700\u200b\u7ec4\u4ef6\u200b\u96c6\u6210\u200b\u5230\u200b\u73b0\u6709\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u589e\u52a0\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u3002MultiMolecule \u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li><code>data</code>: \u200b\u9ad8\u6548\u200b\u7684\u200b\u6570\u636e\u5904\u7406\u200b\u548c\u200b\u9884\u5904\u7406\u200b\u529f\u80fd\u200b\uff0c\u200b\u4ee5\u200b\u7b80\u5316\u200b\u79d1\u5b66\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u6444\u53d6\u200b\u548c\u200b\u8f6c\u6362\u200b\u3002</li> <li><code>module</code>: \u200b\u65e8\u5728\u200b\u63d0\u4f9b\u200b\u7075\u6d3b\u6027\u200b\u548c\u200b\u53ef\u200b\u91cd\u7528\u200b\u6027\u200b\u7684\u200b\u6a21\u5757\u5316\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u5404\u79cd\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4efb\u52a1\u200b\u3002</li> <li><code>models</code>: \u200b\u4e3a\u200b\u79d1\u5b66\u7814\u7a76\u200b\u5e94\u7528\u200b\u4f18\u5316\u200b\u7684\u200b\u6700\u200b\u5148\u8fdb\u200b\u6a21\u578b\u200b\u67b6\u6784\u200b\uff0c\u200b\u786e\u4fdd\u200b\u9ad8\u6027\u80fd\u200b\u548c\u200b\u9ad8\u200b\u51c6\u786e\u6027\u200b\u3002</li> <li><code>tokenisers</code>: \u200b\u5148\u8fdb\u200b\u7684\u200b\u5206\u8bcd\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6709\u6548\u200b\u5904\u7406\u200b\u590d\u6742\u200b\u7684\u200b\u79d1\u5b66\u200b\u6587\u672c\u200b\u548c\u200b\u6570\u636e\u8868\u793a\u200b\u3002</li> </ul>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<p>\u200b\u4ece\u200b PyPI \u200b\u5b89\u88c5\u200b\u6700\u65b0\u200b\u7684\u200b\u7a33\u5b9a\u200b\u7248\u672c\u200b\uff1a</p> Bash<pre><code>pip install multimolecule\n</code></pre> <p>\u200b\u4ece\u200b\u6e90\u4ee3\u7801\u200b\u5b89\u88c5\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\uff1a</p> Bash<pre><code>pip install git+https://github.com/DLS5-Omics/MultiMolecule\n</code></pre>"},{"location":"zh/#_3","title":"\u5f15\u7528","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u7814\u7a76\u200b\u4e2d\u200b\u4f7f\u7528\u200b MultiMolecule\uff0c\u200b\u8bf7\u200b\u6309\u7167\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\u5f15\u7528\u200b\u6211\u4eec\u200b\uff1a</p> BibTeX<pre><code>@software{chen_2024_12638419,\n  author    = {Chen, Zhiyuan and Zhu, Sophia Y.},\n  title     = {MultiMolecule},\n  doi       = {10.5281/zenodo.12638419},\n  publisher = {Zenodo},\n  url       = {https://doi.org/10.5281/zenodo.12638419},\n  year      = 2024,\n  month     = may,\n  day       = 4\n}\n</code></pre>"},{"location":"zh/#_4","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u200b\u6211\u4eec\u200b\u76f8\u4fe1\u200b\u5f00\u653e\u200b\u662f\u200b\u7814\u7a76\u200b\u7684\u200b\u57fa\u7840\u200b\u3002</p> <p>MultiMolecule \u200b\u5728\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u6388\u6743\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u52a0\u5165\u200b\u6211\u4eec\u200b\uff0c\u200b\u5171\u540c\u200b\u5efa\u7acb\u200b\u4e00\u4e2a\u200b\u5f00\u653e\u200b\u7684\u200b\u7814\u7a76\u200b\u793e\u533a\u200b\u3002</p> <p><code>SPDX-License-Identifier: AGPL-3.0-or-later</code></p>"},{"location":"zh/about/","title":"\u5173\u4e8e","text":"<p>\u200b\u7531\u4e39\u7075\u200b\u5728\u200b\u5730\u7403\u200b\u5f00\u53d1\u200b</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u5f00\u53d1\u8005\u200b\u3001\u200b\u8bbe\u8ba1\u200b\u4eba\u5458\u200b\u548c\u200b\u5176\u4ed6\u200b\u4eba\u5458\u200b\u7ec4\u6210\u200b\u7684\u200b\u793e\u533a\u200b\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u8ba9\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6280\u672f\u200b\u66f4\u52a0\u200b\u5f00\u653e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u4e2a\u4f53\u200b\u7ec4\u6210\u200b\u7684\u200b\u793e\u533a\u200b\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u63a8\u52a8\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\u8fb9\u754c\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5bf9\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u53ca\u5176\u200b\u7528\u6237\u200b\u5145\u6ee1\u200b\u6fc0\u60c5\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e39\u7075\u200b\u3002</p>"},{"location":"zh/about/license/","title":"License","text":"<p>\u200b\u7ffb\u8bd1\u200b</p> <p>\u200b\u672c\u6587\u200b\u5185\u5bb9\u200b\u4e3a\u200b\u7ffb\u8bd1\u200b\u7248\u672c\u200b\uff0c\u200b\u65e8\u5728\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u65b9\u4fbf\u200b\u3002 \u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c3d\u529b\u200b\u786e\u4fdd\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002 \u200b\u4f46\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u5185\u5bb9\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u9519\u8bef\u200b\uff0c\u200b\u4ec5\u4f9b\u53c2\u8003\u200b\u3002 \u200b\u8bf7\u4ee5\u200b\u82f1\u6587\u200b\u539f\u6587\u200b\u4e3a\u51c6\u200b\u3002</p> <p>\u200b\u4e3a\u200b\u6ee1\u8db3\u200b\u5408\u89c4\u6027\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u8981\u6c42\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u6587\u6863\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u6b67\u4e49\u200b\u4e4b\u5904\u200b\u5747\u200b\u4e0d\u200b\u5177\u6709\u200b\u7ea6\u675f\u529b\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5177\u5907\u200b\u6cd5\u5f8b\u6548\u529b\u200b\u3002</p>"},{"location":"zh/about/license/#gnu-affero","title":"GNU AFFERO \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1","text":"<p>\u200b\u7b2c\u200b3\u200b\u7248\u200b\uff0c2007\u200b\u5e74\u200b11\u200b\u6708\u200b19\u200b\u65e5\u200b</p> <p>\u200b\u7248\u6743\u6240\u6709\u200b \u00a9 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>\u200b\u6bcf\u4e2a\u200b\u4eba\u200b\u90fd\u200b\u88ab\u200b\u5141\u8bb8\u200b\u590d\u5236\u200b\u548c\u200b\u5206\u53d1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u7684\u200b\u9010\u5b57\u200b\u526f\u672c\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u8fdb\u884c\u200b\u66f4\u6539\u200b\u3002</p>"},{"location":"zh/about/license/#_1","title":"\u5e8f\u8a00","text":"<p>GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u662f\u200b\u4e00\u4e2a\u200b\u81ea\u7531\u200b\u7684\u200b\u3001\u200b\u5141\u8bb8\u200b\u590d\u5236\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u548c\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5728\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u8f6f\u4ef6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e13\u95e8\u200b\u4e3a\u200b\u786e\u4fdd\u200b\u4e0e\u200b\u793e\u533a\u200b\u5408\u4f5c\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u3002</p> <p>\u200b\u5927\u591a\u6570\u200b\u8f6f\u4ef6\u200b\u548c\u200b\u5176\u4ed6\u200b\u5b9e\u7528\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bb8\u53ef\u200b\u90fd\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5265\u593a\u200b\u60a8\u200b\u5206\u4eab\u200b\u548c\u200b\u6539\u53d8\u200b\u4f5c\u54c1\u200b\u7684\u200b\u81ea\u7531\u200b\u3002\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u4fdd\u8bc1\u200b\u60a8\u200b\u5206\u4eab\u200b\u548c\u200b\u6539\u53d8\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6240\u6709\u200b\u7248\u672c\u200b\u7684\u200b\u81ea\u7531\u200b\u2013\u200b\u786e\u4fdd\u200b\u5b83\u200b\u5bf9\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u90fd\u200b\u662f\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u3002</p> <p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u8c08\u8bba\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u81ea\u7531\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u4ef7\u683c\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u662f\u200b\u4e3a\u4e86\u200b\u786e\u4fdd\u60a8\u200b\u6709\u200b\u5206\u53d1\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u526f\u672c\u200b\u7684\u200b\u81ea\u7531\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u613f\u610f\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6536\u8d39\u200b\uff09\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6536\u5230\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u6216\u8005\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u5f97\u5230\u200b\u5b83\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b\u8f6f\u4ef6\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u7684\u200b\u81ea\u7531\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5b83\u200b\u7684\u200b\u7247\u6bb5\u200b\uff0c\u200b\u800c\u4e14\u200b\u60a8\u200b\u77e5\u9053\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u505a\u200b\u8fd9\u4e9b\u200b\u4e8b\u60c5\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u901a\u8fc7\u200b\u4e24\u4e2a\u200b\u6b65\u9aa4\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u3002(1)\u200b\u4e3b\u5f20\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u7248\u6743\u200b\uff0c(2)\u200b\u5411\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5408\u6cd5\u200b\u5730\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\u548c\u200b/\u200b\u6216\u200b\u4fee\u6539\u200b\u8be5\u8f6f\u4ef6\u200b\u3002</p> <p>\u200b\u634d\u536b\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u81ea\u7531\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6b21\u8981\u200b\u597d\u5904\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u66ff\u4ee3\u200b\u7248\u672c\u200b\u5f97\u5230\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f9b\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u4f7f\u7528\u200b\u3002\u200b\u8bb8\u591a\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u5bf9\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u5408\u4f5c\u200b\u611f\u5230\u200b\u632f\u594b\u200b\u548c\u200b\u9f13\u821e\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5728\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u7684\u200b\u8f6f\u4ef6\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u7ed3\u679c\u200b\u53ef\u80fd\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u3002GNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u5141\u8bb8\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u8ba9\u200b\u516c\u4f17\u200b\u5728\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u8bbf\u95ee\u200b\u5b83\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5411\u200b\u516c\u4f17\u200b\u53d1\u5e03\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u3002</p> <p>GNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u662f\u200b\u4e13\u95e8\u200b\u8bbe\u8ba1\u200b\u6765\u200b\u786e\u4fdd\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u793e\u533a\u200b\u4f7f\u7528\u200b\u3002\u200b\u5b83\u200b\u8981\u6c42\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u8fd0\u8425\u5546\u200b\u5411\u200b\u8be5\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u8fd0\u884c\u200b\u5728\u200b\u90a3\u91cc\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u516c\u5f00\u200b\u8bbf\u95ee\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u516c\u5f00\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u4f7f\u200b\u516c\u4f17\u200b\u80fd\u591f\u200b\u83b7\u5f97\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002</p> <p>\u200b\u4e00\u4e2a\u200b\u8f83\u200b\u65e9\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u79f0\u4e3a\u200bAffero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u7531\u200bAffero\u200b\u53d1\u5e03\u200b\uff0c\u200b\u65e8\u5728\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u76ee\u6807\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u4e0d\u662f\u200bAffero GPL\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u200bAffero\u200b\u5df2\u7ecf\u200b\u53d1\u5e03\u200b\u4e86\u200bAffero GPL\u200b\u7684\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7248\u672c\u200b\uff0c\u200b\u5141\u8bb8\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u91cd\u65b0\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5173\u4e8e\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\u548c\u200b\u4fee\u6539\u200b\u7684\u200b\u786e\u5207\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b\u5982\u4e0b\u200b\u3002</p>"},{"location":"zh/about/license/#_2","title":"\u6761\u6b3e\u200b\u4e0e\u200b\u6761\u4ef6","text":""},{"location":"zh/about/license/#0","title":"0. \u200b\u5b9a\u4e49\u200b.","text":"<p>\u201c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u201d \u200b\u662f\u200b\u6307\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7b2c\u4e09\u7248\u200b\u3002 \u201c\u200b\u7248\u6743\u200b\u201d \u200b\u4e5f\u200b\u6307\u200b\u9002\u7528\u200b\u4e8e\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u7248\u6743\u200b\u7684\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u5982\u200b\u534a\u5bfc\u4f53\u200b\u63a9\u6a21\u200b\u3002</p> <p>\u201c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u8bb8\u53ef\u200b\u7684\u200b\u4efb\u4f55\u200b\u6709\u200b\u7248\u6743\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u90fd\u200b\u88ab\u200b\u79f0\u547c\u200b\u4e3a\u200b \u201c\u200b\u60a8\u200b\u201d\u3002\u201d\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u201d \u200b\u548c\u200b \u201c\u200b\u63a5\u53d7\u8005\u200b\u201d \u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e2a\u4eba\u200b\u6216\u200b\u7ec4\u7ec7\u200b\u3002</p> <p>\u201c\u200b\u4fee\u6539\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u4ee5\u200b\u9700\u8981\u200b\u7248\u6743\u200b\u8bb8\u53ef\u200b\u7684\u200b\u65b9\u5f0f\u200b\u590d\u5236\u200b\u6216\u200b\u6539\u7f16\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5168\u90e8\u200b\u6216\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u7684\u200b\u526f\u672c\u200b\u3002\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u65e9\u671f\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u4fee\u6539\u7248\u200b\u201d \u200b\u6216\u200b \u201c\u200b\u57fa\u4e8e\u200b\u201d \u200b\u65e9\u671f\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002 \u200b\u4e00\u4e2a\u200b \u201c\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u57fa\u4e8e\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002</p> <p>\u201c\u200b\u4f20\u64ad\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u200b\u5728\u200b\u672a\u7ecf\u8bb8\u53ef\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u505a\u200b\u4efb\u4f55\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u4f7f\u200b\u60a8\u200b\u5728\u200b\u9002\u7528\u200b\u7684\u200b\u7248\u6743\u6cd5\u200b\u4e0b\u200b\u627f\u62c5\u200b\u76f4\u63a5\u200b\u6216\u200b\u95f4\u63a5\u200b\u7684\u200b\u4fb5\u6743\u200b\u8d23\u4efb\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u6267\u884c\u200b\u6216\u200b\u4fee\u6539\u200b\u79c1\u4eba\u200b\u526f\u672c\u200b\u9664\u5916\u200b\u3002\u200b\u4f20\u64ad\u200b\u5305\u62ec\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\uff08\u200b\u65e0\u8bba\u200b\u662f\u5426\u200b\u4fee\u6539\u200b\uff09\u3001\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e9b\u200b\u56fd\u5bb6\u200b\u8fd8\u200b\u5305\u62ec\u200b\u5176\u4ed6\u200b\u6d3b\u52a8\u200b\u3002 \u200b\u4f20\u64ad\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u4f7f\u200b\u5176\u4ed6\u200b\u5404\u65b9\u200b\u80fd\u591f\u200b\u5236\u4f5c\u200b\u6216\u200b\u63a5\u53d7\u200b\u526f\u672c\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u4f20\u64ad\u200b\u3002\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u4e0e\u200b\u7528\u6237\u200b\u4e92\u52a8\u200b\uff0c\u200b\u800c\u200b\u6ca1\u6709\u200b\u8f6c\u8ba9\u200b\u526f\u672c\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u662f\u200b\u4f20\u64ad\u200b\u3002</p> <p>\u200b\u4ea4\u4e92\u5f0f\u200b\u7528\u6237\u754c\u9762\u200b\u663e\u793a\u200b \u201c\u200b\u9002\u5f53\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u201d \u200b\u7684\u200b\u7a0b\u5ea6\u200b\u662f\u200b\uff0c\u200b\u5b83\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u65b9\u4fbf\u200b\u548c\u200b\u663e\u773c\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c(1)\u200b\u663e\u793a\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u58f0\u660e\u200b\uff0c(2)\u200b\u544a\u8bc9\u200b\u7528\u6237\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u6ca1\u6709\u200b\u4fdd\u8bc1\u200b\uff08\u200b\u9664\u4e86\u200b\u63d0\u4f9b\u200b\u4fdd\u8bc1\u200b\u7684\u200b\u8303\u56f4\u200b\uff09\uff0c\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u200b\u4f20\u8fbe\u200b\u8be5\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u67e5\u770b\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u526f\u672c\u200b\u3002\u200b\u5982\u679c\u200b\u754c\u9762\u200b\u5448\u73b0\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u6237\u200b\u547d\u4ee4\u200b\u6216\u200b\u9009\u9879\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u5982\u200b\u83dc\u5355\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u7a81\u51fa\u200b\u9879\u76ee\u200b\u5c31\u200b\u7b26\u5408\u200b\u8fd9\u4e00\u200b\u6807\u51c6\u200b\u3002</p>"},{"location":"zh/about/license/#1","title":"1. \u200b\u6e90\u4ee3\u7801\u200b.","text":"<p>\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\u7684\u200b\u9996\u9009\u200b\u5f62\u5f0f\u200b\u3002\u201d\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4efb\u4f55\u200b\u975e\u200b\u6e90\u7801\u200b\u5f62\u5f0f\u200b\u3002</p> <p>\u201c\u200b\u6807\u51c6\u63a5\u53e3\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u7531\u200b\u516c\u8ba4\u200b\u7684\u200b\u6807\u51c6\u200b\u673a\u6784\u200b\u5b9a\u4e49\u200b\u7684\u200b\u5b98\u65b9\u200b\u6807\u51c6\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6216\u8005\u200b\u5728\u200b\u4e3a\u200b\u67d0\u200b\u4e00\u200b\u7279\u5b9a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u6307\u5b9a\u200b\u63a5\u53e3\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6307\u5728\u200b\u4f7f\u7528\u200b\u8be5\u200b\u8bed\u8a00\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u4e2d\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002</p> <p>\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u7cfb\u7edf\u200b\u5e93\u200b\u201d \u200b\u5305\u62ec\u200b\u9664\u200b\u4f5c\u54c1\u200b\u6574\u4f53\u200b\u4ee5\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u4e1c\u897f\u200b(a)\u200b\u4ee5\u200b\u6b63\u5e38\u200b\u7684\u200b\u5f62\u5f0f\u200b\u6253\u5305\u200b\u4e00\u4e2a\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u662f\u200b\u8be5\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u4ee5\u53ca\u200b(b)\u200b\u4ec5\u200b\u7528\u4e8e\u200b\u4f7f\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u8be5\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u6807\u51c6\u63a5\u53e3\u200b\uff0c\u200b\u8be5\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5df2\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200b \u201c\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\u6240\u200b\u8fd0\u884c\u200b\u7684\u200b\u7279\u5b9a\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\u7684\u8bdd\u200b\uff09\u200b\u7684\u200b\u4e3b\u8981\u200b\u57fa\u672c\u200b\u90e8\u4ef6\u200b\uff08\u200b\u5185\u6838\u200b\u3001\u200b\u7a97\u53e3\u200b\u7cfb\u7edf\u200b\u7b49\u200b\uff09\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u5236\u4f5c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u8fd0\u884c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u89e3\u91ca\u5668\u200b\u3002</p> <p>\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u751f\u6210\u200b\u3001\u200b\u5b89\u88c5\u200b\u548c\u200b\uff08\u200b\u5bf9\u4e8e\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\uff09\u200b\u8fd0\u884c\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u4ee5\u53ca\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u5305\u62ec\u200b\u63a7\u5236\u200b\u8fd9\u4e9b\u200b\u6d3b\u52a8\u200b\u7684\u200b\u811a\u672c\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5b83\u200b\u4e0d\u200b\u5305\u62ec\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7cfb\u7edf\u200b\u5e93\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5728\u200b\u6267\u884c\u200b\u8fd9\u4e9b\u200b\u6d3b\u52a8\u200b\u65f6\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u4f46\u200b\u4e0d\u200b\u5c5e\u4e8e\u200b\u4f5c\u54c1\u200b\u7684\u200b\u901a\u7528\u200b\u5de5\u5177\u200b\u6216\u200b\u666e\u904d\u200b\u53ef\u7528\u200b\u7684\u200b\u514d\u8d39\u200b\u7a0b\u5e8f\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u76f8\u5e94\u200b\u6e90\u200b\u5305\u62ec\u200b\u4e0e\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\u76f8\u5173\u200b\u7684\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4f5c\u54c1\u200b\u4e13\u95e8\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u5171\u4eab\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u7684\u200b\u5b50\u7a0b\u5e8f\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u4f8b\u5982\u200b\u901a\u8fc7\u200b\u4eb2\u5bc6\u200b\u7684\u200b\u6570\u636e\u901a\u4fe1\u200b\u6216\u200b\u63a7\u5236\u6d41\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u5b50\u7a0b\u5e8f\u200b\u548c\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u4e4b\u95f4\u200b\u3002</p> <p>\u200b\u76f8\u5e94\u200b\u6e90\u200b\u4e0d\u200b\u9700\u8981\u200b\u5305\u62ec\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u76f8\u5e94\u200b\u6e90\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\u3002</p> <p>\u200b\u6e90\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u200b\u662f\u200b\u6307\u200b\u540c\u4e00\u200b\u4f5c\u54c1\u200b\u3002</p>"},{"location":"zh/about/license/#2","title":"2. \u200b\u57fa\u672c\u200b\u6743\u9650\u200b.","text":"<p>\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6388\u4e88\u200b\u7684\u200b\u6240\u6709\u200b\u6743\u5229\u200b\u90fd\u200b\u662f\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u7248\u6743\u200b\u671f\u9650\u5185\u200b\u6388\u4e88\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u6ee1\u8db3\u200b\u6240\u8ff0\u200b\u6761\u4ef6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u662f\u200b\u4e0d\u53ef\u200b\u64a4\u6d88\u200b\u7684\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u660e\u786e\u200b\u80af\u5b9a\u200b\u4e86\u200b\u60a8\u200b\u5bf9\u200b\u8fd0\u884c\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u65e0\u9650\u200b\u8bb8\u53ef\u200b\u3002\u200b\u53ea\u6709\u200b\u5728\u200b\u8f93\u51fa\u200b\u7684\u200b\u5185\u5bb9\u200b\u6784\u6210\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd0\u884c\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8f93\u51fa\u200b\u624d\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fdd\u62a4\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u627f\u8ba4\u200b\u60a8\u200b\u7684\u200b\u5408\u7406\u200b\u4f7f\u7528\u6743\u200b\u6216\u200b\u7248\u6743\u6cd5\u200b\u6240\u200b\u89c4\u5b9a\u200b\u7684\u200b\u5176\u4ed6\u200b\u540c\u7b49\u200b\u6743\u5229\u200b\u3002</p> <p>\u200b\u53ea\u8981\u200b\u60a8\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u4ecd\u7136\u200b\u6709\u6548\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u65e0\u6761\u4ef6\u200b\u5730\u200b\u5236\u4f5c\u200b\u3001\u200b\u8fd0\u884c\u200b\u548c\u200b\u4f20\u64ad\u200b\u60a8\u200b\u6ca1\u6709\u200b\u8f6c\u8fbe\u200b\u7684\u200b\u6db5\u76d6\u200b\u4f5c\u54c1\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4f20\u8fbe\u200b\u7ed9\u200b\u5176\u4ed6\u4eba\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u8ba9\u200b\u4ed6\u4eec\u200b\u4e13\u95e8\u200b\u4e3a\u200b\u60a8\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\uff0c\u200b\u6216\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u8fd0\u884c\u200b\u8fd9\u4e9b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bbe\u65bd\u200b\uff0c\u200b\u524d\u63d0\u200b\u662f\u200b\u60a8\u200b\u5728\u200b\u4f20\u8fbe\u200b\u6240\u6709\u200b\u60a8\u200b\u4e0d\u200b\u63a7\u5236\u200b\u7248\u6743\u200b\u7684\u200b\u6750\u6599\u200b\u65f6\u200b\u9075\u5b88\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u3002\u200b\u90a3\u4e9b\u200b\u4e3a\u200b\u60a8\u200b\u5236\u4f5c\u200b\u6216\u200b\u8fd0\u884c\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4eba\u200b\u5fc5\u987b\u200b\u5b8c\u5168\u200b\u4ee3\u8868\u200b\u60a8\u200b\uff0c\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u6307\u5bfc\u200b\u548c\u200b\u63a7\u5236\u200b\u4e0b\u200b\uff0c\u200b\u6309\u7167\u200b\u7981\u6b62\u200b\u4ed6\u4eec\u200b\u5728\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b\u5173\u7cfb\u200b\u4e4b\u5916\u200b\u5236\u4f5c\u200b\u60a8\u200b\u7684\u200b\u7248\u6743\u200b\u6750\u6599\u200b\u7684\u200b\u4efb\u4f55\u200b\u526f\u672c\u200b\u7684\u200b\u6761\u6b3e\u200b\u6765\u200b\u8fdb\u884c\u200b\u3002</p> <p>\u200b\u5728\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4ec5\u200b\u5728\u200b\u4e0b\u8ff0\u200b\u6761\u4ef6\u200b\u4e0b\u200b\u5141\u8bb8\u200b\u8f6c\u8ba9\u200b\u3002\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u8f6c\u200b\u6388\u6743\u200b\uff1b\u200b\u7b2c\u200b10\u200b\u6761\u200b\u89c4\u5b9a\u200b\u6ca1\u6709\u200b\u5fc5\u8981\u200b\u3002</p>"},{"location":"zh/about/license/#3","title":"3. \u200b\u4ece\u200b\u53cd\u200b\u89c4\u907f\u200b\u6cd5\u4e2d\u200b\u4fdd\u62a4\u200b\u7528\u6237\u200b\u7684\u200b\u5408\u6cd5\u6743\u5229\u200b.","text":"<p>\u200b\u6839\u636e\u200b\u4efb\u4f55\u200b\u5c65\u884c\u200b1996\u200b\u5e74\u200b12\u200b\u6708\u200b20\u200b\u65e5\u200b\u901a\u8fc7\u200b\u7684\u200b\u4e16\u754c\u77e5\u8bc6\u4ea7\u6743\u7ec4\u7ec7\u200b\u7248\u6743\u200b\u6761\u7ea6\u200b\u7b2c\u200b11\u200b\u6761\u200b\u89c4\u5b9a\u200b\u7684\u200b\u4e49\u52a1\u200b\u7684\u200b\u9002\u7528\u6cd5\u5f8b\u200b\uff0c\u200b\u6216\u200b\u7981\u6b62\u200b\u6216\u200b\u9650\u5236\u200b\u89c4\u907f\u200b\u6b64\u7c7b\u200b\u63aa\u65bd\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u4efb\u4f55\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u90fd\u200b\u4e0d\u5f97\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u6709\u6548\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u4f20\u8fbe\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u653e\u5f03\u200b\u4efb\u4f55\u200b\u7981\u6b62\u200b\u89c4\u907f\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u529b\u200b\uff0c\u200b\u53ea\u8981\u200b\u8fd9\u79cd\u200b\u89c4\u907f\u200b\u662f\u200b\u901a\u8fc7\u200b\u5bf9\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\u800c\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5426\u8ba4\u200b\u6709\u200b\u4efb\u4f55\u200b\u9650\u5236\u200b\u64cd\u4f5c\u200b\u6216\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u7684\u200b\u610f\u56fe\u200b\uff0c\u200b\u4ee5\u200b\u4f5c\u4e3a\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7528\u6237\u200b\u5f3a\u5236\u6267\u884c\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u7981\u6b62\u200b\u89c4\u907f\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\u7684\u200b\u624b\u6bb5\u200b\u3002</p>"},{"location":"zh/about/license/#4","title":"4. \u200b\u4f20\u9012\u200b\u9010\u5b57\u200b\u62f7\u8d1d\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6536\u5230\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u540e\u200b\uff0c\u200b\u4ee5\u200b\u4efb\u4f55\u200b\u5a92\u4ecb\u200b\u4f20\u9012\u200b\u5176\u200b\u9010\u5b57\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u5728\u200b\u6bcf\u4efd\u200b\u62f7\u8d1d\u200b\u4e0a\u200b\u9192\u76ee\u200b\u5730\u200b\u3001\u200b\u9002\u5f53\u200b\u5730\u200b\u53d1\u5e03\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u58f0\u660e\u200b\uff1b\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u8bf4\u660e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u548c\u200b\u6839\u636e\u200b\u7b2c\u200b7\u200b\u6761\u200b\u6dfb\u52a0\u200b\u7684\u200b\u4efb\u4f55\u200b\u975e\u200b\u8bb8\u53ef\u200b\u6761\u6b3e\u200b\u9002\u7528\u200b\u4e8e\u200b\u4ee3\u7801\u200b\u7684\u200b\u58f0\u660e\u200b\u5b8c\u6574\u65e0\u7f3a\u200b\uff1b\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u5173\u4e8e\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\u7684\u200b\u58f0\u660e\u200b\u5b8c\u6574\u65e0\u7f3a\u200b\uff1b\u200b\u5e76\u200b\u5c06\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u62f7\u8d1d\u200b\u4e0e\u200b\u7a0b\u5e8f\u200b\u4e00\u8d77\u200b\u4ea4\u7ed9\u200b\u6240\u6709\u200b\u63a5\u6536\u8005\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u6bcf\u4efd\u200b\u62f7\u8d1d\u200b\u6536\u53d6\u200b\u4efb\u4f55\u200b\u8d39\u7528\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u6536\u53d6\u200b\u4efb\u4f55\u200b\u8d39\u7528\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u6709\u507f\u200b\u7684\u200b\u652f\u6301\u200b\u6216\u200b\u4fdd\u4fee\u200b\u4fdd\u62a4\u200b\u3002</p>"},{"location":"zh/about/license/#5","title":"5. \u200b\u4f20\u9012\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u6e90\u200b\u7248\u672c\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u7b2c\u200b 4 \u200b\u8282\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u8fbe\u200b\u57fa\u4e8e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u6216\u200b\u6839\u636e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4fee\u6539\u200b\u800c\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u6240\u6709\u200b\u6761\u4ef6\u200b:</p> <p>a) \u200b\u4f5c\u54c1\u200b\u5fc5\u987b\u200b\u6709\u200b\u9192\u76ee\u200b\u7684\u200b\u58f0\u660e\u200b\uff0c\u200b\u8bf4\u660e\u200b\u60a8\u200b\u4fee\u6539\u200b\u4e86\u200b\u5b83\u200b\uff0c\u200b\u5e76\u200b\u7ed9\u51fa\u200b\u76f8\u5173\u200b\u7684\u200b\u65e5\u671f\u200b\u3002 b) \u200b\u4f5c\u54c1\u200b\u5fc5\u987b\u200b\u6709\u200b\u9192\u76ee\u200b\u7684\u200b\u58f0\u660e\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u200b\u662f\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u548c\u200b\u6839\u636e\u200b\u7b2c\u200b7\u200b\u6761\u200b\u589e\u52a0\u200b\u7684\u200b\u6761\u4ef6\u200b\u53d1\u5e03\u200b\u7684\u200b\u3002\u200b\u8fd9\u4e00\u200b\u8981\u6c42\u200b\u4fee\u6539\u200b\u4e86\u200b\u7b2c\u200b4\u200b\u8282\u4e2d\u200b \u201c\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u901a\u77e5\u200b\u7684\u200b\u5b8c\u6574\u6027\u200b\u201d \u200b\u7684\u200b\u8981\u6c42\u200b\u3002 c) \u200b\u60a8\u200b\u5fc5\u987b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u6574\u4e2a\u200b\u4f5c\u54c1\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u6574\u4f53\u200b\u8bb8\u53ef\u200b\u7ed9\u200b\u4efb\u4f55\u200b\u62e5\u6709\u200b\u5176\u200b\u526f\u672c\u200b\u7684\u200b\u4eba\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u9002\u7528\u200b\u7684\u200b\u7b2c\u200b7\u200b\u6761\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\u4e00\u8d77\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u6574\u4e2a\u200b\u4f5c\u54c1\u200b\u53ca\u5176\u200b\u6240\u6709\u200b\u90e8\u5206\u200b\uff0c\u200b\u65e0\u8bba\u200b\u5b83\u4eec\u200b\u662f\u200b\u5982\u4f55\u200b\u5305\u88c5\u200b\u7684\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u4ee5\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8bb8\u53ef\u200b\u8be5\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5355\u72ec\u200b\u6536\u5230\u200b\u4e86\u200b\u8fd9\u79cd\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5b83\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u4f7f\u200b\u8fd9\u79cd\u200b\u8bb8\u53ef\u200b\u5931\u6548\u200b\u3002 \u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u5176\u4ed6\u200b\u5355\u72ec\u200b\u548c\u200b\u72ec\u7acb\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6c47\u7f16\u200b\uff0c\u200b\u5176\u200b\u6027\u8d28\u200b\u4e0d\u662f\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5ef6\u4f38\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6ca1\u6709\u200b\u4e0e\u200b\u4e4b\u200b\u7ed3\u5408\u200b\u4ee5\u200b\u5f62\u6210\u200b\u66f4\u5927\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5728\u200b\u5b58\u50a8\u200b\u6216\u200b\u5206\u53d1\u200b\u5a92\u4ecb\u200b\u7684\u200b\u67d0\u200b\u4e00\u5377\u200b\u4e0a\u200b\uff0c\u200b\u5982\u679c\u200b\u8be5\u200b\u6c47\u7f16\u200b\u53ca\u5176\u200b\u4ea7\u751f\u200b\u7684\u200b\u7248\u6743\u200b\u6ca1\u6709\u200b\u88ab\u200b\u7528\u6765\u200b\u9650\u5236\u200b\u6c47\u7f16\u200b\u7528\u6237\u200b\u7684\u200b\u8bbf\u95ee\u200b\u6216\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\uff0c\u200b\u8d85\u51fa\u200b\u5355\u4e2a\u200b\u4f5c\u54c1\u200b\u5141\u8bb8\u200b\u7684\u200b\u8303\u56f4\u200b\uff0c\u200b\u5219\u200b\u88ab\u200b\u79f0\u4e3a\u200b \u201c\u200b\u805a\u5408\u200b\u201d\u3002\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u5305\u542b\u200b\u5728\u200b\u4e00\u4e2a\u200b\u603b\u4f53\u200b\u4e2d\u200b\u5e76\u200b\u4e0d\u200b\u5bfc\u81f4\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u9002\u7528\u200b\u4e8e\u200b\u603b\u4f53\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u3002</p>"},{"location":"zh/about/license/#6","title":"6. \u200b\u4f20\u9012\u200b\u975e\u6e90\u200b\u5f62\u5f0f\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u7b2c\u200b4\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b5\u200b\u6761\u200b\u7684\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u4ee5\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u9012\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u4e5f\u200b\u5fc5\u987b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u4ee5\u200b\u4e0b\u5217\u200b\u65b9\u5f0f\u200b\u4e4b\u4e00\u200b\u4f20\u9012\u200b\u673a\u5668\u200b\u53ef\u8bfb\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b:</p> <p>a) \u200b\u5728\u200b\u5b9e\u4f53\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u4f53\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f20\u9012\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6216\u200b\u4f53\u73b0\u200b\u5728\u200b\u5b9e\u4f53\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u4f53\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u5c06\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u56fa\u5b9a\u200b\u5728\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u8f6f\u4ef6\u200b\u4ea4\u6362\u200b\u7684\u200b\u8010\u7528\u200b\u5b9e\u4f53\u200b\u5a92\u4ecb\u200b\u4e0a\u200b\u3002 b) \u200b\u5728\u200b\u5b9e\u7269\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u7269\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f20\u9012\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6216\u200b\u5728\u200b\u5b9e\u7269\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u7269\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f53\u73b0\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u9644\u6709\u200b\u4e00\u4efd\u200b\u81f3\u5c11\u200b\u4e09\u5e74\u200b\u6709\u6548\u200b\u7684\u200b\u4e66\u9762\u200b\u62a5\u4ef7\u200b\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u4e3a\u200b\u8be5\u200b\u4ea7\u54c1\u578b\u53f7\u200b\u63d0\u4f9b\u200b\u5907\u4ef6\u200b\u6216\u200b\u5ba2\u6237\u200b\u652f\u6301\u200b\uff0c\u200b\u5c31\u200b\u4e00\u76f4\u200b\u6709\u6548\u200b\u3002\u200b\u5411\u200b\u4efb\u4f55\u200b\u62e5\u6709\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u4eba\u200b\u63d0\u4f9b\u200b(1)\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6240\u200b\u6db5\u76d6\u200b\u7684\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u6240\u6709\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u62f7\u8d1d\u200b\u5728\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u8f6f\u4ef6\u200b\u4ea4\u6362\u200b\u7684\u200b\u8010\u7528\u200b\u7269\u7406\u4ecb\u8d28\u200b\u4e0a\u200b\uff0c\u200b\u5176\u200b\u4ef7\u683c\u200b\u4e0d\u200b\u8d85\u8fc7\u200b\u8d35\u65b9\u200b\u5b9e\u9645\u200b\u6267\u884c\u200b\u8fd9\u4e00\u200b\u4f20\u9012\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5408\u7406\u200b\u6210\u672c\u200b\uff0c\u200b\u6216\u8005\u200b(2)\u200b\u4ece\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u514d\u8d39\u200b\u83b7\u53d6\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u62f7\u8d1d\u200b\u3002 c) \u200b\u5c06\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5355\u4e2a\u200b\u526f\u672c\u200b\u4e0e\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u7684\u200b\u4e66\u9762\u200b\u63d0\u8bae\u200b\u7684\u200b\u526f\u672c\u200b\u4e00\u8d77\u200b\u4f20\u9001\u200b\u3002\u200b\u53ea\u6709\u200b\u5728\u200b\u5076\u5c14\u200b\u548c\u200b\u975e\u5546\u4e1a\u6027\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ea\u6709\u200b\u5728\u200b\u60a8\u200b\u6536\u5230\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u548c\u200b\u8fd9\u79cd\u200b\u63d0\u8bae\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u624d\u200b\u5141\u8bb8\u200b\u8fd9\u79cd\u200b\u9009\u62e9\u200b\uff0c\u200b\u7b26\u5408\u200b\u7b2c\u200b6b\u200b\u6b3e\u200b\u7684\u200b\u89c4\u5b9a\u200b\u3002 d) \u200b\u901a\u8fc7\u200b\u63d0\u4f9b\u200b\u4ece\u200b\u6307\u5b9a\u200b\u5730\u70b9\u200b\uff08\u200b\u514d\u8d39\u200b\u6216\u200b\u6536\u8d39\u200b\uff09\u200b\u83b7\u53d6\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u540c\u6837\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u8fc7\u200b\u540c\u4e00\u200b\u5730\u70b9\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\uff0c\u200b\u800c\u200b\u4e0d\u518d\u200b\u6536\u8d39\u200b\u3002\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u8981\u6c42\u200b\u63a5\u53d7\u8005\u200b\u5728\u200b\u590d\u5236\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u540c\u65f6\u200b\u590d\u5236\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002\u200b\u5982\u679c\u200b\u590d\u5236\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5730\u65b9\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u53ef\u4ee5\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u540c\u7b49\u200b\u590d\u5236\u200b\u8bbe\u65bd\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff08\u200b\u7531\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u8fd0\u8425\u200b\uff09\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u5728\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u65c1\u8fb9\u200b\u4fdd\u6301\u200b\u660e\u786e\u200b\u7684\u200b\u6307\u793a\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5728\u200b\u54ea\u91cc\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u3002\u200b\u65e0\u8bba\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u5728\u200b\u54ea\u4e2a\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff0c\u200b\u60a8\u200b\u90fd\u200b\u6709\u200b\u4e49\u52a1\u200b\u786e\u4fdd\u200b\u5728\u200b\u6ee1\u8db3\u200b\u8fd9\u4e9b\u200b\u8981\u6c42\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u63d0\u4f9b\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u3002 e) \u200b\u4f7f\u7528\u200b\u70b9\u5bf9\u70b9\u200b\u4f20\u8f93\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4f20\u9001\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u544a\u77e5\u200b\u5176\u4ed6\u200b\u540c\u884c\u200b\uff0c\u200b\u6839\u636e\u200b\u7b2c\u200b6d\u200b\u6b3e\u200b\uff0c\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u548c\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u6b63\u5728\u200b\u514d\u8d39\u200b\u63d0\u4f9b\u200b\u7ed9\u200b\u516c\u4f17\u200b\u3002 \u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u200b\u5206\u79bb\u200b\u90e8\u5206\u200b\uff0c\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u4f5c\u4e3a\u200b\u7cfb\u7edf\u200b\u5e93\u200b\u88ab\u200b\u6392\u9664\u200b\u5728\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\u4e4b\u5916\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5305\u62ec\u200b\u5728\u200b\u4f20\u8fbe\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b \u201c\u200b\u662f\u200b\u6307\u200b(1) \u201c\u200b\u6d88\u8d39\u54c1\u200b\u201d\uff0c\u200b\u5373\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u4e2a\u4eba\u200b\u3001\u200b\u5bb6\u5ead\u200b\u6216\u200b\u5bb6\u5c45\u200b\u7528\u9014\u200b\u7684\u200b\u4efb\u4f55\u200b\u6709\u5f62\u200b\u4e2a\u4eba\u8d22\u4ea7\u200b\uff0c\u200b\u6216\u200b(2)\u200b\u4e3a\u200b\u7eb3\u5165\u200b\u4f4f\u5b85\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u6216\u200b\u51fa\u552e\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\u3002\u200b\u5728\u200b\u786e\u5b9a\u200b\u4e00\u4e2a\u200b\u4ea7\u54c1\u200b\u662f\u5426\u662f\u200b\u6d88\u8d39\u54c1\u200b\u65f6\u200b\uff0c\u200b\u6709\u200b\u7591\u95ee\u200b\u7684\u200b\u60c5\u51b5\u200b\u5e94\u200b\u4ee5\u200b\u6709\u5229\u4e8e\u200b\u627f\u4fdd\u200b\u7684\u200b\u65b9\u5f0f\u200b\u89e3\u51b3\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u6536\u5230\u200b\u7684\u200b\u7279\u5b9a\u200b\u4ea7\u54c1\u200b\uff0c\u201d\u200b\u901a\u5e38\u200b\u4f7f\u7528\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u8be5\u7c7b\u200b\u4ea7\u54c1\u200b\u7684\u200b\u5178\u578b\u200b\u6216\u200b\u5e38\u89c1\u200b\u7528\u9014\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u8003\u8651\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u7684\u200b\u5730\u4f4d\u200b\u6216\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u6216\u200b\u671f\u671b\u200b\u6216\u200b\u9884\u671f\u200b\u4f7f\u7528\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u200b\u4e00\u4e2a\u200b\u4ea7\u54c1\u200b\u662f\u200b\u6d88\u8d39\u7c7b\u200b\u4ea7\u54c1\u200b\uff0c\u200b\u65e0\u8bba\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u662f\u5426\u200b\u6709\u200b\u5927\u91cf\u200b\u7684\u200b\u5546\u4e1a\u200b\u3001\u200b\u5de5\u4e1a\u200b\u6216\u975e\u200b\u6d88\u8d39\u7c7b\u200b\u7528\u9014\u200b\uff0c\u200b\u9664\u975e\u200b\u8fd9\u4e9b\u200b\u7528\u9014\u200b\u662f\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u7684\u200b\u552f\u4e00\u200b\u91cd\u8981\u200b\u4f7f\u7528\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u7684\u200b \u201c\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5728\u200b\u8be5\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u4ece\u200b\u5176\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u5b89\u88c5\u200b\u548c\u200b\u6267\u884c\u200b\u6240\u200b\u6db5\u76d6\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4efb\u4f55\u200b\u65b9\u6cd5\u200b\u3001\u200b\u7a0b\u5e8f\u200b\u3001\u200b\u6388\u6743\u200b\u5bc6\u94a5\u200b\u6216\u200b\u5176\u4ed6\u200b\u4fe1\u606f\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u5fc5\u987b\u200b\u8db3\u4ee5\u200b\u786e\u4fdd\u200b\u5728\u200b\u4efb\u4f55\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u4ec5\u4ec5\u200b\u56e0\u4e3a\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4fee\u6539\u200b\u800c\u200b\u963b\u6b62\u200b\u6216\u200b\u5e72\u6270\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u7ee7\u7eed\u200b\u8fd0\u884c\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\uff0c\u200b\u6216\u200b\u4e0e\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e00\u8d77\u200b\uff0c\u200b\u6216\u200b\u4e13\u95e8\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5e76\u200b\u4f5c\u4e3a\u200b\u4ea4\u6613\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5c06\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u7684\u200b\u62e5\u6709\u6743\u200b\u548c\u200b\u4f7f\u7528\u6743\u200b\u6c38\u4e45\u200b\u6216\u200b\u56fa\u5b9a\u200b\u5730\u200b\u8f6c\u8ba9\u200b\u7ed9\u200b\u63a5\u53d7\u8005\u200b\uff08\u200b\u65e0\u8bba\u200b\u4ea4\u6613\u200b\u5982\u4f55\u200b\u5b9a\u6027\u200b\uff09\uff0c\u200b\u6839\u636e\u200b\u672c\u6761\u200b\u89c4\u5b9a\u200b\u8f6c\u8ba9\u200b\u7684\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u5fc5\u987b\u200b\u9644\u6709\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u6216\u200b\u4efb\u4f55\u200b\u7b2c\u4e09\u65b9\u200b\u90fd\u200b\u6ca1\u6709\u200b\u4fdd\u7559\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e0a\u200b\u5b89\u88c5\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u80fd\u529b\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4f5c\u54c1\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u5728\u200bROM\u200b\u4e2d\u200b\uff09\uff0c\u200b\u5219\u200b\u8be5\u200b\u8981\u6c42\u200b\u4e0d\u200b\u9002\u7528\u200b\u3002</p> <p>\u200b\u63d0\u4f9b\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u7684\u200b\u8981\u6c42\u200b\u4e0d\u200b\u5305\u62ec\u200b\u7ee7\u7eed\u200b\u4e3a\u200b\u88ab\u200b\u63a5\u53d7\u8005\u200b\u4fee\u6539\u200b\u6216\u200b\u5b89\u88c5\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6216\u200b\u88ab\u200b\u4fee\u6539\u200b\u6216\u200b\u5b89\u88c5\u200b\u7684\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u63d0\u4f9b\u200b\u652f\u6301\u200b\u670d\u52a1\u200b\u3001\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u66f4\u65b0\u200b\u7684\u200b\u8981\u6c42\u200b\u3002\u200b\u5f53\u200b\u4fee\u6539\u200b\u672c\u8eab\u200b\u5bf9\u200b\u7f51\u7edc\u200b\u7684\u200b\u8fd0\u884c\u200b\u4ea7\u751f\u200b\u5b9e\u8d28\u6027\u200b\u7684\u200b\u4e0d\u5229\u200b\u5f71\u54cd\u200b\u6216\u200b\u8fdd\u53cd\u200b\u4e86\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u7684\u200b\u901a\u4fe1\u200b\u89c4\u5219\u200b\u548c\u200b\u534f\u8bae\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u62d2\u7edd\u200b\u8bbf\u95ee\u200b\u7f51\u7edc\u200b\u3002 \u200b\u6839\u636e\u200b\u672c\u200b\u8282\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u6240\u200b\u4f20\u8fbe\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u548c\u200b\u6240\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u5fc5\u987b\u200b\u662f\u200b\u516c\u5f00\u200b\u8bb0\u5f55\u200b\u7684\u200b\u683c\u5f0f\u200b\uff08\u200b\u5e76\u200b\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\u5b9e\u73b0\u200b\uff09\uff0c\u200b\u5e76\u4e14\u200b\u5fc5\u987b\u200b\u4e0d\u200b\u9700\u8981\u200b\u7279\u6b8a\u200b\u7684\u200b\u5bc6\u7801\u200b\u6216\u200b\u94a5\u5319\u200b\u6765\u200b\u89e3\u5305\u200b\u3001\u200b\u9605\u8bfb\u200b\u6216\u200b\u590d\u5236\u200b\u3002</p>"},{"location":"zh/about/license/#7","title":"7. \u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b.","text":"<p>\u201c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u201d \u200b\u662f\u200b\u5bf9\u200b\u672c\u200b\u8bb8\u53ef\u200b\u6761\u6b3e\u200b\u7684\u200b\u8865\u5145\u200b\uff0c\u200b\u5bf9\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u6761\u4ef6\u200b\u4f5c\u51fa\u200b\u4f8b\u5916\u200b\u89c4\u5b9a\u200b\u3002\u200b\u9002\u7528\u200b\u4e8e\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u5e94\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u5305\u62ec\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e2d\u200b\uff0c\u200b\u53ea\u8981\u200b\u5b83\u4eec\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u4e0b\u200b\u6709\u6548\u200b\u3002\u200b\u5982\u679c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u53ea\u200b\u9002\u7528\u200b\u4e8e\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u90e8\u5206\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u8fd9\u4e9b\u200b\u8bb8\u53ef\u200b\u5355\u72ec\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u4ecd\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7ba1\u8f96\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u8003\u8651\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8f6c\u9001\u200b\u4e00\u4efd\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u526f\u672c\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4ece\u200b\u8be5\u200b\u526f\u672c\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u4e2d\u200b\u5220\u9664\u200b\u4efb\u4f55\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u3002(\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u53ef\u80fd\u200b\u88ab\u200b\u5199\u6210\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5220\u9664\u200b)\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u60a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u7684\u200b\u6750\u6599\u200b\u4e0a\u200b\u653e\u7f6e\u200b\u989d\u5916\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e9b\u200b\u6750\u6599\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u6216\u200b\u53ef\u4ee5\u200b\u7ed9\u4e88\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u60a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u7684\u200b\u6750\u6599\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\uff08\u200b\u5982\u679c\u200b\u5f97\u5230\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u7684\u200b\u6388\u6743\u200b\uff09\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u6761\u6b3e\u200b\u8865\u5145\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b:</p> <p>a) \u200b\u4ee5\u200b\u4e0d\u540c\u4e8e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b15\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b16\u200b\u6761\u200b\u7684\u200b\u6761\u6b3e\u200b\u58f0\u660e\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u9650\u5236\u200b\u8d23\u4efb\u200b\uff1b\u200b\u6216\u200b b) \u200b\u8981\u6c42\u200b\u5728\u200b\u8be5\u200b\u6750\u6599\u200b\u6216\u200b\u5305\u542b\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6240\u200b\u663e\u793a\u200b\u7684\u200b\u9002\u5f53\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u4e2d\u200b\u4fdd\u7559\u200b\u7279\u5b9a\u200b\u7684\u200b\u5408\u7406\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u6216\u200b\u4f5c\u8005\u200b\u5f52\u5c5e\u200b\uff1b\u200b\u6216\u200b c) \u200b\u7981\u6b62\u200b\u6b6a\u66f2\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u6765\u6e90\u200b\uff0c\u200b\u6216\u200b\u8981\u6c42\u200b\u4ee5\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5c06\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u4e0e\u200b\u539f\u59cb\u200b\u7248\u672c\u200b\u4e0d\u540c\u200b\uff1b\u200b\u6216\u200b d) \u200b\u9650\u5236\u200b\u4e3a\u200b\u5ba3\u4f20\u200b\u76ee\u7684\u200b\u4f7f\u7528\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u6216\u200b\u4f5c\u8005\u200b\u7684\u200b\u59d3\u540d\u200b\uff1b\u200b\u6216\u200b e) \u200b\u62d2\u7edd\u200b\u6839\u636e\u200b\u5546\u6807\u6cd5\u200b\u6388\u4e88\u200b\u4f7f\u7528\u200b\u67d0\u4e9b\u200b\u5546\u53f7\u200b\u3001\u200b\u5546\u6807\u200b\u6216\u200b\u670d\u52a1\u200b\u6807\u5fd7\u200b\u7684\u200b\u6743\u5229\u200b\uff1b\u200b\u6216\u200b f) \u200b\u8981\u6c42\u200b\u5c06\u200b\u6750\u6599\u200b\uff08\u200b\u6216\u200b\u6750\u6599\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\uff09\u200b\u8f6c\u200b\u4ea4\u7ed9\u200b\u63a5\u53d7\u8005\u200b\u7684\u200b\u4efb\u4f55\u4eba\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u5408\u540c\u200b\u5047\u8bbe\u200b\u76f4\u63a5\u200b\u52a0\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u548c\u200b\u4f5c\u8005\u200b\u8eab\u4e0a\u200b\u7684\u200b\u4efb\u4f55\u200b\u8d23\u4efb\u200b\u8fdb\u884c\u200b\u8d54\u507f\u200b\u3002 \u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u975e\u200b\u8bb8\u53ef\u200b\u6027\u200b\u7684\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\u90fd\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u7b2c\u200b10\u200b\u6761\u200b\u610f\u4e49\u200b\u4e0a\u200b\u7684\u200b \u201c\u200b\u8fdb\u4e00\u6b65\u200b\u9650\u5236\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u6536\u5230\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u901a\u77e5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7ba1\u8f96\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b\u5c5e\u4e8e\u200b\u8fdb\u4e00\u6b65\u200b\u9650\u5236\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5220\u9664\u200b\u8be5\u200b\u6761\u6b3e\u200b\u3002\u200b\u5982\u679c\u200b\u8bb8\u53ef\u200b\u6587\u4ef6\u200b\u5305\u542b\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\uff0c\u200b\u4f46\u200b\u5141\u8bb8\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8fdb\u884c\u200b\u518d\u200b\u8bb8\u53ef\u200b\u6216\u200b\u8f6c\u8ba9\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u53d7\u8be5\u200b\u8bb8\u53ef\u200b\u6587\u4ef6\u200b\u6761\u6b3e\u200b\u7ba1\u8f96\u200b\u7684\u200b\u6750\u6599\u200b\uff0c\u200b\u4f46\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\u5728\u200b\u8fd9\u79cd\u200b\u518d\u200b\u8bb8\u53ef\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6309\u7167\u200b\u672c\u8282\u200b\u7684\u200b\u89c4\u5b9a\u200b\u5411\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6dfb\u52a0\u200b\u6761\u6b3e\u200b\uff0c\u200b\u60a8\u200b\u5fc5\u987b\u200b\u5728\u200b\u76f8\u5173\u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\u4e2d\u200b\u58f0\u660e\u200b\u9002\u7528\u200b\u4e8e\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u7684\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\uff0c\u200b\u6216\u8005\u200b\u8bf4\u660e\u200b\u5728\u200b\u54ea\u91cc\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u9002\u7528\u200b\u6761\u6b3e\u200b\u3002</p> <p>\u200b\u989d\u5916\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u5141\u8bb8\u200b\u7684\u200b\u8fd8\u200b\u662f\u975e\u200b\u5141\u8bb8\u200b\u7684\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u5355\u72ec\u200b\u7684\u200b\u4e66\u9762\u200b\u8bb8\u53ef\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8bf4\u660e\u200b\uff0c\u200b\u6216\u8005\u200b\u4f5c\u4e3a\u200b\u4f8b\u5916\u60c5\u51b5\u200b\u8bf4\u660e\u200b\uff1b\u200b\u4e0a\u8ff0\u200b\u8981\u6c42\u200b\u9002\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"zh/about/license/#8","title":"8. \u200b\u7ec8\u6b62\u200b.","text":"<p>\u200b\u9664\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u660e\u786e\u89c4\u5b9a\u200b\u7684\u200b\u60c5\u51b5\u200b\u5916\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u8986\u76d6\u200b\u4f5c\u54c1\u200b\u3002\u200b\u4efb\u4f55\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5c1d\u8bd5\u200b\u90fd\u200b\u662f\u200b\u65e0\u6548\u200b\u7684\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u81ea\u52a8\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\uff08\u200b\u5305\u62ec\u200b\u6839\u636e\u200b\u7b2c\u200b11\u200b\u8282\u200b\u7b2c\u4e09\u6bb5\u200b\u6388\u4e88\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff09\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u505c\u6b62\u200b\u6240\u6709\u200b\u8fdd\u53cd\u200b\u672c\u200b\u8bb8\u53ef\u200b\u7684\u200b\u884c\u4e3a\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u4ece\u200b\u67d0\u200b\u4e00\u200b\u7279\u5b9a\u200b\u7248\u6743\u200b\u4eba\u5904\u200b\u83b7\u5f97\u200b\u7684\u200b\u8bb8\u53ef\u200b\u5c06\u200b\u88ab\u200b\u6062\u590d\u200b\uff08a\uff09\u200b\u6682\u65f6\u6027\u200b\u7684\u200b\uff0c\u200b\u9664\u975e\u200b\u5e76\u200b\u76f4\u5230\u200b\u7248\u6743\u200b\u4eba\u200b\u660e\u786e\u200b\u5e76\u200b\u6700\u7ec8\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u53ca\u200b\uff08b\uff09\u200b\u6c38\u4e45\u6027\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u7248\u6743\u200b\u4eba\u200b\u672a\u80fd\u200b\u5728\u200b\u505c\u6b62\u200b\u540e\u200b\u7684\u200b60\u200b\u5929\u200b\u5185\u200b\u901a\u8fc7\u200b\u67d0\u79cd\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u77e5\u200b\u60a8\u200b\u4fb5\u6743\u884c\u4e3a\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5982\u679c\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u4ee5\u200b\u67d0\u79cd\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u77e5\u200b\u60a8\u200b\u4fb5\u6743\u884c\u4e3a\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u60a8\u200b\u7b2c\u4e00\u6b21\u200b\u6536\u5230\u200b\u8be5\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u8fdd\u53cd\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u901a\u77e5\u200b\uff08\u200b\u9488\u5bf9\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\uff09\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5728\u200b\u6536\u5230\u200b\u901a\u77e5\u200b\u540e\u200b30\u200b\u5929\u200b\u5185\u200b\u7ea0\u6b63\u200b\u4e86\u200b\u4fb5\u6743\u884c\u4e3a\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u4ece\u200b\u67d0\u200b\u4e00\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u83b7\u5f97\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u88ab\u200b\u6c38\u4e45\u200b\u6062\u590d\u200b\u3002</p> <p>\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u5728\u200b\u672c\u8282\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\u5e76\u200b\u4e0d\u200b\u7ec8\u6b62\u200b\u90a3\u4e9b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u83b7\u5f97\u200b\u526f\u672c\u200b\u6216\u200b\u6743\u5229\u200b\u7684\u200b\u5404\u65b9\u200b\u7684\u200b\u8bb8\u53ef\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u7ec8\u6b62\u200b\uff0c\u200b\u800c\u4e14\u200b\u6ca1\u6709\u200b\u6c38\u4e45\u200b\u6062\u590d\u200b\uff0c\u200b\u60a8\u200b\u5c31\u200b\u6ca1\u6709\u200b\u8d44\u683c\u200b\u6839\u636e\u200b\u7b2c\u200b10\u200b\u6761\u200b\u83b7\u5f97\u200b\u76f8\u540c\u200b\u6750\u6599\u200b\u7684\u200b\u65b0\u200b\u8bb8\u53ef\u200b\u3002</p>"},{"location":"zh/about/license/#9","title":"9. \u200b\u62e5\u6709\u200b\u526f\u672c\u200b\u4e0d\u200b\u9700\u8981\u200b\u63a5\u53d7\u200b.","text":"<p>\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u4e3a\u4e86\u200b\u63a5\u6536\u200b\u6216\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u526f\u672c\u200b\u800c\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u3002\u200b\u4ec5\u4ec5\u200b\u7531\u4e8e\u200b\u4f7f\u7528\u200b\u70b9\u5bf9\u70b9\u200b\u4f20\u8f93\u200b\u6765\u200b\u63a5\u6536\u200b\u62f7\u8d1d\u200b\u800c\u200b\u53d1\u751f\u200b\u7684\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8f85\u52a9\u200b\u4f20\u64ad\u200b\uff0c\u200b\u4e5f\u200b\u540c\u6837\u200b\u4e0d\u200b\u9700\u8981\u200b\u63a5\u53d7\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u9664\u4e86\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e4b\u5916\u200b\uff0c\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u4e1c\u897f\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u4efb\u4f55\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u884c\u4e3a\u200b\u5c31\u200b\u4fb5\u72af\u200b\u4e86\u200b\u7248\u6743\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u6216\u200b\u4f20\u64ad\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u60a8\u200b\u8868\u660e\u200b\u60a8\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u505a\u200b\u3002</p>"},{"location":"zh/about/license/#10","title":"10. \u200b\u4e0b\u6e38\u200b\u63a5\u53d7\u8005\u200b\u7684\u200b\u81ea\u52a8\u200b\u8bb8\u53ef\u200b.","text":"<p>\u200b\u6bcf\u5f53\u200b\u60a8\u200b\u4f20\u9012\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u63a5\u6536\u8005\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u4ece\u200b\u539f\u59cb\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u90a3\u91cc\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u5728\u200b\u9075\u5b88\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u524d\u63d0\u200b\u4e0b\u200b\uff0c\u200b\u8fd0\u884c\u200b\u3001\u200b\u4fee\u6539\u200b\u548c\u200b\u4f20\u64ad\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u3002\u200b\u60a8\u200b\u4e0d\u200b\u8d1f\u8d23\u200b\u6267\u884c\u200b\u7b2c\u4e09\u65b9\u200b\u5bf9\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u9075\u5b88\u200b\u3002</p> <p>\u200b\u5b9e\u4f53\u200b\u4ea4\u6613\u200b \u201c\u200b\u662f\u200b\u6307\u200b\u8f6c\u8ba9\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u63a7\u5236\u6743\u200b\uff0c\u200b\u6216\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u5927\u90e8\u5206\u200b\u8d44\u4ea7\u200b\uff0c\u200b\u6216\u200b\u62c6\u5206\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\uff0c\u200b\u6216\u200b\u5408\u5e76\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u4ea4\u6613\u200b\u3002\u200b\u5982\u679c\u200b\u5b9e\u4f53\u200b\u4ea4\u6613\u200b\u5bfc\u81f4\u200b\u8986\u76d6\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4f20\u64ad\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6536\u5230\u200b\u4f5c\u54c1\u200b\u526f\u672c\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u4ea4\u6613\u200b\u65b9\u200b\u4e5f\u200b\u4f1a\u200b\u6536\u5230\u200b\u8be5\u65b9\u200b\u7684\u200b\u6743\u76ca\u200b\u524d\u8eab\u200b\u6839\u636e\u200b\u524d\u6bb5\u200b\u89c4\u5b9a\u200b\u6240\u200b\u62e5\u6709\u200b\u6216\u200b\u53ef\u4ee5\u200b\u7ed9\u4e88\u200b\u7684\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4ece\u200b\u6743\u76ca\u200b\u524d\u200b\u8eab\u5904\u200b\u83b7\u5f97\u200b\u4f5c\u54c1\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u7684\u200b\u62e5\u6709\u6743\u200b\uff0c\u200b\u5982\u679c\u200b\u6743\u76ca\u200b\u524d\u8eab\u200b\u62e5\u6709\u200b\u6216\u200b\u901a\u8fc7\u200b\u5408\u7406\u200b\u52aa\u529b\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b\u3002</p> <p>\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u5bf9\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u6388\u4e88\u200b\u6216\u200b\u786e\u8ba4\u200b\u7684\u200b\u6743\u5229\u200b\u65bd\u52a0\u200b\u4efb\u4f55\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u5bf9\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6240\u200b\u6388\u4e88\u200b\u7684\u200b\u6743\u5229\u200b\u5f81\u6536\u200b\u8bb8\u53ef\u8d39\u200b\u3001\u200b\u7279\u8bb8\u6743\u200b\u4f7f\u7528\u8d39\u200b\u6216\u200b\u5176\u4ed6\u8d39\u7528\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u5f97\u200b\u63d0\u8d77\u200b\u8bc9\u8bbc\u200b\uff08\u200b\u5305\u62ec\u200b\u8bc9\u8bbc\u200b\u4e2d\u200b\u7684\u200b\u4ea4\u53c9\u200b\u7d22\u8d54\u200b\u6216\u200b\u53cd\u200b\u7d22\u8d54\u200b\uff09\uff0c\u200b\u6307\u63a7\u200b\u5236\u4f5c\u200b\u3001\u200b\u4f7f\u7528\u200b\u3001\u200b\u9500\u552e\u200b\u3001\u200b\u63d0\u4f9b\u200b\u9500\u552e\u200b\u6216\u200b\u8fdb\u53e3\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u4fb5\u72af\u200b\u4e86\u200b\u4efb\u4f55\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u3002</p>"},{"location":"zh/about/license/#11","title":"11. \u200b\u4e13\u5229\u200b.","text":"<p>\u200b\u8d21\u732e\u8005\u200b \u201c\u200b\u662f\u200b\u6307\u200b\u6388\u6743\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4f7f\u7528\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6216\u672c\u200b\u7a0b\u5e8f\u200b\u6240\u200b\u57fa\u4e8e\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u3002\u200b\u8fd9\u6837\u200b\u6388\u6743\u200b\u7684\u200b\u4f5c\u54c1\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u8d21\u732e\u8005\u200b\u7684\u200b \u201c\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u201d\u3002</p> <p>\u200b\u8d21\u732e\u8005\u200b\u7684\u200b \u201c\u200b\u57fa\u672c\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u8d21\u732e\u8005\u200b\u62e5\u6709\u200b\u6216\u200b\u63a7\u5236\u200b\u7684\u200b\u6240\u6709\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u5df2\u7ecf\u200b\u83b7\u5f97\u200b\u7684\u200b\u8fd8\u662f\u200b\u4ee5\u540e\u200b\u83b7\u5f97\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u5c06\u200b\u88ab\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5141\u8bb8\u200b\u7684\u200b\u67d0\u79cd\u200b\u65b9\u5f0f\u200b\u6240\u200b\u4fb5\u72af\u200b\uff0c\u200b\u5373\u200b\u5236\u4f5c\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u9500\u552e\u200b\u5176\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u200b\u5305\u62ec\u200b\u4ec5\u200b\u56e0\u200b\u8fdb\u4e00\u6b65\u200b\u4fee\u6539\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u800c\u200b\u88ab\u200b\u4fb5\u72af\u200b\u7684\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u3002\u200b\u5c31\u200b\u672c\u200b\u5b9a\u4e49\u200b\u800c\u8a00\u200b\uff0c\u201d\u200b\u63a7\u5236\u200b\u201d \u200b\u5305\u62ec\u200b\u4ee5\u200b\u7b26\u5408\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8981\u6c42\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6388\u4e88\u200b\u4e13\u5229\u200b\u5206\u200b\u8bb8\u53ef\u200b\u7684\u200b\u6743\u5229\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b\u8d21\u732e\u8005\u200b\u6839\u636e\u200b\u8d21\u732e\u8005\u200b\u7684\u200b\u57fa\u672c\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\uff0c\u200b\u6388\u4e88\u200b\u60a8\u200b\u975e\u200b\u72ec\u5360\u6027\u200b\u7684\u200b\u3001\u200b\u5168\u7403\u6027\u200b\u7684\u200b\u3001\u200b\u514d\u200b\u7248\u7a0e\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u200b\u5236\u9020\u200b\u3001\u200b\u4f7f\u7528\u200b\u3001\u200b\u9500\u552e\u200b\u3001\u200b\u63d0\u4f9b\u200b\u9500\u552e\u200b\u3001\u200b\u8fdb\u53e3\u200b\u548c\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8fd0\u884c\u200b\u3001\u200b\u4fee\u6539\u200b\u548c\u200b\u4f20\u64ad\u200b\u5176\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p> <p>\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u4e09\u6bb5\u200b\u4e2d\u200b\uff0c\u201d\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u4e0d\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u7684\u200b\u4efb\u4f55\u200b\u660e\u793a\u200b\u534f\u8bae\u200b\u6216\u200b\u627f\u8bfa\u200b\uff0c\u200b\u65e0\u8bba\u200b\u5176\u200b\u540d\u79f0\u200b\u5982\u4f55\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u660e\u786e\u200b\u5141\u8bb8\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u6216\u200b\u4e0d\u200b\u8d77\u8bc9\u200b\u4e13\u5229\u200b\u4fb5\u6743\u200b\u7684\u200b\u7ea6\u5b9a\u200b\uff09\u3002\u200b\u5411\u200b\u4e00\u65b9\u200b \u201c\u200b\u6388\u4e88\u200b\u201d \u200b\u8fd9\u79cd\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u610f\u5473\u7740\u200b\u4f5c\u51fa\u200b\u8fd9\u79cd\u200b\u534f\u8bae\u200b\u6216\u200b\u627f\u8bfa\u200b\uff0c\u200b\u4e0d\u200b\u5bf9\u200b\u8be5\u65b9\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u77e5\u60c5\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4f9d\u9760\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u4f20\u9012\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u800c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u5e76\u200b\u6ca1\u6709\u200b\u901a\u8fc7\u200b\u516c\u5f00\u200b\u7684\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u6216\u200b\u5176\u4ed6\u200b\u5bb9\u6613\u200b\u83b7\u5f97\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f9b\u200b\u4efb\u4f55\u4eba\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u514d\u8d39\u200b\u590d\u5236\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u5fc5\u987b\u200b(1)\u200b\u4f7f\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b\uff0c\u200b\u6216\u8005\u200b(2)\u200b\u5b89\u6392\u200b\u5265\u593a\u200b\u81ea\u5df1\u200b\u5bf9\u200b\u8be5\u200b\u7279\u5b9a\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u5229\u76ca\u200b\uff0c\u200b\u6216\u8005\u200b(3)\u200b\u4ee5\u200b\u7b26\u5408\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8981\u6c42\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5b89\u6392\u200b\u5c06\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u6269\u5c55\u200b\u5230\u200b\u4e0b\u6e38\u200b\u63a5\u53d7\u8005\u200b\u3002\u201d\u200b\u660e\u77e5\u6545\u72af\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u60a8\u200b\u5b9e\u9645\u200b\u77e5\u9053\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u60a8\u200b\u5728\u200b\u67d0\u4e2a\u200b\u56fd\u5bb6\u200b\u4f20\u9012\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u6216\u8005\u200b\u60a8\u200b\u7684\u200b\u63a5\u53d7\u8005\u200b\u5728\u200b\u67d0\u4e2a\u200b\u56fd\u5bb6\u200b\u4f7f\u7528\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5c06\u200b\u4fb5\u72af\u200b\u60a8\u200b\u6709\u200b\u7406\u7531\u200b\u76f8\u4fe1\u200b\u5728\u200b\u8be5\u56fd\u200b\u6709\u6548\u200b\u7684\u200b\u4e00\u9879\u200b\u6216\u200b\u591a\u9879\u200b\u53ef\u200b\u8bc6\u522b\u200b\u4e13\u5229\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6839\u636e\u200b\u4e00\u9879\u200b\u4ea4\u6613\u200b\u6216\u200b\u5b89\u6392\u200b\u6216\u200b\u4e0e\u200b\u4e4b\u200b\u76f8\u5173\u200b\uff0c\u200b\u60a8\u200b\u8f6c\u8ba9\u200b\u6216\u200b\u901a\u8fc7\u200b\u4fc3\u6210\u200b\u8f6c\u8ba9\u200b\u4f20\u64ad\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5e76\u200b\u5411\u200b\u63a5\u53d7\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u67d0\u4e9b\u200b\u5f53\u4e8b\u65b9\u200b\u6388\u4e88\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u6388\u6743\u200b\u4ed6\u4eec\u200b\u4f7f\u7528\u200b\u3001\u200b\u4f20\u64ad\u200b\u3001\u200b\u4fee\u6539\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7279\u5b9a\u200b\u526f\u672c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u6388\u4e88\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u5c06\u200b\u81ea\u52a8\u200b\u6269\u5c55\u200b\u5230\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u548c\u200b\u57fa\u4e8e\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6240\u6709\u200b\u63a5\u53d7\u8005\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5728\u200b\u5176\u200b\u8986\u76d6\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u7981\u6b62\u200b\u884c\u4f7f\u200b\u6216\u200b\u4ee5\u200b\u4e0d\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u200b\u5177\u4f53\u200b\u6388\u4e88\u200b\u7684\u200b\u4e00\u9879\u200b\u6216\u200b\u591a\u9879\u200b\u6743\u5229\u200b\u4e3a\u200b\u6761\u4ef6\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b \u201c\u200b\u6b67\u89c6\u6027\u200b\u7684\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u662f\u200b\u4e0e\u200b\u4ece\u4e8b\u200b\u8f6f\u4ef6\u200b\u5206\u9500\u200b\u4e1a\u52a1\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u8fbe\u6210\u200b\u7684\u200b\u5b89\u6392\u200b\u7684\u200b\u4e00\u65b9\u200b\uff0c\u200b\u6839\u636e\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u60a8\u200b\u6839\u636e\u200b\u60a8\u200b\u4f20\u9012\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6d3b\u52a8\u200b\u8303\u56f4\u200b\u5411\u200b\u7b2c\u4e09\u65b9\u200b\u4ed8\u6b3e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6839\u636e\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u7b2c\u4e09\u200b\u65b9\u5411\u200b\u4efb\u4f55\u200b\u5c06\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u83b7\u5f97\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4e00\u65b9\u200b\u6388\u4e88\u200b\uff0c\u200b\u5219\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u4f20\u9012\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u3002\u200b\u6b67\u89c6\u6027\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff1a(a)\u200b\u4e0e\u200b\u60a8\u200b\u4f20\u9012\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u526f\u672c\u200b\uff08\u200b\u6216\u200b\u7531\u200b\u8fd9\u4e9b\u200b\u526f\u672c\u200b\u5236\u4f5c\u200b\u7684\u200b\u526f\u672c\u200b\uff09\u200b\u6709\u5173\u200b\uff0c\u200b\u6216\u200b(b)\u200b\u4e3b\u8981\u200b\u4e3a\u200b\u5305\u542b\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7279\u5b9a\u200b\u4ea7\u54c1\u200b\u6216\u200b\u6c47\u7f16\u200b\u5e76\u200b\u4e0e\u200b\u4e4b\u200b\u6709\u5173\u200b\uff0c\u200b\u9664\u975e\u200b\u60a8\u200b\u5728\u200b2007\u200b\u5e74\u200b3\u200b\u6708\u200b28\u200b\u65e5\u200b\u4e4b\u524d\u200b\u8fbe\u6210\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u6216\u200b\u6388\u4e88\u200b\u8be5\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u90fd\u200b\u4e0d\u5e94\u200b\u88ab\u200b\u89e3\u91ca\u200b\u4e3a\u200b\u6392\u9664\u200b\u6216\u200b\u9650\u5236\u200b\u4efb\u4f55\u200b\u9690\u542b\u200b\u7684\u200b\u8bb8\u53ef\u200b\u6216\u200b\u5176\u4ed6\u200b\u5bf9\u200b\u4fb5\u6743\u200b\u7684\u200b\u6297\u8fa9\u200b\uff0c\u200b\u6839\u636e\u200b\u9002\u7528\u200b\u7684\u200b\u4e13\u5229\u6cd5\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u8fd9\u6837\u200b\u7684\u200b\u673a\u4f1a\u200b\u3002</p>"},{"location":"zh/about/license/#12","title":"12. \u200b\u4e0d\u200b\u653e\u5f03\u200b\u4ed6\u4eba\u200b\u7684\u200b\u81ea\u7531\u200b.","text":"<p>\u200b\u5982\u679c\u200b\u5f3a\u52a0\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u6761\u4ef6\u200b\uff08\u200b\u65e0\u8bba\u662f\u200b\u901a\u8fc7\u200b\u6cd5\u9662\u200b\u547d\u4ee4\u200b\u3001\u200b\u534f\u8bae\u200b\u6216\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\uff09\u200b\u4e0e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u4ef6\u200b\u76f8\u200b\u62b5\u89e6\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u514d\u9664\u200b\u60a8\u200b\u5bf9\u200b\u672c\u200b\u8bb8\u53ef\u200b\u6761\u4ef6\u200b\u7684\u200b\u9075\u5b88\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u80fd\u200b\u5728\u200b\u8f6c\u8ba9\u200b\u4f5c\u54c1\u200b\u65f6\u200b\u540c\u65f6\u200b\u6ee1\u8db3\u200b\u60a8\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u7684\u200b\u4e49\u52a1\u200b\u548c\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u76f8\u5173\u200b\u7684\u200b\u4e49\u52a1\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f5c\u4e3a\u200b\u7ed3\u679c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u8f6c\u8ba9\u200b\u5b83\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u540c\u610f\u200b\u7684\u200b\u6761\u6b3e\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u4e49\u52a1\u200b\u5411\u200b\u63a5\u53d7\u200b\u60a8\u200b\u4f20\u9001\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4eba\u200b\u6536\u53d6\u200b\u7248\u7a0e\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u8981\u200b\u540c\u65f6\u200b\u6ee1\u8db3\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u548c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u8981\u6c42\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u529e\u6cd5\u200b\u5c31\u662f\u200b\u5b8c\u5168\u200b\u4e0d\u200b\u4f20\u9001\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"zh/about/license/#13-gnu","title":"13. \u200b\u8fdc\u7a0b\u200b\u7f51\u7edc\u200b\u4ea4\u4e92\u200b\uff1b\u200b\u4e0e\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b.","text":"<p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u4fee\u6539\u200b\u672c\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u5fc5\u987b\u200b\u5728\u200b\u663e\u8457\u200b\u4f4d\u7f6e\u200b\u5411\u200b\u6240\u6709\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u8fdc\u7a0b\u200b\u4e0e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u4e92\u52a8\u200b\u7684\u200b\u7528\u6237\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u8fd9\u79cd\u200b\u4e92\u52a8\u200b\uff09\u200b\u63d0\u4f9b\u200b\u673a\u4f1a\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e00\u4e9b\u200b\u6807\u51c6\u200b\u6216\u200b\u4e60\u60ef\u200b\u7684\u200b\u4fc3\u8fdb\u200b\u8f6f\u4ef6\u200b\u590d\u5236\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4ece\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u514d\u8d39\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\u3002\u200b\u8be5\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u5e94\u200b\u5305\u62ec\u200b\u6839\u636e\u200b\u4e0b\u200b\u6bb5\u200b\u89c4\u5b9a\u200b\u7eb3\u5165\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u200b\u7684\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u3002</p> <p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u6743\u5229\u200b\u5c06\u200b\u4efb\u4f55\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u5728\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u4e0b\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4f5c\u54c1\u200b\u94fe\u63a5\u200b\u6216\u200b\u7ed3\u5408\u200b\u6210\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b\u7ec4\u5408\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5e76\u200b\u4f20\u9012\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u5c06\u200b\u7ee7\u7eed\u200b\u9002\u7528\u200b\u4e8e\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u4f46\u200b\u4e0e\u200b\u4e4b\u200b\u7ed3\u5408\u200b\u7684\u200b\u4f5c\u54c1\u200b\u5c06\u200b\u7ee7\u7eed\u200b\u53d7\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u200b\u7684\u200b\u7ba1\u8f96\u200b\u3002</p>"},{"location":"zh/about/license/#14","title":"14. \u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fee\u8ba2\u7248\u200b.","text":"<p>\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0d\u65f6\u200b\u5730\u200b\u53d1\u5e03\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fee\u8ba2\u7248\u200b\u548c\u200b/\u200b\u6216\u200b\u65b0\u200b\u7248\u672c\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u65b0\u200b\u7248\u672c\u200b\u5728\u7cbe\u795e\u4e0a\u200b\u4e0e\u200b\u76ee\u524d\u200b\u7684\u200b\u7248\u672c\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u7ec6\u8282\u200b\u4e0a\u200b\u53ef\u80fd\u200b\u6709\u6240\u4e0d\u540c\u200b\uff0c\u200b\u4ee5\u200b\u89e3\u51b3\u200b\u65b0\u200b\u7684\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u5207\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b\u7248\u672c\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u533a\u5206\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\u3002\u200b\u5982\u679c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6307\u5b9a\u200b\u67d0\u4e2a\u200b\u7f16\u53f7\u200b\u7684\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b \u201c\u200b\u6216\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u201d \u200b\u9002\u7528\u200b\u4e8e\u200b\u5b83\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u9075\u5b88\u200b\u8be5\u200b\u7f16\u53f7\u200b\u7684\u200b\u7248\u672c\u200b\u6216\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u7684\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b\u3002\u200b\u5982\u679c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u6307\u5b9a\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200b\u4efb\u4f55\u200b\u7248\u672c\u200b\u3002 \u200b\u5982\u679c\u200b\u672c\u200b\u8ba1\u5212\u200b\u89c4\u5b9a\u200b\u4ee3\u7406\u4eba\u200b\u53ef\u4ee5\u200b\u51b3\u5b9a\u200b\u672a\u6765\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u54ea\u4e2a\u200b\u7248\u672c\u200b\u7684\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8be5\u200b\u4ee3\u7406\u4eba\u200b\u5bf9\u200b\u67d0\u4e2a\u200b\u7248\u672c\u200b\u7684\u200b\u516c\u5f00\u200b\u63a5\u53d7\u200b\u58f0\u660e\u200b\u5c06\u200b\u6c38\u4e45\u200b\u6388\u6743\u200b\u60a8\u200b\u4e3a\u200b\u672c\u200b\u8ba1\u5212\u200b\u9009\u62e9\u200b\u8be5\u200b\u7248\u672c\u200b\u3002</p> <p>\u200b\u4ee5\u540e\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u7248\u672c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7ed9\u200b\u60a8\u200b\u989d\u5916\u200b\u7684\u200b\u6216\u200b\u4e0d\u540c\u200b\u7684\u200b\u6743\u9650\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4efb\u4f55\u200b\u4f5c\u8005\u200b\u6216\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u9009\u62e9\u200b\u4e86\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u800c\u200b\u627f\u62c5\u200b\u989d\u5916\u200b\u7684\u200b\u4e49\u52a1\u200b\u3002</p>"},{"location":"zh/about/license/#15","title":"15. \u200b\u514d\u8d23\u200b\u58f0\u660e\u200b.","text":"<p>\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u7684\u200b\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u5bf9\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u9664\u975e\u200b\u53e6\u6709\u200b\u4e66\u9762\u200b\u8bf4\u660e\u200b\uff0c\u200b\u5426\u5219\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u548c\u200b/\u200b\u6216\u200b\u5176\u4ed6\u200b\u5404\u65b9\u200b \u201c\u200b\u6309\u200b\u539f\u6837\u200b\u201d \u200b\u63d0\u4f9b\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4e0d\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u660e\u793a\u200b\u6216\u200b\u6697\u793a\u200b\u7684\u200b\u4fdd\u8bc1\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f46\u200b\u4e0d\u200b\u9650\u4e8e\u200b\u5bf9\u200b\u9002\u9500\u200b\u6027\u200b\u548c\u200b\u7279\u5b9a\u200b\u7528\u9014\u200b\u7684\u200b\u9002\u7528\u6027\u200b\u7684\u200b\u6697\u793a\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u5173\u4e8e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u8d28\u91cf\u200b\u548c\u200b\u6027\u80fd\u200b\u7684\u200b\u5168\u90e8\u200b\u98ce\u9669\u200b\u7531\u200b\u60a8\u200b\u627f\u62c5\u200b\u3002\u200b\u5982\u679c\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u88ab\u200b\u8bc1\u660e\u200b\u6709\u200b\u7f3a\u9677\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u627f\u62c5\u200b\u6240\u6709\u200b\u5fc5\u8981\u200b\u7684\u200b\u670d\u52a1\u200b\u3001\u200b\u4fee\u7406\u200b\u6216\u200b\u7ea0\u6b63\u200b\u7684\u200b\u8d39\u7528\u200b\u3002</p>"},{"location":"zh/about/license/#16","title":"16. \u200b\u8d54\u507f\u200b\u8d23\u4efb\u200b\u7684\u200b\u9650\u5236\u200b.","text":"<p>\u200b\u5728\u200b\u4efb\u4f55\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u9664\u975e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6216\u200b\u4e66\u9762\u200b\u540c\u610f\u200b\uff0c\u200b\u4efb\u4f55\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u6216\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u6309\u200b\u4e0a\u8ff0\u200b\u89c4\u5b9a\u200b\u4fee\u6539\u200b\u548c\u200b/\u200b\u6216\u200b\u4f20\u9012\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5f53\u4e8b\u4eba\u200b\u90fd\u200b\u4e0d\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u635f\u5bb3\u200b\u8d1f\u8d23\u200b\uff0c\u200b\u5305\u62ec\u200b\u56e0\u200b\u4f7f\u7528\u200b\u6216\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u800c\u200b\u5f15\u8d77\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u822c\u200b\u7684\u200b\u3001\u200b\u7279\u6b8a\u200b\u7684\u200b\u3001\u200b\u5076\u7136\u200b\u7684\u200b\u6216\u200b\u95f4\u63a5\u200b\u7684\u200b\u635f\u5bb3\u200b\uff08\u200b\u5305\u62ec\u200b\u4f46\u200b\u4e0d\u200b\u9650\u4e8e\u200b\u6570\u636e\u200b\u4e22\u5931\u200b\u6216\u200b\u6570\u636e\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u906d\u53d7\u200b\u7684\u200b\u635f\u5931\u200b\u6216\u672c\u200b\u7a0b\u5e8f\u200b\u65e0\u6cd5\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u7a0b\u5e8f\u200b\u4e00\u8d77\u200b\u8fd0\u884c\u200b\uff09\uff0c\u200b\u5373\u4f7f\u200b\u8be5\u200b\u6301\u6709\u4eba\u200b\u6216\u200b\u5176\u4ed6\u200b\u5f53\u4e8b\u4eba\u200b\u5df2\u200b\u88ab\u200b\u544a\u77e5\u200b\u8fd9\u79cd\u200b\u635f\u5bb3\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\u3002</p>"},{"location":"zh/about/license/#17-1516","title":"17. \u200b\u7b2c\u200b15\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b16\u200b\u6761\u200b\u7684\u200b\u89e3\u91ca\u200b.","text":"<p>\u200b\u5982\u679c\u200b\u4ee5\u4e0a\u200b\u89c4\u5b9a\u200b\u7684\u200b\u514d\u8d23\u200b\u58f0\u660e\u200b\u548c\u200b\u8d23\u4efb\u200b\u9650\u5236\u200b\u4e0d\u80fd\u200b\u6839\u636e\u200b\u5176\u200b\u6761\u6b3e\u200b\u5728\u200b\u5f53\u5730\u200b\u4ea7\u751f\u200b\u6cd5\u5f8b\u6548\u529b\u200b\uff0c\u200b\u5ba1\u67e5\u200b\u6cd5\u9662\u200b\u5e94\u200b\u9002\u7528\u200b\u6700\u200b\u63a5\u8fd1\u200b\u4e8e\u200b\u7edd\u5bf9\u200b\u653e\u5f03\u200b\u4e0e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6709\u5173\u200b\u7684\u200b\u6240\u6709\u200b\u6c11\u4e8b\u8d23\u4efb\u200b\u7684\u200b\u5f53\u5730\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u9664\u975e\u200b\u5728\u200b\u6536\u53d6\u200b\u8d39\u7528\u200b\u7684\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u526f\u672c\u200b\u4e0a\u200b\u9644\u6709\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u8d23\u4efb\u200b\u627f\u62c5\u200b\u3002</p> <p>\u200b\u4ee5\u4e0a\u200b\u662f\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b</p>"},{"location":"zh/about/license/#_3","title":"\u5982\u4f55\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u5e94\u7528\u200b\u4e8e\u200b\u60a8\u200b\u7684\u200b\u65b0\u200b\u7a0b\u5e8f","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u200b\u5e0c\u671b\u200b\u5b83\u200b\u5bf9\u200b\u516c\u4f17\u200b\u6709\u200b\u6700\u5927\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u8fd9\u4e00\u200b\u76ee\u6807\u200b\u7684\u200b\u6700\u597d\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4f7f\u200b\u5b83\u200b\u6210\u4e3a\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u4e0b\u200b\u91cd\u65b0\u200b\u53d1\u5e03\u200b\u548c\u200b\u4fee\u6539\u200b\u3002</p> <p>\u200b\u8981\u200b\u505a\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u9644\u4e0a\u200b\u4ee5\u4e0b\u200b\u901a\u77e5\u200b\u3002\u200b\u6700\u200b\u5b89\u5168\u200b\u7684\u200b\u505a\u6cd5\u200b\u662f\u200b\u628a\u200b\u5b83\u4eec\u200b\u9644\u5728\u200b\u6bcf\u4e2a\u200b\u6e90\u6587\u4ef6\u200b\u7684\u200b\u5f00\u5934\u200b\uff0c\u200b\u4ee5\u200b\u6700\u200b\u6709\u6548\u200b\u5730\u200b\u8bf4\u660e\u200b\u6392\u9664\u200b\u62c5\u4fdd\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1b\u200b\u6bcf\u4e2a\u200b\u6587\u4ef6\u200b\u81f3\u5c11\u200b\u8981\u200b\u6709\u200b \u201c\u200b\u7248\u6743\u200b\u201d \u200b\u4e00\u884c\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u5b8c\u6574\u200b\u901a\u77e5\u200b\u7684\u200b\u6307\u9488\u200b\u3002</p> Text Only<pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>\u200b\u7ffb\u8bd1\u200b\uff1a</p> Text Only<pre><code>&lt;\u200b\u7528\u200b\u4e00\u884c\u200b\u5b57\u6765\u200b\u8bf4\u660e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u540d\u79f0\u200b\u548c\u200b\u5b83\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u4e8b\u60c5\u200b\u7684\u200b\u7b80\u5355\u200b\u6982\u5ff5\u200b\u3002&gt;\nCopyright (C) &lt;\u200b\u5e74\u200b&gt; &lt;\u200b\u4f5c\u8005\u59d3\u540d\u200b&gt; \u200b\u7248\u6743\u6240\u6709\u200b\u3002\n\n\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u662f\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\uff1a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u5373\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7b2c\u200b3\u200b\u7248\u200b\u6216\u200b\uff08\u200b\u60a8\u200b\u9009\u62e9\u200b\u7684\u200b\uff09\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u91cd\u65b0\u200b\u53d1\u5e03\u200b\u5b83\u200b\u548c\u200b/\u200b\u6216\u200b\u4fee\u6539\u200b\u5b83\u200b\u3002\u3002\n\n\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u53d1\u5e03\u200b\u662f\u200b\u5e0c\u671b\u200b\u5b83\u200b\u80fd\u200b\u8d77\u5230\u200b\u4f5c\u7528\u200b\u3002\u200b\u4f46\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\uff1b\u200b\u751a\u81f3\u200b\u6ca1\u6709\u200b\u9690\u542b\u200b\u7684\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5206\u53d1\u200b\u662f\u200b\u5e0c\u671b\u200b\u5b83\u200b\u662f\u200b\u6709\u7528\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\uff0c\u200b\u751a\u81f3\u200b\u6ca1\u6709\u200b\u9690\u542b\u200b\u7684\u200b\u9002\u9500\u5bf9\u8def\u200b\u6216\u200b\u9002\u5408\u200b\u67d0\u4e00\u200b\u7279\u5b9a\u200b\u76ee\u7684\u200b\u7684\u200b\u4fdd\u8bc1\u200b\u3002 \u200b\u53c2\u89c1\u200b GNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u3002\n\n\u200b\u60a8\u200b\u5e94\u8be5\u200b\u5df2\u7ecf\u200b\u6536\u5230\u200b\u4e86\u200b\u4e00\u4efd\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u526f\u672c\u200b\u3002 \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b&lt;https://www.gnu.org/licenses/&gt;\u3002\n\n\u200b\u8fd8\u8981\u200b\u589e\u52a0\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u7535\u5b50\u200b\u548c\u200b\u7eb8\u8d28\u200b\u90ae\u4ef6\u200b\u4e0e\u200b\u60a8\u200b\u8054\u7cfb\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u4e0e\u200b\u7528\u6237\u200b\u8fdb\u884c\u200b\u8fdc\u7a0b\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u60a8\u200b\u4e5f\u200b\u5e94\u8be5\u200b\u786e\u4fdd\u200b\u5b83\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e00\u79cd\u200b\u83b7\u5f97\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7f51\u7edc\u5e94\u7528\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u754c\u9762\u200b\u53ef\u4ee5\u200b\u663e\u793a\u200b\u4e00\u4e2a\u200b \u201c\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u5f15\u5bfc\u200b\u7528\u6237\u200b\u8fdb\u5165\u200b\u4ee3\u7801\u200b\u7684\u200b\u5b58\u6863\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7528\u200b\u5f88\u591a\u200b\u65b9\u6cd5\u200b\u63d0\u4f9b\u200b\u6e90\u7801\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5bf9\u200b\u4e0d\u540c\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u66f4\u597d\u200b\uff1b\u200b\u5177\u4f53\u200b\u8981\u6c42\u200b\u89c1\u200b\u7b2c\u200b13\u200b\u8282\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u5fc5\u8981\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u8ba9\u200b\u60a8\u200b\u7684\u200b\u96c7\u4e3b\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u662f\u200b\u7a0b\u5e8f\u5458\u200b\uff09\u200b\u6216\u200b\u5b66\u6821\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\u7684\u8bdd\u200b\uff09\u200b\u4e3a\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u7b7e\u7f72\u200b\u4e00\u4efd\u200b \u201c\u200b\u7248\u6743\u200b\u514d\u8d23\u200b\u58f0\u660e\u200b\u201d\u3002\u200b\u6709\u5173\u200b\u8fd9\u65b9\u9762\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7533\u8bf7\u200b\u548c\u200b\u9075\u5b88\u200bGNU AGPL\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200bhttps://www.gnu.org/licenses/\u3002</p>"},{"location":"zh/about/privacy/","title":"Privacy Notice","text":"<p>\u200b\u7ffb\u8bd1\u200b</p> <p>\u200b\u672c\u6587\u200b\u5185\u5bb9\u200b\u4e3a\u200b\u673a\u5668\u7ffb\u8bd1\u200b\u7248\u672c\u200b\uff0c\u200b\u65e8\u5728\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u65b9\u4fbf\u200b\u3002 \u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c3d\u529b\u200b\u786e\u4fdd\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002 \u200b\u4f46\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u5185\u5bb9\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u9519\u8bef\u200b\uff0c\u200b\u4ec5\u4f9b\u53c2\u8003\u200b\u3002 \u200b\u8bf7\u4ee5\u200b\u82f1\u6587\u200b\u539f\u6587\u200b\u4e3a\u51c6\u200b\u3002</p> <p>\u200b\u4e3a\u200b\u6ee1\u8db3\u200b\u5408\u89c4\u6027\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u8981\u6c42\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u6587\u6863\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u6b67\u4e49\u200b\u4e4b\u5904\u200b\u5747\u200b\u4e0d\u200b\u5177\u6709\u200b\u7ea6\u675f\u529b\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5177\u5907\u200b\u6cd5\u5f8b\u6548\u529b\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\u4fee\u8ba2\u200b\u65e5\u671f\u200b</p> <p>\u200b\u672c\u200b\u58f0\u660e\u200b\u6700\u540e\u200b\u66f4\u65b0\u200b\u4e8e\u200b2024\u200b\u5e74\u200b5\u200b\u6708\u200b4\u200b\u65e5\u200b\u3002</p>"},{"location":"zh/about/privacy/#_1","title":"\u9690\u79c1\u200b\u58f0\u660e","text":"<p>\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u9002\u7528\u200b\u4e8e\u4e39\u7075\u200b\u56e2\u961f\u200b\uff08\u200b\u4e5f\u200b\u88ab\u79f0\u4f5c\u200b\u4e39\u7075\u200b\uff09\uff08\u200b\u4ee5\u4e0b\u200b\u7b80\u79f0\u200b\u201c\u200b\u6211\u4eec\u200b\u201d\uff09\uff0c\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff08\u201c\u200b\u670d\u52a1\u200b\u201d\uff09\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4ee5\u53ca\u200b\u4e3a\u4f55\u200b\u53ef\u80fd\u200b\u6536\u96c6\u200b\u3001\u200b\u5b58\u50a8\u200b\u3001\u200b\u4f7f\u7528\u200b\u548c\u200b/\u200b\u6216\u200b\u5171\u4eab\u200b\uff08\u201c\u200b\u5904\u7406\u200b\u201d\uff09\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u4f8b\u5982\u200b\u5f53\u200b\u60a8\u200b\uff1a</p> <ul> <li>\u200b\u8bbf\u95ee\u200b\u6211\u4eec\u200b\u7684\u200b\u7f51\u7ad9\u200b multimolecule.danling.org \u200b\u6216\u200b\u4efb\u4f55\u200b\u94fe\u63a5\u200b\u5230\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u7684\u200b\u6211\u4eec\u200b\u7684\u200b\u7f51\u7ad9\u200b\u65f6\u200b</li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u968f\u65f6\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u66f4\u6539\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u8bbe\u7f6e\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p> <p>\u200b\u6709\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u6ce8\u200b\uff1f \u200b\u9605\u8bfb\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u5c06\u200b\u5e2e\u52a9\u200b\u60a8\u200b\u4e86\u89e3\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\u548c\u200b\u9009\u62e9\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u540c\u610f\u200b\u6211\u4eec\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u505a\u6cd5\u200b\uff0c\u200b\u8bf7\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u4ecd\u200b\u6709\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u6ce8\u200b\uff0c\u200b\u8bf7\u200b\u901a\u8fc7\u200bprivacy@danling.org\u200b\u4e0e\u200b\u6211\u4eec\u200b\u8054\u7cfb\u200b\u3002</p>"},{"location":"zh/about/privacy/#0","title":"0. \u200b\u5173\u952e\u70b9\u200b\u603b\u7ed3","text":"<p>\u200b\u672c\u200b\u603b\u7ed3\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6211\u4eec\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u7684\u200b\u5173\u952e\u70b9\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u6bcf\u4e2a\u200b\u5173\u952e\u70b9\u200b\u540e\u200b\u7684\u200b\u94fe\u63a5\u200b\u6216\u200b\u4f7f\u7528\u200b\u76ee\u5f55\u200b\u6765\u200b\u627e\u5230\u200b\u60a8\u200b\u6240\u200b\u67e5\u627e\u200b\u7684\u200b\u90e8\u5206\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u8be6\u60c5\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u54ea\u4e9b\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u5bfc\u822a\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6839\u636e\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4ee5\u53ca\u200b\u670d\u52a1\u200b\u7684\u200b\u4e92\u52a8\u200b\u65b9\u5f0f\u200b\u3001\u200b\u60a8\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u9009\u62e9\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u529f\u80fd\u200b\u6765\u200b\u5904\u7406\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u54ea\u4e9b\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u63d0\u4f9b\u200b\u3001\u200b\u6539\u5584\u200b\u548c\u200b\u7ba1\u7406\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u4e0e\u200b\u60a8\u200b\u6c9f\u901a\u200b\uff0c\u200b\u8fdb\u884c\u200b\u5b89\u5168\u200b\u548c\u200b\u9632\u200b\u6b3a\u8bc8\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u5728\u200b\u5f97\u5230\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u51fa\u4e8e\u200b\u5176\u4ed6\u200b\u76ee\u7684\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 \u200b\u6211\u4eec\u200b\u4ec5\u200b\u5728\u200b\u6709\u200b\u5408\u6cd5\u200b\u6cd5\u5f8b\u200b\u7406\u7531\u200b\u65f6\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5417\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u5904\u7406\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4ece\u200b\u7b2c\u4e09\u65b9\u200b\u6536\u96c6\u200b\u4fe1\u606f\u200b\u5417\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u7b2c\u4e09\u65b9\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u5728\u200b\u54ea\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u54ea\u4e9b\u200b\u65b9\u200b\u6211\u4eec\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u7279\u5b9a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u7b2c\u4e09\u65b9\u200b\u5171\u4eab\u200b\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u4f55\u65f6\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u8c01\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5b9e\u65bd\u200b\u4e86\u200b\u7ec4\u7ec7\u200b\u548c\u200b\u6280\u672f\u200b\u6d41\u7a0b\u200b\u548c\u200b\u7a0b\u5e8f\u200b\u6765\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u6301\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f</p> <p>\u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u6839\u636e\u200b\u60a8\u200b\u6240\u5728\u200b\u5730\u7406\u4f4d\u7f6e\u200b\uff0c\u200b\u9002\u7528\u200b\u7684\u200b\u9690\u79c1\u200b\u6cd5\u200b\u53ef\u80fd\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u6709\u200b\u67d0\u4e9b\u200b\u6743\u5229\u200b\u3002</p> <p> \u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u60a8\u200b\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u5f0f\u200b\u662f\u200b\u8054\u7cfb\u200b\u60a8\u200b\u7684\u200b\u53f8\u6cd5\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u76f8\u5173\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u3002</p> <p> \u200b\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\uff1f</p>"},{"location":"zh/about/privacy/#1","title":"1. \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u54ea\u4e9b\u200b\u4fe1\u606f\u200b\uff1f","text":""},{"location":"zh/about/privacy/#_2","title":"\u60a8\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u60a8\u200b\u5411\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u60a8\u200b\u81ea\u613f\u200b\u5411\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u8868\u8fbe\u200b\u5bf9\u200b\u6211\u4eec\u200b\u6216\u200b\u6211\u4eec\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u670d\u52a1\u200b\u7684\u200b\u5174\u8da3\u200b\u3001\u200b\u53c2\u4e0e\u200b\u670d\u52a1\u200b\u4e0a\u200b\u7684\u200b\u6d3b\u52a8\u200b\u6216\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8054\u7cfb\u200b\u6211\u4eec\u200b\u65f6\u200b\u3002</p> <p>\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p>"},{"location":"zh/about/privacy/#_3","title":"\u81ea\u52a8\u200b\u6536\u96c6\u200b\u7684\u200b\u4fe1\u606f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u67d0\u4e9b\u200b\u4fe1\u606f\u200b\u2014\u2014\u200b\u5982\u200bIP\u200b\u5730\u5740\u200b\u548c\u200b/\u200b\u6216\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u8bbe\u5907\u200b\u7279\u5f81\u200b\u2014\u2014\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u88ab\u200b\u6536\u96c6\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5728\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u5bfc\u822a\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u81ea\u52a8\u200b\u6536\u96c6\u200b\u67d0\u4e9b\u200b\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u4e0d\u4f1a\u200b\u900f\u9732\u200b\u60a8\u200b\u7684\u200b\u7279\u5b9a\u200b\u8eab\u4efd\u200b\uff08\u200b\u5982\u200b\u60a8\u200b\u7684\u200b\u59d3\u540d\u200b\u6216\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\uff09\uff0c\u200b\u4f46\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u8bbe\u5907\u200b\u548c\u200b\u4f7f\u7528\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u8bbe\u5907\u200b\u7279\u6027\u200b\u3001\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u3001\u200b\u8bed\u8a00\u200b\u504f\u597d\u200b\u3001\u200b\u5f15\u7528\u200bURL\u3001\u200b\u8bbe\u5907\u200b\u540d\u79f0\u200b\u3001\u200b\u56fd\u5bb6\u200b\u3001\u200b\u4f4d\u7f6e\u200b\u3001\u200b\u6709\u5173\u200b\u60a8\u200b\u5982\u4f55\u200b\u4ee5\u53ca\u200b\u4f55\u65f6\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u6280\u672f\u200b\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u4e3b\u8981\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7ef4\u62a4\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u5b89\u5168\u6027\u200b\u548c\u200b\u8fd0\u4f5c\u200b\u6240\u200b\u9700\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6211\u4eec\u200b\u5185\u90e8\u200b\u7684\u200b\u5206\u6790\u200b\u548c\u200b\u62a5\u544a\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u50cf\u200b\u8bb8\u591a\u200b\u4f01\u4e1a\u200b\u4e00\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u901a\u8fc7\u200bcookies\u200b\u548c\u200b\u7c7b\u4f3c\u200b\u6280\u672f\u200b\u6536\u96c6\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u4fe1\u606f\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u6807\u8bc6\u7b26\u200b\u3002     \u200b\u6807\u8bc6\u7b26\u200b\u662f\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u751f\u6210\u200b\u7684\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u8bbe\u5907\u200b\u548c\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200b\u552f\u4e00\u200b\u968f\u673a\u200b\u5b57\u7b26\u4e32\u200b\u3002     \u200b\u8be5\u200b\u6807\u8bc6\u7b26\u200b\u5b58\u50a8\u200b\u5728\u200b\u60a8\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u7684\u200b\u4e00\u4e2a\u200bcookie\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u200b\u6211\u4eec\u200b\u80fd\u591f\u200b\u5728\u200b\u591a\u4e2a\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u8fd4\u56de\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u8bc6\u522b\u200b\u60a8\u200b\u3002     \u200b\u6ce8\u610f\u200b\u8fd9\u4e2a\u200b\u6807\u8bc6\u7b26\u200b\u4e0d\u200b\u5305\u542b\u200b\u4efb\u4f55\u200b\u5173\u4e8e\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u548c\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5b83\u200b\u4e0d\u80fd\u200b\u7528\u4e8e\u200b\u5728\u200b\u4e0d\u540c\u200b\u8bbe\u5907\u200b\u6216\u200b\u6d4f\u89c8\u5668\u200b\u4e4b\u95f4\u200b\u8ddf\u8e2a\u200b\u60a8\u200b\u3002     \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6e05\u9664\u200b\u6d4f\u89c8\u5668\u200b\u7f13\u5b58\u200b\u968f\u65f6\u200b\u5220\u9664\u200b\u6b64\u200bcookie\u3002</li> <li>\u200b\u65e5\u5fd7\u200b\u548c\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u3002     \u200b\u65e5\u5fd7\u200b\u548c\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u662f\u200b\u4e0e\u200b\u670d\u52a1\u200b\u76f8\u5173\u200b\u7684\u200b\u3001\u200b\u8bca\u65ad\u200b\u3001\u200b\u4f7f\u7528\u200b\u548c\u200b\u6027\u80fd\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u6216\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6536\u96c6\u200b\uff0c\u200b\u5e76\u200b\u8bb0\u5f55\u200b\u5728\u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002     \u200b\u6839\u636e\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u4e92\u52a8\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u65e5\u5fd7\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\u3001\u200b\u8bbe\u5907\u200b\u4fe1\u606f\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u7c7b\u578b\u200b\u548c\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6709\u5173\u200b\u60a8\u200b\u5728\u200b\u670d\u52a1\u200b\u4e2d\u200b\u7684\u200b\u6d3b\u52a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff08\u200b\u5982\u200b\u4e0e\u200b\u60a8\u200b\u4f7f\u7528\u200b\u76f8\u5173\u200b\u7684\u200b\u65e5\u671f\u200b/\u200b\u65f6\u95f4\u200b\u6233\u200b\u3001\u200b\u6d4f\u89c8\u200b\u548c\u200b\u67e5\u770b\u200b\u7684\u200b\u9875\u9762\u200b\u548c\u200b\u6587\u4ef6\u200b\u3001\u200b\u641c\u7d22\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u91c7\u53d6\u200b\u7684\u200b\u5176\u4ed6\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4f8b\u5982\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u529f\u80fd\u200b\uff09\uff0c\u200b\u8bbe\u5907\u200b\u4e8b\u4ef6\u200b\u4fe1\u606f\u200b\uff08\u200b\u5982\u200b\u7cfb\u7edf\u6d3b\u52a8\u200b\u3001\u200b\u9519\u8bef\u62a5\u544a\u200b\uff08\u200b\u6709\u65f6\u200b\u79f0\u4e3a\u200b\u2019\u200b\u5d29\u6e83\u200b\u8f6c\u50a8\u200b\u2019\uff09\u200b\u548c\u200b\u786c\u4ef6\u200b\u8bbe\u7f6e\u200b\uff09\u3002</li> <li>\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u3001\u200b\u7535\u8bdd\u200b\u3001\u200b\u5e73\u677f\u200b\u6216\u200b\u5176\u4ed6\u200b\u8bbe\u5907\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002     \u200b\u6839\u636e\u200b\u6240\u200b\u4f7f\u7528\u200b\u7684\u200b\u8bbe\u5907\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u5982\u4e0b\u200b\u4fe1\u606f\u200b\uff1a\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\uff08\u200b\u6216\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\uff09\u3001\u200b\u8bbe\u5907\u200b\u548c\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8bc6\u522b\u200b\u53f7\u200b\u3001\u200b\u4f4d\u7f6e\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u7c7b\u578b\u200b\u3001\u200b\u786c\u4ef6\u200b\u578b\u53f7\u200b\u3001\u200b\u4e92\u8054\u7f51\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u548c\u200b/\u200b\u6216\u200b\u79fb\u52a8\u200b\u8fd0\u8425\u5546\u200b\u3001\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u548c\u200b\u7cfb\u7edf\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u4f4d\u7f6e\u200b\u6570\u636e\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u4f4d\u7f6e\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u8bbe\u5907\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u662f\u200b\u7cbe\u786e\u200b\u7684\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e0d\u200b\u7cbe\u786e\u200b\u7684\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u591a\u5c11\u200b\u4fe1\u606f\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u7684\u200b\u8bbe\u5907\u200b\u7684\u200b\u7c7b\u578b\u200b\u548c\u200b\u8bbe\u7f6e\u200b\u3002     \u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200bGPS\u200b\u548c\u200b\u5176\u4ed6\u200b\u6280\u672f\u200b\u6765\u200b\u6536\u96c6\u200b\u5730\u7406\u4f4d\u7f6e\u200b\u6570\u636e\u200b\uff0c\u200b\u544a\u8bc9\u200b\u6211\u4eec\u200b\u60a8\u200b\u5f53\u524d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff08\u200b\u57fa\u4e8e\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\uff09\u3002     \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4e0d\u8ba9\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u6b64\u200b\u4fe1\u606f\u200b\uff0c\u200b\u65b9\u6cd5\u200b\u662f\u200b\u62d2\u7edd\u200b\u8bbf\u95ee\u4fe1\u606f\u200b\u6216\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u7981\u7528\u200b\u4f4d\u7f6e\u200b\u8bbe\u7f6e\u200b\u3002</li> </ul>"},{"location":"zh/about/privacy/#_4","title":"\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7c7b\u522b","text":"<p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u5185\u200b\uff0c\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u7c7b\u522b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> \u200b\u7c7b\u522b\u200b \u200b\u793a\u4f8b\u200b \u200b\u5df2\u200b\u6536\u96c6\u200b A. \u200b\u6807\u8bc6\u7b26\u200b \u200b\u8054\u7cfb\u65b9\u5f0f\u200b\uff0c\u200b\u5982\u200b\u771f\u5b9e\u200b\u59d3\u540d\u200b\u3001\u200b\u522b\u540d\u200b\u3001\u200b\u90ae\u653f\u200b\u5730\u5740\u200b\u3001\u200b\u7535\u8bdd\u200b\u6216\u200b\u79fb\u52a8\u200b\u8054\u7cfb\u200b\u53f7\u7801\u200b\u3001\u200b\u72ec\u7279\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6807\u8bc6\u7b26\u200b\u3001\u200b\u5728\u7ebf\u200b\u6807\u8bc6\u7b26\u200b\u3001\u200b\u4e92\u8054\u7f51\u534f\u8bae\u200b\u5730\u5740\u200b\u3001\u200b\u7535\u5b50\u90ae\u4ef6\u200b\u5730\u5740\u200b\u548c\u200b\u5e10\u6237\u200b\u540d\u79f0\u200b \u200b\u662f\u200b B. \u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u5ba2\u6237\u200b\u8bb0\u5f55\u200b\u6cd5\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b \u200b\u59d3\u540d\u200b\u3001\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\u3001\u200b\u6559\u80b2\u200b\u3001\u200b\u5c31\u4e1a\u200b\u3001\u200b\u5c31\u4e1a\u200b\u5386\u53f2\u200b\u548c\u200b\u8d22\u52a1\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b C. \u200b\u5dde\u200b\u6216\u200b\u8054\u90a6\u200b\u6cd5\u5f8b\u200b\u4e0b\u200b\u7684\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u5206\u7c7b\u200b\u7279\u5f81\u200b \u200b\u6027\u522b\u200b\u3001\u200b\u5e74\u9f84\u200b\u3001\u200b\u51fa\u751f\u65e5\u671f\u200b\u3001\u200b\u79cd\u65cf\u200b\u548c\u200b\u6c11\u65cf\u200b\u3001\u200b\u56fd\u7c4d\u200b\u3001\u200b\u5a5a\u59fb\u72b6\u51b5\u200b\u548c\u200b\u5176\u4ed6\u200b\u4eba\u53e3\u200b\u7edf\u8ba1\u6570\u636e\u200b \u200b\u5426\u200b D. \u200b\u5546\u4e1a\u4fe1\u606f\u200b \u200b\u4ea4\u6613\u200b\u4fe1\u606f\u200b\u3001\u200b\u8d2d\u4e70\u200b\u5386\u53f2\u200b\u3001\u200b\u8d22\u52a1\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u548c\u200b\u652f\u4ed8\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b E. \u200b\u751f\u7269\u200b\u8bc6\u522b\u200b\u4fe1\u606f\u200b \u200b\u6307\u7eb9\u200b\u548c\u200b\u58f0\u7eb9\u200b \u200b\u5426\u200b F. \u200b\u4e92\u8054\u7f51\u200b\u6216\u200b\u5176\u4ed6\u200b\u7c7b\u4f3c\u200b\u7f51\u7edc\u200b\u6d3b\u52a8\u200b \u200b\u6d4f\u89c8\u200b\u5386\u53f2\u200b\u3001\u200b\u641c\u7d22\u200b\u5386\u53f2\u200b\u3001\u200b\u5728\u7ebf\u200b\u884c\u4e3a\u200b\u3001\u200b\u5174\u8da3\u200b\u6570\u636e\u200b\u548c\u200b\u4e0e\u200b\u6211\u4eec\u200b\u548c\u200b\u5176\u4ed6\u200b\u7f51\u7ad9\u200b\u3001\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3001\u200b\u7cfb\u7edf\u200b\u548c\u200b\u5e7f\u544a\u200b\u7684\u200b\u4e92\u52a8\u200b \u200b\u662f\u200b G. \u200b\u5730\u7406\u4f4d\u7f6e\u200b\u6570\u636e\u200b \u200b\u8bbe\u5907\u200b\u4f4d\u7f6e\u200b \u200b\u662f\u200b H. \u200b\u97f3\u9891\u200b\u3001\u200b\u7535\u5b50\u200b\u3001\u200b\u611f\u89c9\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u4fe1\u606f\u200b \u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u4e1a\u52a1\u200b\u6d3b\u52a8\u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u56fe\u50cf\u200b\u548c\u200b\u97f3\u9891\u200b\u3001\u200b\u89c6\u9891\u200b\u6216\u200b\u901a\u8bdd\u5f55\u97f3\u200b \u200b\u5426\u200b I. \u200b\u4e0e\u200b\u804c\u4e1a\u200b\u76f8\u5173\u200b\u7684\u200b\u4fe1\u606f\u200b \u200b\u4e3a\u4e86\u200b\u5728\u200b\u4e1a\u52a1\u200b\u5c42\u9762\u200b\u63d0\u4f9b\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u800c\u200b\u6536\u96c6\u200b\u7684\u200b\u5546\u4e1a\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\u6216\u200b\u804c\u52a1\u200b\u540d\u79f0\u200b\u3001\u200b\u5de5\u4f5c\u200b\u5386\u53f2\u200b\u548c\u200b\u804c\u4e1a\u8d44\u683c\u200b \u200b\u5426\u200b J. \u200b\u6559\u80b2\u200b\u4fe1\u606f\u200b \u200b\u5b66\u751f\u200b\u8bb0\u5f55\u200b\u548c\u200b\u76ee\u5f55\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b K. \u200b\u4ece\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u4e2d\u200b\u63a8\u65ad\u51fa\u200b\u7684\u200b\u63a8\u8bba\u200b \u200b\u4ece\u200b\u4e0a\u8ff0\u200b\u4efb\u4f55\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u4e2d\u200b\u63a8\u65ad\u51fa\u200b\u7684\u200b\u7528\u4e8e\u200b\u521b\u5efa\u200b\u4e2a\u4eba\u200b\u504f\u597d\u200b\u548c\u200b\u7279\u5f81\u200b\u7684\u200b\u6982\u51b5\u200b\u6216\u200b\u6458\u8981\u200b \u200b\u662f\u200b L. \u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b \u200b\u5426\u200b <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u80fd\u200b\u5728\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4eb2\u81ea\u200b\u3001\u200b\u5728\u7ebf\u200b\u6216\u200b\u901a\u8fc7\u200b\u7535\u8bdd\u200b\u6216\u200b\u90ae\u4ef6\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4e92\u52a8\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u6536\u96c6\u200b\u5176\u4ed6\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u901a\u8fc7\u200b\u6211\u4eec\u200b\u7684\u200b\u5ba2\u6237\u200b\u652f\u6301\u200b\u6e20\u9053\u200b\u83b7\u5f97\u200b\u5e2e\u52a9\u200b\uff1b</li> <li>\u200b\u53c2\u4e0e\u200b\u5ba2\u6237\u200b\u8c03\u67e5\u200b\u6216\u200b\u7ade\u8d5b\u200b\uff1b\u200b\u4ee5\u53ca\u200b</li> <li>\u200b\u4fc3\u8fdb\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4ea4\u4ed8\u200b\u5e76\u200b\u56de\u5e94\u200b\u60a8\u200b\u7684\u200b\u67e5\u8be2\u200b\u3002</li> </ul> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u671f\u9650\u5185\u200b\u4f7f\u7528\u200b\u548c\u200b\u4fdd\u7559\u200b\u6240\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u9075\u5b88\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u3001\u200b\u89e3\u51b3\u200b\u4e89\u8bae\u200b\u548c\u200b\u6267\u884c\u200b\u6211\u4eec\u200b\u7684\u200b\u534f\u8bae\u200b\uff1a</p> <ul> <li>A \u200b\u7c7b\u200b\uff1a24\u200b\u4e2a\u200b\u6708\u200b</li> <li>F \u200b\u7c7b\u200b\uff1a24\u200b\u4e2a\u200b\u6708\u200b</li> <li>G \u200b\u7c7b\u200b\uff1a24\u200b\u4e2a\u200b\u6708\u200b</li> <li>K \u200b\u7c7b\u200b\uff1a24\u200b\u4e2a\u200b\u6708\u200b</li> </ul>"},{"location":"zh/about/privacy/#2","title":"2. \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u63d0\u4f9b\u200b\u3001\u200b\u6539\u5584\u200b\u548c\u200b\u7ba1\u7406\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u4e0e\u200b\u60a8\u200b\u6c9f\u901a\u200b\uff0c\u200b\u8fdb\u884c\u200b\u5b89\u5168\u200b\u548c\u200b\u9632\u200b\u6b3a\u8bc8\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u5728\u200b\u5f97\u5230\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u51fa\u4e8e\u200b\u5176\u4ed6\u200b\u76ee\u7684\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u51fa\u4e8e\u200b\u591a\u79cd\u200b\u539f\u56e0\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u5982\u4f55\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u4e92\u52a8\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u4fdd\u62a4\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u4fdd\u6301\u200b\u670d\u52a1\u200b\u5b89\u5168\u200b\u7684\u200b\u52aa\u529b\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5305\u62ec\u200b\u76d1\u63a7\u200b\u548c\u200b\u9884\u9632\u200b\u6b3a\u8bc8\u200b\u3002</li> <li>\u200b\u8bc6\u522b\u200b\u7528\u6237\u200b\u8d8b\u52bf\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u6709\u5173\u200b\u60a8\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u66f4\u597d\u200b\u5730\u200b\u4e86\u89e3\u200b\u5b83\u4eec\u200b\u7684\u200b\u4f7f\u7528\u200b\u60c5\u51b5\u200b\uff0c\u200b\u4ece\u800c\u200b\u6539\u8fdb\u200b\u5b83\u4eec\u200b\u3002</li> <li>\u200b\u4fdd\u5b58\u200b\u6216\u200b\u4fdd\u62a4\u200b\u4e2a\u4eba\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u5fc5\u8981\u200b\u65f6\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u4fdd\u5b58\u200b\u6216\u200b\u4fdd\u62a4\u200b\u4e2a\u4eba\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4e3a\u4e86\u200b\u9632\u6b62\u200b\u4f24\u5bb3\u200b\u3002</li> </ul>"},{"location":"zh/about/privacy/#3","title":"3. \u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u6709\u200b\u4ec0\u4e48\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ea\u6709\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u8981\u200b\u4e14\u200b\u6709\u200b\u6709\u6548\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u7406\u7531\u200b\uff08\u200b\u5373\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\uff09\u200b\u65f6\u624d\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5982\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3001\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3001\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\u7ed9\u200b\u60a8\u200b\u8fdb\u5165\u200b\u6216\u200b\u5c65\u884c\u200b\u6211\u4eec\u200b\u7684\u200b\u5408\u540c\u200b\u4e49\u52a1\u200b\u3001\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u6216\u200b\u6ee1\u8db3\u200b\u6211\u4eec\u200b\u5408\u6cd5\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5229\u76ca\u200b\u3002</p> <p>\u200b\u6b27\u76df\u200b\u901a\u7528\u200b\u6570\u636e\u4fdd\u62a4\u200b\u6761\u4f8b\u200b\uff08GDPR\uff09\u200b\u548c\u200b\u82f1\u56fd\u200bGDPR\u200b\u8981\u6c42\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u6211\u4eec\u200b\u4f9d\u9760\u200b\u7684\u200b\u6709\u6548\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\u4ee5\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\u4ee5\u4e0b\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <ul> <li>\u200b\u540c\u610f\u200b\u3002     \u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u200b\u7ed9\u200b\u6211\u4eec\u200b\u660e\u786e\u200b\u540c\u610f\u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7528\u4e8e\u200b\u67d0\u4e2a\u200b\u7279\u5b9a\u200b\u76ee\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002     \u200b\u60a8\u200b\u6709\u6743\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002     \u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002</li> <li>\u200b\u5408\u6cd5\u5229\u76ca\u200b\u3002     \u200b\u5f53\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u51fa\u4e8e\u200b\u6211\u4eec\u200b\u5408\u6cd5\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5229\u76ca\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u662f\u200b\u5408\u7406\u200b\u5fc5\u8981\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd9\u4e9b\u200b\u5229\u76ca\u200b\u4e0d\u200b\u8d85\u8fc7\u200b\u60a8\u200b\u7684\u200b\u5229\u76ca\u200b\u548c\u200b\u57fa\u672c\u6743\u5229\u200b\u4e0e\u200b\u81ea\u7531\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002     \u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u7528\u4e8e\u200b\uff1a<ul> <li>\u200b\u5206\u6790\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u5982\u4f55\u200b\u88ab\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6539\u8fdb\u200b\u5b83\u4eec\u200b\u4ee5\u200b\u5438\u5f15\u200b\u548c\u200b\u4fdd\u7559\u200b\u7528\u6237\u200b</li> <li>\u200b\u8bca\u65ad\u200b\u95ee\u9898\u200b\u548c\u200b/\u200b\u6216\u200b\u9884\u9632\u200b\u6b3a\u8bc8\u200b\u6d3b\u52a8\u200b</li> </ul> </li> <li>\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u987b\u200b\u9075\u5b88\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u673a\u6784\u200b\u6216\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u5408\u4f5c\u200b\u3001\u200b\u884c\u4f7f\u200b\u6216\u200b\u634d\u536b\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\uff0c\u200b\u6216\u200b\u5728\u200b\u6211\u4eec\u200b\u53c2\u4e0e\u200b\u7684\u200b\u8bc9\u8bbc\u200b\u4e2d\u200b\u62ab\u9732\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4f5c\u4e3a\u200b\u8bc1\u636e\u200b\u3002</li> <li>\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u987b\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b\u6d89\u53ca\u200b\u6f5c\u5728\u200b\u5a01\u80c1\u200b\u4efb\u4f55\u4eba\u200b\u7684\u200b\u5b89\u5168\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</li> </ul> <p>\u200b\u5728\u200b\u52a0\u62ff\u5927\u200b\u5904\u7406\u200b\u7684\u200b\u540c\u610f\u200b</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f4d\u4e8e\u200b\u52a0\u62ff\u5927\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u4e0b\u200b\u5728\u200b\u67d0\u4e9b\u200b\u7279\u6b8a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u65e0\u9700\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5408\u6cd5\u200b\u5730\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f8b\u5982\u200b\uff1a</p> <ul> <li>\u200b\u5982\u679c\u200b\u6536\u96c6\u200b\u660e\u663e\u200b\u7b26\u5408\u200b\u4e2a\u4eba\u200b\u7684\u200b\u5229\u76ca\u200b\u4e14\u200b\u65e0\u6cd5\u200b\u53ca\u65f6\u200b\u83b7\u5f97\u200b\u540c\u610f\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u8c03\u67e5\u200b\u548c\u200b\u6b3a\u8bc8\u200b\u68c0\u6d4b\u200b\u4e0e\u200b\u9884\u9632\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u5546\u4e1a\u200b\u4ea4\u6613\u200b\uff0c\u200b\u524d\u63d0\u200b\u662f\u200b\u6ee1\u8db3\u200b\u67d0\u4e9b\u200b\u6761\u4ef6\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u5305\u542b\u200b\u5728\u200b\u8bc1\u4eba\u200b\u58f0\u660e\u200b\u4e2d\u200b\uff0c\u200b\u4e14\u200b\u6536\u96c6\u200b\u5bf9\u4e8e\u200b\u8bc4\u4f30\u200b\u3001\u200b\u5904\u7406\u200b\u6216\u200b\u89e3\u51b3\u200b\u4fdd\u9669\u200b\u7d22\u8d54\u200b\u662f\u200b\u5fc5\u8981\u200b\u7684\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u8bc6\u522b\u200b\u53d7\u4f24\u200b\u3001\u200b\u751f\u75c5\u200b\u6216\u200b\u5df2\u6545\u200b\u4eba\u58eb\u200b\u5e76\u200b\u4e0e\u200b\u8fd1\u4eb2\u200b\u6c9f\u901a\u200b</li> <li>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u6709\u200b\u5408\u7406\u200b\u7684\u200b\u7406\u7531\u200b\u76f8\u4fe1\u200b\u67d0\u4e2a\u200b\u4eba\u200b\u5df2\u7ecf\u200b\u3001\u200b\u6b63\u5728\u200b\u6216\u200b\u53ef\u80fd\u200b\u6210\u4e3a\u200b\u91d1\u878d\u200b\u6ee5\u7528\u200b\u7684\u200b\u53d7\u5bb3\u8005\u200b</li> <li>\u200b\u5982\u679c\u200b\u5408\u7406\u200b\u9884\u671f\u200b\u901a\u8fc7\u200b\u5f81\u5f97\u200b\u540c\u610f\u200b\u4ee5\u200b\u6536\u96c6\u200b\u548c\u200b\u4f7f\u7528\u200b\u4fe1\u606f\u200b\u4f1a\u200b\u635f\u5bb3\u200b\u4fe1\u606f\u200b\u7684\u200b\u53ef\u7528\u6027\u200b\u6216\u200b\u51c6\u786e\u6027\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6536\u96c6\u200b\u5bf9\u4e8e\u200b\u8c03\u67e5\u200b\u8fdd\u53cd\u200b\u534f\u8bae\u200b\u6216\u200b\u8fdd\u53cd\u200b\u52a0\u62ff\u5927\u200b\u6216\u7701\u200b\u6cd5\u5f8b\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u5408\u7406\u200b\u7684\u200b</li> <li>\u200b\u5982\u679c\u200b\u62ab\u9732\u200b\u662f\u200b\u4e3a\u4e86\u200b\u9075\u5b88\u200b\u4f20\u7968\u200b\u3001\u200b\u641c\u67e5\u200b\u4ee4\u200b\u3001\u200b\u6cd5\u9662\u200b\u547d\u4ee4\u200b\u6216\u200b\u4e0e\u200b\u8bb0\u5f55\u200b\u751f\u4ea7\u200b\u76f8\u5173\u200b\u7684\u200b\u6cd5\u9662\u200b\u89c4\u5219\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u662f\u200b\u7531\u200b\u4e2a\u4eba\u200b\u5728\u200b\u5176\u200b\u5c31\u4e1a\u200b\u3001\u200b\u4e1a\u52a1\u200b\u6216\u200b\u4e13\u4e1a\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4ea7\u751f\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6536\u96c6\u200b\u4e0e\u200b\u4fe1\u606f\u200b\u4ea7\u751f\u200b\u7684\u200b\u76ee\u7684\u200b\u4e00\u81f4\u200b</li> <li>\u200b\u5982\u679c\u200b\u6536\u96c6\u200b\u4ec5\u200b\u7528\u4e8e\u200b\u65b0\u95fb\u200b\u3001\u200b\u827a\u672f\u200b\u6216\u200b\u6587\u5b66\u200b\u76ee\u7684\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u662f\u200b\u516c\u5f00\u200b\u53ef\u7528\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u901a\u8fc7\u200b\u89c4\u5b9a\u200b\u6307\u5b9a\u200b</li> </ul>"},{"location":"zh/about/privacy/#4","title":"4. \u200b\u6211\u4eec\u200b\u4f55\u65f6\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u8c01\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u672c\u8282\u200b\u63cf\u8ff0\u200b\u7684\u200b\u7279\u5b9a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u548c\u200b/\u200b\u6216\u200b\u4e0e\u200b\u4ee5\u4e0b\u200b\u7b2c\u4e09\u65b9\u200b\u5171\u4eab\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7528\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u4e1a\u52a1\u200b\u76ee\u7684\u200b\uff0c\u200b\u5982\u200b\u8fdb\u884c\u200b\u5185\u90e8\u200b\u7814\u7a76\u200b\u4ee5\u200b\u8fdb\u884c\u200b\u6280\u672f\u5f00\u53d1\u200b\u548c\u200b\u5c55\u793a\u200b\u3002 \u200b\u8fd9\u200b\u4e0d\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u201c\u200b\u51fa\u552e\u200b\u201d\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u4f9b\u5e94\u5546\u200b\u3001\u200b\u987e\u95ee\u200b\u548c\u200b\u5176\u4ed6\u200b\u7b2c\u4e09\u65b9\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u3002 \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0e\u200b\u4e3a\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u6216\u200b\u4ee3\u8868\u200b\u6211\u4eec\u200b\u5de5\u4f5c\u200b\u5e76\u200b\u9700\u8981\u200b\u8bbf\u95ee\u200b\u6b64\u7c7b\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u6267\u884c\u200b\u8be5\u200b\u5de5\u4f5c\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u4f9b\u5e94\u5546\u200b\u3001\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u3001\u200b\u627f\u5305\u5546\u200b\u6216\u200b\u4ee3\u7406\u200b\uff08\u201c\u200b\u7b2c\u4e09\u65b9\u200b\u201d\uff09\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u6570\u636e\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7b7e\u8ba2\u200b\u4e86\u200b\u5408\u540c\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5408\u540c\u200b\u65e8\u5728\u200b\u5e2e\u52a9\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4ed6\u4eec\u200b\u4e0d\u80fd\u200b\u5728\u200b\u672a\u7ecf\u200b\u6211\u4eec\u200b\u6307\u793a\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u505a\u200b\u4efb\u4f55\u200b\u4e8b\u60c5\u200b\u3002 \u200b\u4ed6\u4eec\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4ee5\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u7ec7\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u4ed6\u4eec\u200b\u8fd8\u200b\u627f\u8bfa\u200b\u4fdd\u62a4\u200b\u4ed6\u4eec\u200b\u4ee3\u8868\u200b\u6211\u4eec\u200b\u6301\u6709\u200b\u7684\u200b\u6570\u636e\u200b\u5e76\u200b\u6309\u7167\u200b\u6211\u4eec\u200b\u7684\u200b\u6307\u793a\u200b\u4fdd\u7559\u200b\u8be5\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>\u200b\u5e7f\u544a\u200b\u3001\u200b\u76f4\u9500\u200b\u548c\u200b\u6f5c\u5728\u200b\u5ba2\u6237\u200b\u751f\u6210\u200b<ul> <li>Google AdSense</li> </ul> </li> <li>\u200b\u4e91\u200b\u8ba1\u7b97\u200b\u670d\u52a1\u200b<ul> <li>Microsoft Azure</li> <li>Amazon Web Services (AWS)</li> <li>Google Cloud Platform (GCP)</li> </ul> </li> <li>\u200b\u901a\u4fe1\u200b\u548c\u200b\u5185\u5bb9\u200b\u4ea4\u4ed8\u200b\u7f51\u7edc\u200b (CDN) \u200b\u670d\u52a1\u200b<ul> <li>Cloudflare</li> </ul> </li> <li>\u200b\u5185\u5bb9\u200b\u4f18\u5316\u200b<ul> <li>Google\u200b\u7ad9\u70b9\u200b\u641c\u7d22\u200b</li> <li>Google\u200b\u5b57\u4f53\u200b</li> </ul> </li> <li>\u200b\u529f\u80fd\u200b\u548c\u200b\u57fa\u7840\u8bbe\u65bd\u200b\u4f18\u5316\u200b<ul> <li>GitHub\u200b\u9875\u9762\u200b</li> </ul> </li> <li>\u200b\u7528\u6237\u200b\u8bc4\u8bba\u200b\u548c\u200b\u8bba\u575b\u200b<ul> <li>Disqus</li> <li>GitHub\u200b\u8bae\u9898\u200b</li> <li>GitHub\u200b\u8ba8\u8bba\u200b</li> </ul> </li> <li>\u200b\u7f51\u7edc\u200b\u548c\u200b\u79fb\u52a8\u200b\u5206\u6790\u200b<ul> <li>Google Analytics</li> </ul> </li> </ul> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <ul> <li>\u200b\u4e1a\u52a1\u200b\u8f6c\u79fb\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u5e76\u8d2d\u200b\u3001\u200b\u51fa\u552e\u200b\u516c\u53f8\u200b\u8d44\u4ea7\u200b\u3001\u200b\u878d\u8d44\u200b\u6216\u200b\u6536\u8d2d\u200b\u6211\u4eec\u200b\u5168\u90e8\u200b\u6216\u200b\u90e8\u5206\u200b\u4e1a\u52a1\u200b\u7684\u200b\u8c08\u5224\u200b\u4e2d\u200b\u5171\u4eab\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</li> </ul> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u51fa\u4e8e\u200b\u4e1a\u52a1\u200b\u76ee\u7684\u200b\u62ab\u9732\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u7c7b\u522b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <p>\u200b\u65e0\u200b</p> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u51fa\u552e\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\uff1a</p> <p>\u200b\u65e0\u200b</p> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u4e0e\u200b\u4e4b\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\uff1a</p> <ul> <li>\u200b\u7f51\u7edc\u200b\u548c\u200b\u79fb\u52a8\u200b\u5206\u6790\u200b<ul> <li>Google Analytics</li> </ul> </li> </ul>"},{"location":"zh/about/privacy/#5-cookies","title":"5. \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u4f7f\u7528\u200bcookies\u200b\u548c\u200b\u5176\u4ed6\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200bcookies\u200b\u548c\u200b\u5176\u4ed6\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u6765\u200b\u6536\u96c6\u200b\u548c\u200b\u5b58\u50a8\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u7b2c\u4e09\u65b9\u200b\u548c\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u7528\u4e8e\u200b\u5206\u6790\u200b\u548c\u200b\u5e7f\u544a\u200b\uff0c\u200b\u5305\u62ec\u200b\u5e2e\u52a9\u200b\u7ba1\u7406\u200b\u548c\u200b\u5c55\u793a\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6839\u636e\u200b\u60a8\u200b\u7684\u200b\u5174\u8da3\u200b\u5b9a\u5236\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6216\u200b\u53d1\u9001\u200b\u9057\u5f03\u200b\u8d2d\u7269\u8f66\u200b\u63d0\u9192\u200b\uff08\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u7684\u200b\u6c9f\u901a\u200b\u504f\u597d\u200b\uff09\u3002 \u200b\u8fd9\u4e9b\u200b\u7b2c\u4e09\u65b9\u200b\u548c\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u4f7f\u7528\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6280\u672f\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u5b9a\u5236\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u670d\u52a1\u200b\u5e7f\u544a\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5e7f\u544a\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u6216\u200b\u5176\u4ed6\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u5728\u200b\u9002\u7528\u200b\u7684\u200b\u7f8e\u56fd\u200b\u5dde\u200b\u6cd5\u5f8b\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u201c\u200b\u9500\u552e\u200b\u201d/\u201c\u200b\u5206\u4eab\u200b\u201d\uff08\u200b\u5305\u62ec\u200b\u76ee\u6807\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6839\u636e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5b9a\u4e49\u200b\uff09\u200b\u7684\u200b\u7a0b\u5ea6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u672c\u9875\u200b\u9876\u90e8\u200b\u6216\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u6765\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u8fd9\u4e9b\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p>"},{"location":"zh/about/privacy/#google-analytics","title":"Google Analytics","text":"<p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0e\u200bGoogle Analytics\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u8ddf\u8e2a\u200b\u548c\u200b\u5206\u6790\u200b\u670d\u52a1\u200b\u7684\u200b\u4f7f\u7528\u200b\u60c5\u51b5\u200b\u3002 \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200b\u7684\u200bGoogle Analytics\u200b\u5e7f\u544a\u200b\u529f\u80fd\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>Google Analytics\u200b\u7684\u200b\u518d\u200b\u8425\u9500\u200b</li> <li>Google Display Network\u200b\u5370\u8c61\u200b\u62a5\u544a\u200b</li> <li>Google Analytics\u200b\u4eba\u53e3\u7edf\u8ba1\u200b\u548c\u200b\u5174\u8da3\u200b\u62a5\u544a\u200b</li> </ul> <p>\u200b\u8981\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u5728\u200b\u670d\u52a1\u200b\u4e2d\u200b\u901a\u8fc7\u200bGoogle Analytics\u200b\u8ddf\u8e2a\u200b\u60a8\u200b\uff0c\u200b\u8bf7\u200b\u8bbf\u95ee\u200bhttps://tools.google.com/dlpage/gaoptout\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5e7f\u544a\u200b\u8bbe\u7f6e\u200b\u548c\u200b\u79fb\u52a8\u200b\u5e94\u7528\u200b\u7684\u200b\u5e7f\u544a\u200b\u8bbe\u7f6e\u200b\u6765\u200b\u9009\u62e9\u200b\u9000\u51fa\u200bGoogle Analytics\u200b\u5e7f\u544a\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u5176\u4ed6\u200b\u9000\u51fa\u200b\u65b9\u5f0f\u200b\u5305\u62ec\u200bhttp://optout.networkadvertising.org/\u200b\u548c\u200bhttp://www.networkadvertising.org/mobile-choice\u3002</p> <p>\u200b\u6709\u5173\u200bGoogle\u200b\u9690\u79c1\u200b\u505a\u6cd5\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u8bbf\u95ee\u200bGoogle\u200b\u9690\u79c1\u200b\u4e0e\u200b\u6761\u6b3e\u200b\u3002</p>"},{"location":"zh/about/privacy/#6","title":"6. \u200b\u6211\u4eec\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u591a\u4e45\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u4e2d\u200b\u6982\u8ff0\u200b\u7684\u200b\u76ee\u7684\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u9664\u975e\u200b\u6cd5\u5f8b\u200b\u53e6\u6709\u200b\u8981\u6c42\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ea\u4f1a\u200b\u5728\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u4e2d\u200b\u6982\u8ff0\u200b\u7684\u200b\u76ee\u7684\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u9664\u975e\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6216\u200b\u5141\u8bb8\u200b\u66f4\u957f\u200b\u7684\u200b\u4fdd\u7559\u200b\u671f\u200b\uff08\u200b\u5982\u200b\u7a0e\u52a1\u200b\u3001\u200b\u4f1a\u8ba1\u200b\u6216\u200b\u5176\u4ed6\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\uff09\u3002</p> <p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u6ca1\u6709\u200b\u6301\u7eed\u200b\u7684\u200b\u5408\u6cd5\u200b\u4e1a\u52a1\u200b\u9700\u8981\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5220\u9664\u200b\u6216\u200b\u533f\u540d\u200b\u5316\u5b83\u200b\uff0c\u200b\u6216\u8005\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd9\u200b\u4e0d\u200b\u53ef\u80fd\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5df2\u200b\u5b58\u50a8\u200b\u5728\u200b\u5907\u4efd\u200b\u6863\u6848\u200b\u4e2d\u200b\uff09\uff0c\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b89\u5168\u200b\u5730\u200b\u5b58\u50a8\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u8fdb\u4e00\u6b65\u200b\u5904\u7406\u200b\u9694\u79bb\u200b\uff0c\u200b\u76f4\u5230\u200b\u5220\u9664\u200b\u6210\u4e3a\u200b\u53ef\u80fd\u200b\u3002</p>"},{"location":"zh/about/privacy/#7","title":"7. \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u6301\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u4e00\u7cfb\u5217\u200b\u7ec4\u7ec7\u200b\u548c\u200b\u6280\u672f\u200b\u5b89\u5168\u63aa\u65bd\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5df2\u200b\u5b9e\u65bd\u200b\u9002\u5f53\u200b\u7684\u200b\u6280\u672f\u200b\u548c\u200b\u7ec4\u7ec7\u200b\u5b89\u5168\u63aa\u65bd\u200b\uff0c\u200b\u65e8\u5728\u200b\u4fdd\u62a4\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u5b89\u5168\u200b\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u6211\u4eec\u200b\u91c7\u53d6\u200b\u4e86\u200b\u4fdd\u969c\u200b\u63aa\u65bd\u200b\u5e76\u200b\u52aa\u529b\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff0c\u200b\u4efb\u4f55\u200b\u901a\u8fc7\u200b\u4e92\u8054\u7f51\u200b\u7684\u200b\u7535\u5b50\u200b\u4f20\u8f93\u200b\u6216\u200b\u4fe1\u606f\u200b\u5b58\u50a8\u6280\u672f\u200b\u90fd\u200b\u65e0\u6cd5\u200b\u4fdd\u8bc1\u200b\u662f\u200b100%\u200b\u5b89\u5168\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u627f\u8bfa\u200b\u6216\u200b\u4fdd\u8bc1\u200b\u9ed1\u5ba2\u200b\u3001\u200b\u7f51\u7edc\u200b\u72af\u7f6a\u5206\u5b50\u200b\u6216\u200b\u5176\u4ed6\u200b\u672a\u7ecf\u200b\u6388\u6743\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u4e0d\u4f1a\u200b\u7834\u574f\u200b\u6211\u4eec\u200b\u7684\u200b\u5b89\u5168\u63aa\u65bd\u200b\u5e76\u200b\u4e0d\u200b\u5f53\u5730\u200b\u6536\u96c6\u200b\u3001\u200b\u8bbf\u95ee\u200b\u3001\u200b\u7a83\u53d6\u200b\u6216\u200b\u4fee\u6539\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 \u200b\u5c3d\u7ba1\u200b\u6211\u4eec\u200b\u5c06\u200b\u5c3d\u200b\u6700\u5927\u200b\u52aa\u529b\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5230\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4f20\u8f93\u200b\u548c\u200b\u4ece\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4f20\u8f93\u200b\u4ecd\u7136\u200b\u662f\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u98ce\u9669\u200b\u3002 \u200b\u60a8\u200b\u5e94\u8be5\u200b\u53ea\u200b\u5728\u200b\u5b89\u5168\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u3002</p>"},{"location":"zh/about/privacy/#8","title":"8. \u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u52aa\u529b\u200b\u5728\u200b\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u7684\u200b\u6700\u5927\u200b\u8303\u56f4\u200b\u5185\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\u548c\u200b\u9009\u62e9\u200b\u3002</p> <p>\u200b\u60a8\u200b\u5728\u200b\u67d0\u4e9b\u200b\u6570\u636e\u4fdd\u62a4\u200b\u6cd5\u4e0b\u200b\u6709\u200b\u6743\u5229\u200b\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6743\u5229\u200b\u4e0d\u662f\u200b\u7edd\u5bf9\u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6839\u636e\u200b\u6cd5\u5f8b\u200b\u62d2\u7edd\u200b\u60a8\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u6743\u5229\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u77e5\u60c5\u6743\u200b     \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u6b63\u5728\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u8bbf\u95ee\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u66f4\u6b63\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u4e2d\u200b\u7684\u200b\u4e0d\u200b\u51c6\u786e\u200b\u4fe1\u606f\u200b</li> <li>\u200b\u8bf7\u6c42\u200b\u5220\u9664\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u83b7\u53d6\u200b\u526f\u672c\u200b\u6743\u200b     \u200b\u60a8\u200b\u4ee5\u524d\u200b\u4e0e\u200b\u6211\u4eec\u200b\u5171\u4eab\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u53cd\u200b\u6b67\u89c6\u200b\u6743\u200b     \u200b\u9488\u5bf9\u200b\u60a8\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b</li> <li>\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u6743\u200b<ul> <li>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7528\u4e8e\u200b\u76ee\u6807\u200b\u5e7f\u544a\u200b\uff08\u200b\u6216\u200b\u6839\u636e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5b9a\u4e49\u200b\u7684\u200b\u201c\u200b\u5206\u4eab\u200b\u201d\uff09\uff0c\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u9500\u552e\u200b\uff0c\u200b\u6216\u200b\u4fc3\u8fdb\u200b\u5bf9\u200b\u60a8\u200b\u4ea7\u751f\u200b\u6cd5\u5f8b\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u91cd\u5927\u200b\u6548\u679c\u200b\u7684\u200b\u51b3\u7b56\u200b\uff08\u201c\u200b\u5206\u6790\u200b\u201d\uff09\u200b\u7684\u200b\u5206\u6790\u200b</li> <li>\u200b\u6536\u96c6\u200b\u901a\u8fc7\u200b\u8bed\u97f3\u200b\u6216\u200b\u9762\u90e8\u200b\u8bc6\u522b\u200b\u529f\u80fd\u200b\u64cd\u4f5c\u200b\u6536\u96c6\u200b\u7684\u200b\u654f\u611f\u6570\u636e\u200b\u548c\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> </ul> </li> <li>\u200b\u83b7\u53d6\u200b\u6743\u200b<ul> <li>\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\u7684\u200b\u5217\u8868\u200b</li> <li>\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u7279\u5b9a\u200b\u7b2c\u4e09\u65b9\u200b\u7684\u200b\u5217\u8868\u200b</li> </ul> </li> <li>\u200b\u9650\u5236\u200b\u4f7f\u7528\u200b\u548c\u200b\u62ab\u9732\u200b\u6743\u200b     \u200b\u654f\u611f\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> </ul>"},{"location":"zh/about/privacy/#_5","title":"\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229","text":"<p>\u200b\u60a8\u200b\u51e0\u4e4e\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u884c\u4f7f\u200b\u4e0a\u8ff0\u200b\u6743\u5229\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u56de\u590d\u200b\u548c\u200b\u91c7\u53d6\u200b\u6570\u636e\u200b\u4e3b\u4f53\u200b\u8bbf\u95ee\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4fdd\u5b58\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u5173\u4e8e\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u65e0\u6cd5\u200b\u9a8c\u8bc1\u200b\u60a8\u200b\u7684\u200b\u8eab\u4efd\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u8ba4\u4e3a\u200b\u6211\u4eec\u200b\u975e\u6cd5\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8054\u7cfb\u200b\u60a8\u200b\u6240\u5728\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u76f8\u5173\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u3001\u200b\u5dde\u200b\u603b\u200b\u68c0\u5bdf\u957f\u200b\u6216\u200b\u5176\u4ed6\u200b\u6709\u6743\u200b\u673a\u6784\u200b\u3002</p> \u200b\u5c45\u4f4f\u5730\u200b \u200b\u673a\u6784\u200b \u200b\u6b27\u6d32\u200b\u7ecf\u6d4e\u533a\u200b \u200b\u6210\u5458\u56fd\u200b\u7684\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7763\u673a\u6784\u200b \u200b\u82f1\u56fd\u200b \u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u6fb3\u5927\u5229\u4e9a\u200b \u200b\u6fb3\u5927\u5229\u4e9a\u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u65b0\u897f\u5170\u200b \u200b\u65b0\u897f\u5170\u200b\u9690\u79c1\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u52a0\u62ff\u5927\u200b \u200b\u52a0\u62ff\u5927\u200b\u9690\u79c1\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u7f8e\u56fd\u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u200b \u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u9690\u79c1\u200b\u4fdd\u62a4\u200b\u673a\u6784\u200b \u200b\u745e\u58eb\u200b \u200b\u8054\u90a6\u200b\u6570\u636e\u4fdd\u62a4\u200b\u548c\u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b \u200b\u5357\u975e\u200b \u200b\u4fe1\u606f\u200b\u76d1\u7ba1\u200b\u673a\u6784"},{"location":"zh/about/privacy/#_6","title":"\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f","text":"<p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u4f9d\u8d56\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u662f\u200b\u660e\u786e\u200b\u7684\u200b\u548c\u200b/\u200b\u6216\u200b\u6697\u793a\u200b\u7684\u200b\u540c\u610f\u200b\uff0c\u200b\u53d6\u51b3\u4e8e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\uff0c\u200b\u60a8\u200b\u6709\u6743\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u672c\u9875\u200b\u9876\u90e8\u200b\u6216\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u64a4\u56de\u200b\u4e4b\u524d\u200b\u7684\u200b\u5904\u7406\u200b\u7684\u200b\u5408\u6cd5\u6027\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u5f53\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u65f6\u200b\uff0c\u200b\u57fa\u4e8e\u200b\u9664\u200b\u540c\u610f\u200b\u4e4b\u5916\u200b\u7684\u200b\u5408\u6cd5\u200b\u5904\u7406\u200b\u7406\u7531\u200b\u8fdb\u884c\u200b\u7684\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u5904\u7406\u200b\u3002</p>"},{"location":"zh/about/privacy/#cookies","title":"Cookies\u200b\u548c\u200b\u7c7b\u4f3c\u200b\u6280\u672f","text":"<p>\u200b\u5927\u591a\u6570\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b\u4e3a\u200b\u63a5\u53d7\u200bcookies\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u613f\u610f\u200b\uff0c\u200b\u60a8\u200b\u901a\u5e38\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u8bbe\u7f6e\u200b\u60a8\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u4ee5\u200b\u5220\u9664\u200b\u6216\u200b\u62d2\u7edd\u200b\u6d4f\u89c8\u5668\u200bcookies\u3002 \u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u9009\u62e9\u200b\u5220\u9664\u200b\u6216\u200b\u62d2\u7edd\u200bcookies\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u53ef\u7528\u6027\u200b\u548c\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"zh/about/privacy/#9","title":"9. \u200b\u4e0d\u200b\u8ffd\u8e2a\u200b\u529f\u80fd\u200b\u7684\u200b\u63a7\u5236","text":"<p>\u200b\u5927\u591a\u6570\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u4e00\u4e9b\u200b\u79fb\u52a8\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u548c\u200b\u79fb\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6fc0\u6d3b\u200b\u7684\u200b\u4e0d\u200b\u8ffd\u8e2a\u200b\uff08\u201cDNT\u201d\uff09\u200b\u529f\u80fd\u200b\u6216\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4ee5\u200b\u8868\u8fbe\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u504f\u597d\u200b\uff0c\u200b\u4e0d\u200b\u5e0c\u671b\u200b\u6709\u5173\u200b\u60a8\u200b\u7684\u200b\u5728\u7ebf\u200b\u6d4f\u89c8\u200b\u6d3b\u52a8\u200b\u7684\u200b\u6570\u636e\u200b\u88ab\u200b\u76d1\u63a7\u200b\u548c\u200b\u6536\u96c6\u200b\u3002 \u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u4e3a\u200b\u8bc6\u522b\u200b\u548c\u200b\u5b9e\u65bd\u200bDNT\u200b\u4fe1\u53f7\u200b\u5236\u5b9a\u200b\u7edf\u4e00\u200b\u7684\u200b\u6280\u672f\u6807\u51c6\u200b\u3002 \u200b\u867d\u7136\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u627f\u8bfa\u200b\u5c0a\u91cd\u200b\u6bcf\u200b\u4e00\u4e2a\u200bDNT\u200b\u4fe1\u53f7\u200b\uff0c\u200b\u6211\u4eec\u200b\u529b\u6c42\u200b\u5c0a\u91cd\u200b\u6240\u6709\u200b\u5728\u6280\u672f\u4e0a\u200b\u53ef\u884c\u200b\u7684\u200b\u6b64\u7c7b\u200b\u8bf7\u6c42\u200b\u3002</p> <p>\u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6211\u4eec\u200b\u544a\u8bc9\u60a8\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u54cd\u5e94\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200bDNT\u200b\u4fe1\u53f7\u200b\u3002 \u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u8bc6\u522b\u200b\u548c\u200b\u5c0a\u91cd\u200b\u6240\u6709\u200bDNT\u200b\u4fe1\u53f7\u200b\uff0c\u200b\u6211\u4eec\u200b\u76ee\u524d\u200b\u4e0d\u200b\u5bf9\u200b\u5b83\u4eec\u200b\u505a\u51fa\u200b\u54cd\u5e94\u200b\u3002</p>"},{"location":"zh/about/privacy/#10","title":"10. \u200b\u67d0\u4e9b\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u5c45\u6c11\u200b\u662f\u5426\u200b\u6709\u200b\u7279\u5b9a\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f","text":"<p>\u200b\u5426\u200b\u3002</p> <p>\u200b\u6240\u6709\u200b\u7537\u5973\u200b\u751f\u800c\u5e73\u7b49\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5411\u200b\u6240\u6709\u200b\u4e2a\u4eba\u200b\u63d0\u4f9b\u200b\u76f8\u540c\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff0c\u200b\u65e0\u8bba\u200b\u4ed6\u4eec\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5982\u4f55\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u653e\u5fc3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ee5\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u88ab\u200b\u5bf9\u5f85\u200b\u7684\u200b\u76f8\u540c\u200b\u7684\u200b\u5c0a\u91cd\u200b\u548c\u200b\u5c0a\u4e25\u200b\u5bf9\u5f85\u200b\u60a8\u200b\u3002</p>"},{"location":"zh/about/privacy/#11","title":"11. \u200b\u60a8\u200b\u5982\u4f55\u200b\u67e5\u770b\u200b\u3001\u200b\u66f4\u65b0\u200b\u6216\u200b\u5220\u9664\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\uff1f","text":"<p>\u200b\u60a8\u200b\u51e0\u4e4e\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u67e5\u770b\u200b\u3001\u200b\u66f4\u65b0\u200b\u6216\u200b\u5220\u9664\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\uff0c\u200b\u4e5f\u200b\u65e0\u6cd5\u200b\u786e\u5b9a\u200b\u54ea\u4e9b\u200b\u6570\u636e\u200b\u662f\u200b\u5c5e\u4e8e\u200b\u60a8\u200b\u7684\u200b\u3002</p>"},{"location":"zh/about/privacy/#12","title":"12. \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u4f1a\u200b\u66f4\u65b0\u200b\u6b64\u200b\u58f0\u660e\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u662f\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b\u6b64\u200b\u58f0\u660e\u200b\u4ee5\u200b\u4fdd\u6301\u200b\u4e0e\u200b\u76f8\u5173\u200b\u6cd5\u5f8b\u200b\u7684\u200b\u4e00\u81f4\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0d\u65f6\u200b\u66f4\u65b0\u200b\u6b64\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u3002 \u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u7248\u672c\u200b\u5c06\u200b\u901a\u8fc7\u200b\u66f4\u65b0\u200b\u9876\u90e8\u200b\u7684\u200b\u201c\u200b\u6700\u540e\u200b\u4fee\u8ba2\u200b\u65e5\u671f\u200b\u201d\u200b\u6765\u200b\u8868\u793a\u200b\u3002 \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u91cd\u5927\u200b\u66f4\u6539\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u901a\u8fc7\u200b\u5728\u200b\u672c\u9875\u200b\u53d1\u5e03\u200b\u65b0\u200b\u7684\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u6765\u200b\u901a\u77e5\u200b\u60a8\u200b\u3002 \u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u200b\u6536\u96c6\u200b\u60a8\u200b\u7684\u200b\u4efb\u4f55\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u76f4\u63a5\u200b\u901a\u77e5\u200b\u60a8\u200b\u3002 \u200b\u6211\u4eec\u200b\u9f13\u52b1\u200b\u60a8\u200b\u7ecf\u5e38\u200b\u67e5\u770b\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"zh/models/","title":"models","text":"<p><code>models</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"zh/models/#_1","title":"\u6a21\u578b\u200b\u7c7b","text":"<p>\u200b\u5728\u200b  <code>transformers</code> \u200b\u5e93\u200b\u5f53\u4e2d\u200b\uff0c\u200b\u6a21\u578b\u200b\u7c7b\u200b\u7684\u200b\u540d\u5b57\u200b\u6709\u65f6\u200b\u53ef\u4ee5\u200b\u5f15\u8d77\u200b\u8bef\u89e3\u200b\u3002 \u200b\u5c3d\u7ba1\u200b\u8fd9\u4e9b\u200b\u7c7b\u200b\u652f\u6301\u200b\u56de\u5f52\u200b\u548c\u200b\u5206\u7c7b\u200b\u4efb\u52a1\u200b\uff0c\u200b\u4f46\u200b\u5b83\u4eec\u200b\u7684\u200b\u540d\u5b57\u200b\u901a\u5e38\u200b\u5305\u542b\u200b <code>xxxForSequenceClassification</code>\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u6697\u793a\u200b\u5b83\u4eec\u200b\u53ea\u80fd\u200b\u7528\u4e8e\u200b\u5206\u7c7b\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u8fd9\u79cd\u200b\u6b67\u4e49\u200b\uff0cMultiMolecule \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u6a21\u578b\u200b\u7c7b\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u7c7b\u200b\u7684\u200b\u540d\u79f0\u200b\u6e05\u6670\u200b\u3001\u200b\u76f4\u89c2\u200b\uff0c\u200b\u53cd\u6620\u200b\u4e86\u200b\u5b83\u4eec\u200b\u7684\u200b\u9884\u671f\u200b\u7528\u9014\u200b\uff1a</p> <ul> <li><code>multimolecule.AutoModelForContactPrediction</code>: \u200b\u63a5\u89e6\u200b\u9884\u6d4b\u200b</li> <li><code>multimolecule.AutoModelForNucleotidePrediction</code>: \u200b\u6838\u82f7\u9178\u200b\u9884\u6d4b\u200b</li> <li><code>multimolecule.AutoModelForSequencePrediction</code>: \u200b\u5e8f\u5217\u200b\u9884\u6d4b\u200b</li> <li><code>multimolecule.AutoModelForTokenPrediction</code>: \u200b\u4ee4\u724c\u200b\u9884\u6d4b\u200b</li> </ul> <p>\u200b\u6bcf\u4e2a\u200b\u6a21\u578b\u200b\u90fd\u200b\u652f\u6301\u200b\u56de\u5f52\u200b\u548c\u200b\u5206\u7c7b\u200b\u4efb\u52a1\u200b\uff0c\u200b\u4e3a\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u5e94\u7528\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7075\u6d3b\u6027\u200b\u548c\u200b\u7cbe\u5ea6\u200b\u3002</p>"},{"location":"zh/models/#_2","title":"\u63a5\u89e6\u200b\u9884\u6d4b","text":"<p>\u200b\u63a5\u89e6\u200b\u9884\u6d4b\u200b\u4e3a\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u5bf9\u200b\u4ee4\u724c\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u6807\u7b7e\u200b\u3002 \u200b\u6700\u200b\u5e38\u89c1\u200b\u7684\u200b\u63a5\u89e6\u200b\u9884\u6d4b\u200b\u4efb\u52a1\u200b\u4e4b\u4e00\u200b\u662f\u200b\u86cb\u767d\u8d28\u200b\u8ddd\u79bb\u200b\u56fe\u200b\u9884\u6d4b\u200b\u3002 \u200b\u86cb\u767d\u8d28\u200b\u8ddd\u79bb\u200b\u56fe\u200b\u9884\u6d4b\u200b\u8bd5\u56fe\u200b\u627e\u5230\u200b\u4e09\u7ef4\u200b\u86cb\u767d\u8d28\u200b\u7ed3\u6784\u200b\u4e2d\u200b\u6240\u6709\u200b\u53ef\u80fd\u200b\u7684\u200b\u6c28\u57fa\u9178\u200b\u6b8b\u57fa\u200b\u5bf9\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8ddd\u79bb\u200b</p>"},{"location":"zh/models/#_3","title":"\u6838\u82f7\u9178\u200b\u9884\u6d4b","text":"<p>\u200b\u4e0e\u200b Token Classification \u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b <code>&lt;bos&gt;</code> \u200b\u6216\u200b <code>&lt;eos&gt;</code> \u200b\u4ee4\u724c\u200b\uff0c\u200b\u5219\u200b\u5c06\u200b\u5176\u200b\u79fb\u9664\u200b\u3002</p> <p><code>&lt;bos&gt;</code> \u200b\u548c\u200b <code>&lt;eos&gt;</code> \u200b\u4ee4\u724c\u200b</p> <p>\u200b\u5728\u200b MultiMolecule \u200b\u63d0\u4f9b\u200b\u7684\u200b\u5206\u8bcd\u5668\u200b\u4e2d\u200b\uff0c<code>&lt;bos&gt;</code> \u200b\u4ee4\u724c\u200b\u6307\u5411\u200b <code>&lt;cls&gt;</code> \u200b\u4ee4\u724c\u200b\uff0c<code>&lt;sep&gt;</code> \u200b\u4ee4\u724c\u200b\u6307\u5411\u200b <code>&lt;eos&gt;</code> \u200b\u4ee4\u724c\u200b\u3002</p>"},{"location":"zh/models/#_4","title":"\u4f7f\u7528","text":""},{"location":"zh/models/#multimoleculeautomodel","title":"\u4f7f\u7528\u200b <code>multimolecule.AutoModel</code> \u200b\u6784\u5efa","text":"Python<pre><code>from transformers import AutoTokenizer\n\nfrom multimolecule import AutoModelForSequencePrediction\n\nmodel = AutoModelForSequencePrediction.from_pretrained(\"multimolecule/rnafm\")\ntokenizer = AutoTokenizer.from_pretrained(\"multimolecule/rnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"zh/models/#_5","title":"\u76f4\u63a5\u200b\u8bbf\u95ee","text":"<p>\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>from_pretrained</code> \u200b\u65b9\u6cd5\u200b\u76f4\u63a5\u200b\u52a0\u8f7d\u200b\u3002</p> Python<pre><code>from multimolecule.models import RnaFmForNucleotidePrediction, RnaTokenizer\n\nmodel = RnaFmForNucleotidePrediction.from_pretrained(\"multimolecule/rnafm\")\ntokenizer = RnaTokenizer.from_pretrained(\"multimolecule/rnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"zh/models/#transformersautomodel","title":"\u4f7f\u7528\u200b <code>transformers.AutoModel</code> \u200b\u6784\u5efa","text":"<p>\u200b\u867d\u7136\u200b\u6211\u4eec\u200b\u4e3a\u200b\u6a21\u578b\u200b\u7c7b\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e0d\u540c\u200b\u7684\u200b\u547d\u540d\u200b\u7ea6\u5b9a\u200b\uff0c\u200b\u4f46\u200b\u6a21\u578b\u200b\u4ecd\u7136\u200b\u6ce8\u518c\u200b\u5230\u200b\u76f8\u5e94\u200b\u7684\u200b <code>transformers.AutoModel</code> \u200b\u4e2d\u200b\u3002</p> Python<pre><code>from transformers import AutoModelForSequenceClassification, AutoTokenizer\n\nimport multimolecule  # noqa: F401\n\nmodel = AutoModelForSequenceClassification.from_pretrained(\"multimolecule/mrnafm\")\ntokenizer = AutoTokenizer.from_pretrained(\"multimolecule/mrnafm\")\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u524d\u5148\u200b <code>import multimolecule</code></p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200b <code>transformers.AutoModel</code> \u200b\u6784\u5efa\u200b\u6a21\u578b\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5fc5\u987b\u200b\u5148\u200b <code>import multimolecule</code>\u3002 \u200b\u6a21\u578b\u200b\u7684\u200b\u6ce8\u518c\u200b\u5728\u200b <code>multimolecule</code> \u200b\u5305\u4e2d\u200b\u5b8c\u6210\u200b\uff0c\u200b\u6a21\u578b\u200b\u5728\u200b <code>transformers</code> \u200b\u5305\u4e2d\u200b\u4e0d\u53ef\u200b\u7528\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u5728\u200b\u4f7f\u7528\u200b <code>transformers.AutoModel</code> \u200b\u4e4b\u524d\u200b\u672a\u200b <code>import multimolecule</code>\uff0c\u200b\u5c06\u4f1a\u200b\u5f15\u53d1\u200b\u4ee5\u4e0b\u200b\u9519\u8bef\u200b\uff1a</p> Python<pre><code>ValueError: The checkpoint you are trying to load has model type `rnafm` but Transformers does not recognize this architecture. This could be because of an issue with the checkpoint, or because your version of Transformers is out of date.\n</code></pre>"},{"location":"zh/models/#_6","title":"\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u9999\u8349\u200b\u6a21\u578b","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u7c7b\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u3002</p> Python<pre><code>from multimolecule.models import RnaFmConfig, RnaFmForNucleotidePrediction, RnaTokenizer\n\nconfig = RnaFmConfig()\nmodel = RnaFmForNucleotidePrediction(config)\ntokenizer = RnaTokenizer()\n\nsequence = \"UAGCGUAUCAGACUGAUGUUG\"\noutput = model(**tokenizer(sequence, return_tensors=\"pt\"))\n</code></pre>"},{"location":"zh/models/#_7","title":"\u53ef\u7528\u200b\u6a21\u578b","text":""},{"location":"zh/models/#dna","title":"\u8131\u6c27\u6838\u7cd6\u6838\u9178\u200b\uff08DNA\uff09","text":"<ul> <li>CaLM</li> </ul>"},{"location":"zh/models/#rna","title":"\u6838\u7cd6\u6838\u9178\u200b\uff08RNA\uff09","text":"<ul> <li>ERNIE-RNA</li> <li>RiNALMo</li> <li>RNABERT</li> <li>RNAErnie</li> <li>RNA-FM</li> <li>RNA-MSM</li> <li>SpliceBERT</li> <li>3UTRBERT</li> <li>UTR-LM</li> </ul>"},{"location":"zh/module/","title":"module","text":"<p><code>module</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u9884\u5b9a\u200b\u4e49\u200b\u6a21\u5757\u200b\uff0c\u200b\u4f9b\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u81ea\u5df1\u200b\u7684\u200b\u67b6\u6784\u200b\u3002</p> <p>MultiMolecule \u200b\u5efa\u7acb\u200b\u5728\u200b  \u200b\u751f\u6001\u7cfb\u7edf\u200b\u4e4b\u4e0a\u200b\uff0c\u200b\u62e5\u62b1\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u7406\u5ff5\u200b\uff1a\u200b\u4e0d\u8981\u200b \u200b\u91cd\u590d\u200b\u81ea\u5df1\u200b\u3002 \u200b\u6211\u4eec\u200b\u9075\u5faa\u200b <code>\u200b\u5355\u4e00\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\u7b56\u7565\u200b</code>\uff0c\u200b\u5176\u4e2d\u200b <code>models</code> \u200b\u5305\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6a21\u578b\u200b\u90fd\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u4e14\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u63cf\u8ff0\u200b\u7f51\u7edc\u200b\u8bbe\u8ba1\u200b\u7684\u200b <code>modeling.py</code> \u200b\u6587\u4ef6\u200b\u3002</p> <p><code>module</code> \u200b\u5305\u200b\u65e8\u5728\u200b\u63d0\u4f9b\u200b\u7b80\u5355\u200b\u3001\u200b\u53ef\u200b\u91cd\u7528\u200b\u7684\u200b\u6a21\u5757\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6a21\u5757\u200b\u5728\u200b\u591a\u4e2a\u200b\u6a21\u578b\u200b\u4e2d\u200b\u4fdd\u6301\u4e00\u81f4\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u6700\u5927\u200b\u7a0b\u5ea6\u200b\u5730\u200b\u51cf\u5c11\u200b\u4e86\u200b\u4ee3\u7801\u200b\u91cd\u590d\u200b\uff0c\u200b\u5e76\u200b\u4fc3\u8fdb\u200b\u4e86\u200b\u5e72\u51c0\u200b\u3001\u200b\u6613\u4e8e\u200b\u7ef4\u62a4\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"zh/module/#_1","title":"\u6838\u5fc3\u200b\u7279\u6027","text":"<ul> <li>\u200b\u53ef\u200b\u91cd\u7528\u200b\u6027\u200b\uff1a<code>module</code> \u200b\u5305\u62ec\u200b\u4e00\u4e9b\u200b\u5728\u200b\u4e0d\u540c\u200b\u6a21\u578b\u200b\u4e2d\u200b\u5e38\u7528\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>SequencePredictionHead</code>\u3002\u200b\u8fd9\u200b\u51cf\u5c11\u200b\u4e86\u200b\u5197\u4f59\u200b\uff0c\u200b\u5e76\u200b\u7b80\u5316\u200b\u4e86\u200b\u5f00\u53d1\u200b\u8fc7\u7a0b\u200b\u3002</li> <li>\u200b\u4e00\u81f4\u6027\u200b\uff1a\u200b\u901a\u8fc7\u200b\u96c6\u4e2d\u200b\u5e38\u89c1\u200b\u6a21\u5757\u200b\uff0c\u200b\u6211\u4eec\u200b\u786e\u4fdd\u200b\u66f4\u65b0\u200b\u548c\u200b\u6539\u8fdb\u200b\u5728\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u4e2d\u200b\u4e00\u81f4\u200b\u5e94\u7528\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u4e86\u200b\u53ef\u9760\u6027\u200b\u548c\u200b\u6027\u80fd\u200b\u3002</li> <li>\u200b\u7075\u6d3b\u6027\u200b\uff1a\u200b\u867d\u7136\u200b\u53d8\u6362\u200b\u7f51\u7edc\u200b\u7f16\u7801\u5668\u200b\u7b49\u200b\u6a21\u5757\u200b\u88ab\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u200b\u5b83\u4eec\u200b\u5728\u200b\u5b9e\u73b0\u200b\u7ec6\u8282\u200b\u4e0a\u200b\u7ecf\u5e38\u200b\u6709\u6240\u4e0d\u540c\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u524d\u200b-\u200b\u5f52\u4e00\u5316\u200b vs. \u200b\u540e\u200b-\u200b\u5f52\u4e00\u5316\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u6b8b\u5dee\u200b\u8fde\u63a5\u200b\u7b56\u7565\u200b\uff09\u3002<code>module</code> \u200b\u5305\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u66f4\u200b\u7b80\u5355\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5c06\u200b\u590d\u6742\u200b\u7684\u200b\u3001\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u6a21\u578b\u200b\u7684\u200b\u53d8\u5316\u200b\u7559\u7ed9\u200b\u6bcf\u4e2a\u200b\u6a21\u578b\u200b\u7684\u200b <code>modeling.py</code> \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u3002</li> </ul>"},{"location":"zh/module/#modules","title":"Modules","text":"<ul> <li>heads: \u200b\u5305\u62ec\u200b\u591a\u79cd\u200b\u9884\u6d4b\u200b\u5934\u200b\uff0c\u200b\u6bd4\u5982\u200b<code>SequencePredictionHead</code>\u3001<code>NucleotidePredictionHead</code>\u200b\u548c\u200b<code>ContactPredictionHead</code>\u3002</li> <li>embeddings\uff1a\u200b\u5305\u62ec\u200b\u591a\u79cd\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff0c\u200b\u6bd4\u5982\u200b<code>SinusoidalEmbedding</code>\u200b\u548c\u200b <code>RotaryEmbedding</code>\u3002</li> </ul>"},{"location":"zh/module/embeddings/","title":"embeddings","text":"<p><code>embeddings</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\u3002</p>"},{"location":"zh/module/heads/","title":"heads","text":"<p><code>heads</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u7684\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u5934\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u4e0d\u540c\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</p> <p><code>heads</code> \u200b\u63a5\u53d7\u200b <code>ModelOutupt</code>\u3001<code>dict</code> \u200b\u6216\u200b <code>tuple</code> \u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u3002 \u200b\u5b83\u4f1a\u200b\u81ea\u52a8\u200b\u67e5\u627e\u200b\u9884\u6d4b\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u5e76\u200b\u76f8\u5e94\u200b\u5730\u200b\u5904\u7406\u200b\u3002</p> <p>\u200b\u4e00\u4e9b\u200b\u9884\u6d4b\u200b\u5934\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>attention_mask</code> \u200b\u6216\u200b <code>input_ids</code>\uff0c\u200b\u4f8b\u5982\u200b <code>ContactPredictionHead</code>\u3002 \u200b\u8fd9\u4e9b\u200b\u989d\u5916\u200b\u7684\u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b/\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u4f20\u5165\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c<code>heads</code> \u200b\u4f7f\u7528\u200b\u4e0e\u200b  Transformers \u200b\u76f8\u540c\u200b\u7684\u200b <code>ModelOutupt</code> \u200b\u7ea6\u5b9a\u200b\u3002 \u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>tuple</code>\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u89c6\u4e3a\u200b <code>pooler_output</code>\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u5143\u7d20\u200b\u89c6\u4e3a\u200b <code>last_hidden_state</code>\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u89c6\u4e3a\u200b <code>attention_map</code>\u3002 \u200b\u7528\u6237\u200b\u6709\u200b\u8d23\u4efb\u200b\u786e\u4fdd\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u683c\u5f0f\u200b\u6b63\u786e\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>ModelOutupt</code> \u200b\u6216\u200b\u4e00\u4e2a\u200b <code>dict</code>\uff0c<code>heads</code> \u200b\u5c06\u200b\u4ece\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u4e2d\u200b\u67e5\u627e\u200b <code>HeadConfig.output_name</code>\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>HeadConfig</code> \u200b\u4e2d\u200b\u6307\u5b9a\u200b <code>output_name</code>\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b <code>heads</code> \u200b\u53ef\u4ee5\u200b\u6b63\u786e\u200b\u5b9a\u4f4d\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u5f20\u91cf\u200b\u3002</p>"},{"location":"zh/tokenisers/","title":"tokenisers","text":"<p><code>tokenisers</code> \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u9884\u5b9a\u200b\u4e49\u200b\u4ee4\u724c\u200b\u5668\u200b\u3002</p> <p>\u200b\u4ee4\u724c\u200b\u5668\u662f\u200b\u4e00\u4e2a\u200b\u5c06\u200b\u6838\u82f7\u9178\u200b\u6216\u200b\u6c28\u57fa\u9178\u200b\u5e8f\u5217\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u7d22\u5f15\u200b\u5e8f\u5217\u200b\u7684\u200b\u7c7b\u200b\u3002\u200b\u5b83\u200b\u7528\u4e8e\u200b\u5728\u200b\u5c06\u200b\u8f93\u5165\u200b\u5e8f\u5217\u200b\u9988\u9001\u200b\u5230\u200b\u6a21\u578b\u200b\u4e4b\u524d\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\u3002</p> <p>\u200b\u8bf7\u53c2\u9605\u200b Tokenizer \u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u3002</p>"},{"location":"zh/tokenisers/#_1","title":"\u53ef\u7528\u200b\u4ee4\u724c\u200b\u5668","text":"<ul> <li>DnaTokenizer</li> <li>RnaTokenizer</li> <li>ProteinTokenizer</li> </ul>"}]}